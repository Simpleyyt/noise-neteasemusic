/* noise.vapi generated by valac 0.28.1, do not modify. */

namespace Noise {
	namespace Database {
		namespace Tables {
			[CCode (cheader_filename = "noise.h")]
			public const string COLUMNS;
			[CCode (cheader_filename = "noise.h")]
			public const string DEVICES;
			[CCode (cheader_filename = "noise.h")]
			public const string MEDIA;
			[CCode (cheader_filename = "noise.h")]
			public const string PLAYLISTS;
			[CCode (cheader_filename = "noise.h")]
			public const string SMART_PLAYLISTS;
		}
	}
	namespace ImageUtils {
	}
	namespace Preferences {
	}
	namespace Widgets {
		[CCode (cheader_filename = "noise.h")]
		public class NavigationArrows : Gtk.Box {
			public NavigationArrows ();
			public bool can_go_back { get; set; }
			public bool can_go_next { get; set; }
			public signal void next_clicked ();
			public signal void previous_clicked ();
		}
		[CCode (cheader_filename = "noise.h")]
		public class StatusBar : Gtk.ActionBar {
			public StatusBar (Noise.LibraryWindow lw);
			public void set_info (string message);
			public void update_sensitivities ();
			public Gtk.Widget equalizer_item { get; private set; }
			public Gtk.Widget info_panel_item { get; private set; }
			public Gtk.Widget playlist_item { get; private set; }
			public Gtk.Widget repeat_item { get; private set; }
			public Gtk.Widget shuffle_item { get; private set; }
		}
		[CCode (cheader_filename = "noise.h")]
		public class TileView : Gtk.IconView {
			public TileView ();
			public override void size_allocate (Gtk.Allocation alloc);
			public int image_column { set; }
			public int subtitle_column { set; }
			public int title_column { set; }
		}
		[CCode (cheader_filename = "noise.h")]
		public class ViewSelector : Gtk.ToolItem {
			public enum Mode {
				GRID,
				LIST,
				COLUMN
			}
			public ViewSelector ();
			public bool get_column_browser_toggle_active ();
			public bool get_column_browser_toggle_visible ();
			public new bool get_sensitive ();
			public void set_column_browser_toggle_active (bool active);
			public void set_column_browser_toggle_visible (bool val);
			public new void set_sensitive (bool sensitive);
			public Noise.Widgets.ViewSelector.Mode selected { get; set; }
			public signal void column_browser_toggled (bool new_value);
			public signal void mode_changed (Noise.Widgets.ViewSelector.Mode new_mode);
		}
	}
	[CCode (cheader_filename = "noise.h")]
	public class App : Granite.Application {
		public const string ABOUT_MUSIC;
		public const string ABOUT_NOISE;
		public const string COMMENT;
		public const string GENERIC;
		public const string KEYWORDS;
		public const string PROGRAM_NAME;
		public App ();
		protected override void activate ();
		public string get_desktop_file_name ();
		public string get_id ();
		public string get_name ();
		public override void open (GLib.File[] files, string hint);
		public static Noise.LibraryWindow main_window { get; private set; }
		public static Noise.PlaybackManager player { get; private set; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class BrowserColumn : Gtk.Grid {
		public enum Category {
			RATING,
			GROUPING,
			YEAR,
			GENRE,
			COMPOSER,
			ARTIST,
			ALBUM,
			N_CATEGORIES;
			public static Noise.BrowserColumn.Category first ();
			public static Noise.BrowserColumn.Category last ();
			public string to_string ();
		}
		public BrowserColumn (Noise.ColumnBrowser miller_parent, Noise.BrowserColumn.Category category);
		public void add_item (string text);
		public string get_selected ();
		public void populate (Gee.HashSet<string> items);
		public void select_first_item ();
		public void set_selected (string? val, bool notify = false);
		public Noise.BrowserColumn.Category category { get; set construct; }
		public bool first_item_selected { get; }
		public Gtk.CheckMenuItem menu_item { get; set construct; }
		public bool show_separator { set; }
		public bool visible { get; set; }
		public signal void header_clicked (Gdk.EventButton e);
		public signal void reset_requested ();
		public signal void row_activated (string text);
		public signal void selection_changed (Noise.BrowserColumn.Category type, string val);
		public signal void visibility_changed (bool visible);
	}
	[CCode (cheader_filename = "noise.h")]
	public class BrowserColumnModel : GLib.Object, Gtk.TreeModel, Gtk.TreeSortable {
		public BrowserColumnModel (Noise.BrowserColumn.Category category);
		public void append (out Gtk.TreeIter iter);
		public void append_items (Gee.Collection<string> strings, bool emit);
		public void remove (Gtk.TreeIter iter);
		public int sequenceIterCompareFunc (GLib.SequenceIter<string> a, GLib.SequenceIter<string> b);
		public new void @set (Gtk.TreeIter iter, ...);
		public int n_items { get; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class CellDataFunctionHelper {
		public CellDataFunctionHelper (Noise.GenericList view);
		public static void bitrate_func (Gtk.CellLayout layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
		public static void date_func (Gtk.CellLayout layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
		public static void file_size_func (Gtk.CellLayout layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
		public static string get_date_func_sample_string ();
		public static string get_file_size_sample ();
		public void icon_func (Gtk.CellLayout layout, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter);
		public static void intelligent_func (Gtk.CellLayout layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
		public static void length_func (Gtk.CellLayout layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
		public static void number_func (Gtk.CellLayout layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
		public static void rating_func (Gtk.CellLayout layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
		public void spinner_func (Gtk.CellLayout layout, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter);
		public static void string_func (Gtk.CellLayout layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
	}
	[CCode (cheader_filename = "noise.h")]
	public abstract class ColumnBrowser : Gtk.Grid {
		public enum Position {
			AUTOMATIC,
			LEFT,
			TOP
		}
		public ColumnBrowser (Noise.ViewWrapper view_wrapper, Noise.BrowserColumn.Category[] categories);
		protected Noise.BrowserColumn add_column (Noise.BrowserColumn.Category type);
		public void fill_column (Noise.BrowserColumn column);
		public bool match_media (Noise.Media m);
		public void reset_filters ();
		public void set_media (Gee.Collection<Noise.Media> media);
		public Noise.ColumnBrowser.Position actual_position { get; set; }
		public Gee.TreeSet<Noise.BrowserColumn> columns { get; private set; }
		public bool filtered { get; }
		public bool initialized { get; }
		public Noise.ColumnBrowser.Position position { get; protected set; }
		public Noise.ViewWrapper view_wrapper { get; private set; }
		public Gee.TreeSet<Noise.BrowserColumn.Category> visible_columns { owned get; protected set; }
		public signal void changed ();
		public signal void position_changed (Noise.ColumnBrowser.Position p);
	}
	[CCode (cheader_filename = "noise.h")]
	public class ContractMenuItem : Gtk.MenuItem {
		public ContractMenuItem (Granite.Services.Contract contract, Gee.Collection<Noise.Media> medias);
		public override void activate ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class CoverImport : GLib.Object {
		public CoverImport (GLib.Cancellable cancellable);
		public void discoverer_import_media (Gee.Collection<Noise.Media> medias);
	}
	[CCode (cheader_filename = "noise.h")]
	public class CoverartCache : Noise.MediaArtCache<Noise.Media> {
		public CoverartCache ();
		public async void fetch_all_cover_art_async (Gee.Collection<Noise.Media> media);
		public async void fetch_folder_images_async (Gee.Collection<Noise.Media> media);
		protected override Gdk.Pixbuf? filter_func (Gdk.Pixbuf pix);
		[Deprecated (replacement = "get_image", since = "1.1")]
		public Gdk.Pixbuf get_album_cover (Noise.Album album);
		public Gdk.Pixbuf get_cover (Noise.Media m);
		protected override string get_key (Noise.Media m);
		public Gdk.Pixbuf? get_original_cover (Noise.Media m);
		public async void load_for_media_async (Gee.Collection<Noise.Media> media);
		public static Noise.CoverartCache instance { get; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class DataBaseManager : GLib.Object {
		public SQLHeavy.Database database;
		public void add_columns_state (Noise.StaticPlaylist? p = null, Noise.SmartPlaylist? sp = null);
		public void add_default_columns ();
		public void add_default_smart_playlists ();
		public Gee.TreeSet<Noise.LocalMedia> add_media (Gee.Collection<Noise.Media> media);
		public void add_playlist (Noise.StaticPlaylist p);
		public void clear_media ();
		public static Noise.DataBaseManager get_default ();
		public Gee.HashMap<Noise.Playlist,Noise.TreeViewSetup> load_columns_state ();
		public Gee.Collection<Noise.DevicePreferences> load_devices ();
		public Gee.TreeSet<Noise.LocalMedia> load_media ();
		public Gee.ArrayList<Noise.StaticPlaylist> load_playlists ();
		public Gee.ArrayList<Noise.SmartPlaylist> load_smart_playlists ();
		public static Gee.LinkedList<Noise.SmartQuery> queries_from_string (string q);
		public static string queries_to_string (Gee.Collection<Noise.SmartQuery> queries);
		public void remove_columns_state (Noise.StaticPlaylist? p = null, Noise.SmartPlaylist? sp = null);
		public void remove_device (Noise.DevicePreferences device);
		public void remove_media (Gee.Collection<Noise.Media> media);
		public void remove_playlist (Noise.StaticPlaylist p);
		public void remove_smart_playlist (Noise.SmartPlaylist p);
		public void resetProgress (int items);
		public void save_columns_state (Gee.Collection<Noise.StaticPlaylist>? playlists = null, Gee.Collection<Noise.SmartPlaylist>? smart_playlists = null);
		public void save_device (Noise.DevicePreferences dp);
		public void save_devices (Gee.Collection<Noise.DevicePreferences> devices);
		public void save_playlist (Noise.StaticPlaylist p, string? old_name = null);
		public void save_playlists (Gee.Collection<Noise.StaticPlaylist> playlists);
		public void save_smart_playlist (Noise.SmartPlaylist p, string? old_name = null);
		public void save_smart_playlists (Gee.Collection<Noise.SmartPlaylist> smarts);
	}
	[CCode (cheader_filename = "noise.h")]
	public class DataBaseUpdater : GLib.Object {
		public DataBaseUpdater ();
		public async void removeItem (GLib.Object item);
		public void save_device (Noise.DevicePreferences device);
		public void save_playlist (Noise.StaticPlaylist p, string? old_name = null);
		public void save_smart_playlist (Noise.SmartPlaylist p, string? old_name = null);
	}
	[CCode (cheader_filename = "noise.h")]
	public class DeviceSummaryWidget : Gtk.EventBox {
		public DeviceSummaryWidget (Noise.Device d);
		public bool all_medias_selected ();
		public void build_ui ();
		public void refresh_lists ();
		public void sync_clicked ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class DeviceView : Gtk.Grid {
		public Noise.Device d;
		public DeviceView (Noise.Device d);
		public void set_as_current_view ();
		public void showImportDialog ();
		public void syncClicked ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class DeviceViewWrapper : Noise.ViewWrapper {
		public DeviceViewWrapper (Noise.TreeViewSetup tvs, Noise.Device d, Noise.Library library);
		public virtual void set_device (Noise.Device device);
		protected override void set_no_media_alert ();
		public Noise.Device d { get; private set; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class EqualizerPopover : Gtk.Popover {
		public EqualizerPopover ();
		public override void closed ();
		public bool verify_preset_name (string preset_name);
	}
	[CCode (cheader_filename = "noise.h")]
	public class FastGrid : Noise.Widgets.TileView {
		public enum Column {
			PIXBUF,
			TITLE,
			SUBTITLE,
			TOOLTIP,
			N_COLUMNS
		}
		public delegate int SortCompareFunc (GLib.Object a, GLib.Object b);
		public delegate void ViewSearchFunc (string search, Gee.HashMap<int,GLib.Object> table, Gee.HashMap<int,GLib.Object> showing);
		public bool research_needed;
		public FastGrid ();
		public void add_objects (Gee.Collection<GLib.Object> objects);
		public void do_search (string? search);
		public int get_index_from_iter (Gtk.TreeIter iter);
		public GLib.Object get_object_from_index (int index);
		public Gee.Map<int,GLib.Object> get_table ();
		public Gee.Map<int,GLib.Object> get_visible_table ();
		public void quicksort (int start, int end);
		public void redraw_row (int row_index);
		public void remove_objects (Gee.Collection<GLib.Object> objects);
		public void resort ();
		public void set_compare_func (Noise.FastGrid.SortCompareFunc func);
		public void set_search_func (Noise.FastGrid.ViewSearchFunc func);
		public void set_table (Gee.HashMap<int,GLib.Object> table, bool do_resort);
		public void set_value_func (Noise.FastGridModel.ValueReturnFunc func);
	}
	[CCode (cheader_filename = "noise.h")]
	public class FastGridModel : GLib.Object, Gtk.TreeModel, Gtk.TreeDragSource {
		public delegate GLib.Value? ValueReturnFunc (int row, int column, GLib.Object o);
		public FastGridModel ();
		public void append (out Gtk.TreeIter iter);
		public void remove (Gtk.TreeIter iter);
		public new void @set (Gtk.TreeIter iter, ...);
		public void set_table (Gee.HashMap<int,GLib.Object> table);
		public void set_value_func (Noise.FastGridModel.ValueReturnFunc func);
		public void update_row (int index);
	}
	[CCode (cheader_filename = "noise.h")]
	public class FastModel : GLib.Object, Gtk.TreeModel, Gtk.TreeSortable {
		public delegate GLib.Value? ValueReturnFunc (int row, int column, GLib.Object o);
		public FastModel (Gee.Collection<GLib.Type> column_types);
		public void append (out Gtk.TreeIter iter);
		public GLib.Object get_object (Gtk.TreeIter iter);
		public void remove (Gtk.TreeIter iter);
		public new void @set (Gtk.TreeIter iter, ...);
		public void set_table (Gee.HashMap<int,GLib.Object> table);
		public void set_value_func (Noise.FastModel.ValueReturnFunc func);
		public void update_row (int index);
		public signal void reorder_requested (int column, Gtk.SortType direction);
	}
	[CCode (cheader_filename = "noise.h")]
	public class FastView : Gtk.TreeView {
		public delegate int SortCompareFunc (int sort_column_id, Gtk.SortType sort_direction, Noise.Media a, Noise.Media b, int index_a, int index_b);
		public delegate void ViewSearchFunc (string search, Gee.HashMap<int,Noise.Media> table, Gee.HashMap<int,Noise.Media> showing);
		public bool research_needed;
		protected Gee.HashMap<int,Noise.Media> showing;
		protected int sort_column_id;
		protected Gtk.SortType sort_direction;
		protected Gee.HashMap<int,Noise.Media> table;
		public const int OPTIMAL_COLUMN;
		public FastView (Gee.Collection<GLib.Type> types);
		public void do_search (string? search = null);
		public static int get_index_from_iter (Gtk.TreeIter iter);
		public Noise.Media? get_object_from_index (int index);
		public void get_sort_column_id (out int sort_column, out Gtk.SortType order);
		public Gee.Map<int,Noise.Media> get_table ();
		public Gee.Map<int,Noise.Media> get_visible_table ();
		public void quicksort (int start, int end);
		public void redraw_row (int row_index);
		public void resort ();
		public void set_compare_func (Noise.FastView.SortCompareFunc func);
		public void set_search_func (Noise.FastView.ViewSearchFunc func);
		public void set_sort_column_id (int sort_column_id, Gtk.SortType order);
		public void set_table (Gee.HashMap<int,Noise.Media> table, bool do_resort);
		public void set_value_func (Noise.FastModel.ValueReturnFunc func);
		public signal void rows_reordered ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class FieldEditor : Gtk.Box {
		public FieldEditor (string name, string original, Gtk.Widget w);
		public bool checked ();
		public virtual void entryChanged ();
		public string get_value ();
		public virtual void ratingChanged (int new_rating);
		public virtual void resetClicked ();
		public void set_check_visible (bool val);
		public void set_value (string val);
		public virtual void spinButtonChanged ();
		public virtual void textViewChanged ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class FileNotFoundDialog : Gtk.Dialog {
		public FileNotFoundDialog (Gee.Collection<Noise.Media> _media_list);
	}
	[CCode (cheader_filename = "noise.h")]
	public class FileOperator : GLib.Object {
		public enum ImportType {
			SET,
			RESCAN,
			PLAYLIST,
			IMPORT
		}
		public GLib.Cancellable cancellable;
		public int index;
		public int item_count;
		public Noise.GStreamerTagger tagger;
		public FileOperator ();
		public void connect_to_manager ();
		public async void copy_imports_async ();
		public string get_extension (string name);
		public void import_files (Gee.Collection<string> files, Noise.FileOperator.ImportType type);
		public int list_recursive_directory (GLib.File music_folder, ref Gee.TreeSet<string> dirs);
		public void remove_media (Gee.Collection<Noise.Media> toRemove);
		public void resetProgress (int items);
		public async void save_media (Gee.Collection<Noise.Media> to_save);
		public bool update_file_hierarchy (Noise.Media s, bool delete_old, bool emit_update);
		public signal void import_cancelled ();
		public signal void rescan_cancelled ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class GStreamerTagger : GLib.Object {
		public GStreamerTagger (GLib.Cancellable? cancellable = null);
		public void discoverer_import_media (Gee.Collection<string> uris);
		public signal void import_error (string file_uri, GLib.Error error);
		public signal void media_imported (Noise.Media m);
		public signal void queue_finished ();
	}
	[CCode (cheader_filename = "noise.h")]
	public abstract class GenericList : Noise.FastView {
		protected Noise.CellDataFunctionHelper cell_data_helper;
		protected Gtk.Menu column_chooser_menu;
		protected bool dragging;
		protected bool is_current_list;
		protected Noise.ViewWrapper parent_wrapper;
		protected int relative_id;
		protected Noise.TreeViewSetup tvs;
		public GenericList (Noise.ViewWrapper view_wrapper, Noise.TreeViewSetup tvs);
		protected abstract void add_column (Gtk.TreeViewColumn column, Noise.ListColumn type);
		protected void add_column_chooser_menu_item (Gtk.TreeViewColumn tvc, Noise.ListColumn type);
		protected void add_columns ();
		public void add_media (Gee.Collection<Noise.Media> to_add);
		public new void columns_autosize ();
		public Noise.ViewWrapper.Hint get_hint ();
		public bool get_is_current_list ();
		public Noise.Media? get_media_from_index (int index);
		public int get_relative_id ();
		protected Gee.Collection<Noise.Media> get_selected_medias ();
		protected abstract void mediaRemoveClicked ();
		protected void mediaScrollToCurrentRequested ();
		public void media_updated (Gee.Collection<int> ids);
		protected void on_rating_cell_changed (int new_rating, Gtk.Widget widget, string path);
		public void on_rows_reordered ();
		public void remove_media (Gee.Collection<Noise.Media> to_remove);
		public override void row_activated (Gtk.TreePath path, Gtk.TreeViewColumn column);
		public void scroll_to_current_media (bool unfilter_if_not_found);
		public void set_as_current_list (Noise.Media? m = null);
		protected void set_fixed_column_width (Gtk.Widget treeview, Gtk.TreeViewColumn column, Gtk.CellRendererText renderer, string[] strings, int padding);
		public void set_hint (Noise.ViewWrapper.Hint hint);
		public void set_media (Gee.Collection<Noise.Media> to_add);
		public void set_parent_wrapper (Noise.ViewWrapper parent);
		public void set_relative_id (int id);
		protected abstract void updateTreeViewSetup ();
		public abstract void update_sensitivities ();
		protected bool view_header_click (Gdk.EventButton e, bool is_selector_col);
		public signal void import_requested (Gee.Collection<Noise.Media> to_import);
	}
	[CCode (cheader_filename = "noise.h")]
	public abstract class GridLayout : Noise.ViewTextOverlay {
		public GridLayout (Noise.ViewWrapper view_wrapper);
		protected void add_objects (Gee.Collection<GLib.Object> objects);
		protected void clear_objects ();
		protected abstract int compare_func (GLib.Object a, GLib.Object b);
		protected void do_search (string? search);
		protected Gee.Collection<GLib.Object> get_objects ();
		protected abstract Gdk.Pixbuf? get_pixbuf (GLib.Object o);
		protected abstract Gee.Collection<Noise.Media> get_selected_media (GLib.Object obj);
		protected Gee.Collection<GLib.Object> get_visible_objects ();
		protected abstract void item_activated (GLib.Object? object);
		protected void remove_objects (Gee.Collection<GLib.Object> objects);
		protected abstract void search_func (string search, Gee.HashMap<int,GLib.Object> table, Gee.HashMap<int,GLib.Object> showing);
		protected void set_research_needed (bool value);
		protected abstract GLib.Value? val_func (int row, int column, GLib.Object o);
		public Noise.ViewWrapper parent_view_wrapper { get; protected set; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class GridView : Noise.ContentView, Noise.GridLayout {
		public GridView (Noise.ViewWrapper view_wrapper);
		protected override int compare_func (GLib.Object o_a, GLib.Object o_b);
		public Gee.Collection<Noise.Album> get_albums ();
		protected override Gdk.Pixbuf? get_pixbuf (GLib.Object o);
		public int get_relative_id ();
		protected override Gee.Collection<Noise.Media> get_selected_media (GLib.Object obj);
		public Gee.Collection<Noise.Album> get_visible_albums ();
		protected override void item_activated (GLib.Object? object);
		protected override void search_func (string search, Gee.HashMap<int,GLib.Object> table, Gee.HashMap<int,GLib.Object> showing);
		public void setup_focus ();
		protected override GLib.Value? val_func (int row, int column, GLib.Object o);
		public Noise.PopupListView popup_list_view { get; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class InfoPanel : Gtk.EventBox {
		public InfoPanel ();
		public int add_view (Gtk.Widget view);
		public bool can_show_up { get; }
		public Noise.Media current_media { get; }
		public signal void to_update ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class InstallGstreamerPluginsDialog : Gtk.Dialog {
		public InstallGstreamerPluginsDialog (Gst.Message message);
		public void install_plugin_clicked ();
		public void install_plugins_finished (Gst.PbUtils.InstallPluginsReturn result);
	}
	[CCode (cheader_filename = "noise.h")]
	public class LibraryWindow : Noise.LibraryWindowInterface, Gtk.Window {
		public Noise.InfoPanel info_panel;
		public LibraryWindow ();
		public void build_ui ();
		public override bool configure_event (Gdk.EventConfigure event);
		public void connect_to_sourcelist_signals ();
		public void create_new_playlist (Noise.Library? library = @this.library_manager);
		public virtual void current_position_update (int64 position);
		public override bool delete_event (Gdk.EventAny event);
		public void doAlert (string title, string message);
		public virtual void dragReceived (Gdk.DragContext context, int x, int y, Gtk.SelectionData data, uint info, uint timestamp);
		public void editPreferencesClick ();
		public virtual void end_of_stream ();
		public virtual void error_occured ();
		public virtual void fileImportMusicClick ();
		public Noise.TreeViewSetup? get_treeviewsetup_from_playlist (Noise.Playlist p);
		public override bool key_press_event (Gdk.EventKey event);
		public void media_not_found (int id);
		public void media_played (Noise.Media m);
		public static bool minimize_on_close ();
		public virtual void play_media (bool inhibit_notifications = false);
		public virtual void play_next_media (bool inhibit_notifications = false);
		public virtual void play_previous_media (bool inhibit_notifications = false);
		public virtual void playback_paused ();
		public virtual void playback_started ();
		public virtual void playback_stopped (int was_playing);
		public void remove_view_and_update (int index);
		public void searchFieldActivate ();
		public void setMusicFolder (string folder);
		public void set_active_view (Noise.ViewWrapper view);
		public void show_notification (string primary_text, string secondary_text, Gdk.Pixbuf? pixbuf = null, int urgency = -1);
		public async void show_notification_from_media_async (Noise.Media media);
		public void show_playlist_view (Noise.Playlist p);
		public void show_smart_playlist_dialog (Noise.SmartPlaylist? smartplaylist = null);
		public void update_badge_on_playlist_update (Noise.Playlist p, Noise.SourceListEntry entry);
		public bool dragging_from_music { get; set; }
		public bool initialization_finished { get; private set; }
		public Noise.LocalLibrary library_manager { get; }
		public Gtk.Paned main_hpaned { get; private set; }
		public bool newly_created_playlist { get; set; }
		public Gtk.SearchEntry searchField { get; private set; }
		public Noise.SourceListView source_list_view { get; private set; }
		public Noise.Widgets.StatusBar statusbar { get; private set; }
		public Noise.TopDisplay topDisplay { get; private set; }
		public Noise.Widgets.ViewSelector viewSelector { get; private set; }
		public Noise.ViewContainer view_container { get; private set; }
		public signal void close_subwindows ();
		public signal void playPauseChanged ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class ListView : Noise.ContentView, Gtk.Box {
		public ListView (Noise.ViewWrapper view_wrapper, Noise.TreeViewSetup tvs, bool add_browser = false, bool? is_queue = false, bool? read_only = false);
		public bool get_is_current_list ();
		public int get_relative_id ();
		public void set_as_current_list (int media_id, bool is_initial = false);
		public Noise.ColumnBrowser column_browser { get; private set; }
		public bool column_browser_enabled { get; private set; }
		public bool has_column_browser { get; }
		public Noise.MusicListView list_view { get; private set; }
		public uint n_media { get; }
		public signal void reordered ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class LocalLibrary : Noise.Library {
		public Gee.TreeSet<Noise.Media> _medias;
		public Gee.TreeSet<Noise.StaticPlaylist> _playlists;
		public Gee.TreeSet<Noise.Media> _searched_medias;
		public Gee.TreeSet<Noise.SmartPlaylist> _smart_playlists;
		public Noise.DataBaseUpdater dbu;
		public Noise.FileOperator fo;
		public Noise.StaticPlaylist p_music;
		public int playlists_rowid;
		public Noise.GStreamerTagger tagger;
		public LocalLibrary ();
		public override void add_files_to_library (Gee.Collection<string> files);
		public void add_folder_to_library (Gee.Collection<string> folders);
		public override void add_media (Noise.Media s);
		public override void add_medias (Gee.Collection<Noise.Media> new_media);
		public override void add_playlist (Noise.StaticPlaylist p);
		public override void add_smart_playlist (Noise.SmartPlaylist p);
		public Gee.TreeSet<Noise.Media> answer_to_device_sync (Noise.Device device);
		public void clear_medias ();
		public bool doProgressNotificationWithTimeout ();
		public override bool doing_file_operations ();
		public override Noise.Media? find_media (Noise.Media to_find);
		public override void finish_file_operations ();
		public override Gee.Collection<Noise.Media> get_medias ();
		public override Gee.Collection<Noise.StaticPlaylist> get_playlists ();
		public override Gee.Collection<Noise.Media> get_search_result ();
		public override Gee.Collection<Noise.SmartPlaylist> get_smart_playlists ();
		public override void initialize_library ();
		public override Noise.Media? media_from_file (GLib.File file);
		public override Noise.Media? media_from_id (int id);
		public override Noise.Media? media_from_uri (string uri);
		public override Gee.Collection<Noise.Media> medias_from_ids (Gee.Collection<int> ids);
		public override Gee.Collection<Noise.Media> medias_from_uris (Gee.Collection<string> uris);
		public void play_files (GLib.File[] files);
		public override Noise.StaticPlaylist? playlist_from_id (int id);
		public override Noise.StaticPlaylist? playlist_from_name (string name);
		public void playlist_updated (Noise.StaticPlaylist p, string? old_name = null);
		public void remove_all_static_playlists ();
		public override void remove_media (Noise.Media s, bool trash);
		public override void remove_medias (Gee.Collection<Noise.Media> to_remove, bool trash);
		public override void remove_playlist (int id);
		public override void remove_smart_playlist (int id);
		public void rescan_music_folder ();
		public async void save_smart_playlists ();
		public override void search_medias (string search);
		public async void set_music_folder (string folder);
		public override Noise.SmartPlaylist? smart_playlist_from_id (int id);
		public override Noise.SmartPlaylist? smart_playlist_from_name (string name);
		public void smart_playlist_updated (Noise.SmartPlaylist p, string? old_name = null);
		public override bool start_file_operations (string? message);
		public override bool support_playlists ();
		public override bool support_smart_playlists ();
		public override void update_media (Noise.Media s, bool updateMeta, bool record_time);
		public override void update_medias (Gee.Collection<Noise.Media> updates, bool updateMeta, bool record_time);
		public Noise.LibraryWindow lw { get; }
		public bool main_directory_set { get; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class LocalMedia : Noise.Media {
		public uint? _bitrate;
		public uint? _date_added;
		public uint? _last_modified;
		public uint? _last_played;
		public uint? _length;
		public uint? _play_count;
		public uint? _samplerate;
		public uint? _skip_count;
		public uint? _year;
		public LocalMedia (int rowid);
		public override string album { get; set; }
		public override string album_artist { get; set; }
		public override uint album_count { get; set; }
		public override Noise.Album album_info { get; set; }
		public override uint album_number { get; set; }
		public override string artist { get; set; }
		public override uint bitrate { get; set; }
		public override string comment { get; set; }
		public override string composer { get; set; }
		public override uint date_added { get; set; }
		public override uint64 file_size { get; set; }
		public override string genre { get; set; }
		public override string grouping { get; set; }
		public override uint last_modified { get; set; }
		public override uint last_played { get; set; }
		public override uint length { get; set; }
		public override string lyrics { get; set; }
		public override uint play_count { get; set; }
		public override uint rating { get; set; }
		public override int resume_pos { get; set; }
		public override uint samplerate { get; set; }
		public override uint skip_count { get; set; }
		public override string title { get; set; }
		public override uint track { get; set; }
		public override uint track_count { get; set; }
		public override uint year { get; set; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class LyricFetcher : GLib.Object {
		public LyricFetcher ();
		public async string fetch_lyrics_async (Noise.Media m);
	}
	[CCode (cheader_filename = "noise.h")]
	public abstract class MediaArtCache<T> {
		public MediaArtCache (string folder_name);
		public async void cache_image_async (T object, Gdk.Pixbuf image);
		public async void cache_image_from_file_async (T object, GLib.File image_file, GLib.Cancellable? c = null);
		public Gdk.Pixbuf? decache_image (T object);
		protected abstract Gdk.Pixbuf? filter_func (Gdk.Pixbuf pix);
		public GLib.File? get_cached_image_file (T object);
		public virtual Gdk.Pixbuf? get_image (T object);
		protected async Gdk.Pixbuf? get_image_async (T object, bool lookup_file);
		[Deprecated (replacement = "Noise.MediaArtCache.get_image", since = "1.1")]
		protected Gdk.Pixbuf? get_image_from_key (string key);
		protected abstract string get_key (T object);
		public virtual async Gdk.Pixbuf? get_original_image_async (T object, int width, int height, bool preserve_aspect_ratio, GLib.Cancellable? cancellable = null);
		public bool has_image (T object);
		protected void queue_notify ();
		public signal void changed ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class MediaEditor : Gtk.Dialog {
		public MediaEditor (Gee.Collection<int> allMedias, Gee.Collection<int> medias, Noise.Library library);
		public void change_media (Gee.LinkedList<int> newMedias);
		public Gtk.Box createBasicContent ();
		public Gtk.Box createLyricsContent ();
		public async void fetchLyricsClicked ();
		public void lyricsFetched (Noise.Media m);
		public void nextClicked ();
		public void previousClicked ();
		public virtual void saveClicked ();
		public void save_medias ();
		public signal void medias_saved (Gee.Collection<int> medias);
	}
	[CCode (cheader_filename = "noise.h")]
	public class MediaKeyListener : GLib.Object {
		public MediaKeyListener ();
		public void init ();
		public void releaseMediaKeys ();
		public static Noise.MediaKeyListener instance { get; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class MusicColumnBrowser : Noise.ColumnBrowser {
		public MusicColumnBrowser (Noise.ViewWrapper view_wrapper);
	}
	[CCode (cheader_filename = "noise.h")]
	public class MusicListView : Noise.GenericList {
		public MusicListView (Noise.ViewWrapper view_wrapper, Noise.TreeViewSetup tvs, bool? is_queue = false, bool? read_only = false);
		protected override void add_column (Gtk.TreeViewColumn tvc, Noise.ListColumn type);
		public void build_ui ();
		public override bool button_press_event (Gdk.EventButton event);
		protected virtual void mediaEditorSaved (Gee.Collection<int> medias);
		protected void mediaFileBrowseClicked ();
		protected virtual void mediaMenuNewPlaylistClicked ();
		protected virtual void mediaMenuQueueClicked ();
		protected void mediaRateMediaClicked ();
		protected override void mediaRemoveClicked ();
		protected virtual void onDragDataGet (Gdk.DragContext context, Gtk.SelectionData selection_data, uint info, uint time_);
		public void popup_media_menu (Gee.Collection<Noise.Media> selection);
		protected override void updateTreeViewSetup ();
		public override void update_sensitivities ();
		protected int view_compare_func (int column, Gtk.SortType dir, Noise.Media media_a, Noise.Media media_b, int a_pos, int b_pos);
		protected GLib.Value? view_value_func (int row, int column, GLib.Object o);
	}
	[CCode (cheader_filename = "noise.h")]
	public class MusicViewWrapper : Noise.ViewWrapper {
		public MusicViewWrapper (Noise.TreeViewSetup? tvs = null, Noise.Library library, Noise.TopDisplay topDisplay);
	}
	[CCode (cheader_filename = "noise.h")]
	public class NotImportedWindow : Gtk.Dialog {
		public NotImportedWindow (Gee.Collection<string> files, string music);
		public bool deleteSelectedItems (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public virtual void ignoreClick ();
		public virtual void moveToTrashClick ();
		public bool selectAll (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public bool unselectAll (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public bool updateMoveToTrashSensetivity (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
	}
	[CCode (cheader_filename = "noise.h")]
	public class PlayListCategory : Granite.Widgets.SourceList.ExpandableItem, Granite.Widgets.SourceListSortable {
		public PlayListCategory (string name);
		public override Gtk.Menu? get_context_menu ();
		public signal void playlist_import_clicked ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class PlaybackManager : GLib.Object, Noise.Player {
		public Noise.Streamer file_player;
		public Noise.StaticPlaylist history_playlist;
		public int next_gapless_id;
		public Noise.Playback player;
		public Noise.StaticPlaylist queue_playlist;
		public PlaybackManager ();
		public void addToCurrent (Noise.Media m);
		public void change_gains_thread ();
		public void clearCurrent ();
		public Noise.Media? getNext (bool play);
		public Noise.Media? getPrevious (bool play);
		public Gee.Collection<Noise.Media> get_current_media_list ();
		public bool is_shuffled ();
		public Noise.Media mediaFromCurrentIndex (int index_in_current);
		public void pause_playback ();
		public Noise.Media peek_queue ();
		public void playMedia (Noise.Media m, bool use_resume_pos);
		public bool playing_queued_song ();
		public Noise.Media poll_queue ();
		public void queue_media (Gee.Collection<Noise.Media> to_queue);
		public void queue_media_by_id (Gee.Collection<int> ids);
		public void reset_already_played ();
		public void reshuffle ();
		public void set_repeat_mode (Noise.Settings.Repeat mode);
		public void set_shuffle_mode (Noise.Settings.Shuffle mode);
		public void start_playback ();
		public void stop_playback ();
		public void unqueue_media (Gee.Collection<Noise.Media> to_unqueue);
		public void unqueue_media_by_id (Gee.Collection<int> ids);
		public int current_index { get; set; }
		public Noise.Media current_media { get; private set; }
		public Noise.Library library { get; }
		public bool playing { get; private set; }
		public double volume { get; set; }
		public signal void changing_player ();
		public signal void current_cleared ();
		public signal void media_played (Noise.Media played_media);
		public signal void media_queued (Gee.Collection<Noise.Media> queued);
		public signal void playback_paused ();
		public signal void playback_started ();
		public signal void playback_stopped (int was_playing);
		public signal void player_changed ();
		public signal void queue_cleared ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class PlaylistViewWrapper : Noise.ViewWrapper {
		public Noise.TreeViewSetup tvs;
		public PlaylistViewWrapper (int playlist_id, Noise.ViewWrapper.Hint hint, Noise.TreeViewSetup? tvs = null, Noise.Library library);
		protected override void set_no_media_alert ();
		public int playlist_id { get; set construct; }
		public signal void button_clicked (int playlist_id);
	}
	[CCode (cheader_filename = "noise.h")]
	public class PopupListView : Gtk.Dialog {
		public const int MIN_SIZE;
		public PopupListView (Noise.GridView grid_view);
		public override void get_preferred_height_for_width (int width, out int minimum_height, out int natural_height);
		public override Gtk.SizeRequestMode get_request_mode ();
		public void reset ();
		public void set_album (Noise.Album album);
		public void set_parent_wrapper (Noise.ViewWrapper parent_wrapper);
		public void set_size (int size);
		public bool show_cover_context_menu (Gtk.Widget sender, Gdk.EventButton evt);
	}
	[CCode (cheader_filename = "noise.h")]
	public class PreferencesWindow : Gtk.Dialog {
		public Gtk.FileChooserButton library_filechooser;
		public const int MIN_HEIGHT;
		public const int MIN_WIDTH;
		public PreferencesWindow ();
		public int add_page (Noise.SettingsWindow.NoteBook_Page section);
		public void remove_section (int index);
	}
	[CCode (cheader_filename = "noise.h")]
	public class PresetList : Gtk.ComboBox {
		public Noise.EqualizerPreset last_selected_preset;
		public PresetList ();
		public void addAutomaticMode ();
		public void addPreset (Noise.EqualizerPreset ep);
		public void addSeparator ();
		public void buildUI ();
		public Gee.Collection<Noise.EqualizerPreset> getPresets ();
		public Noise.EqualizerPreset? getSelectedPreset ();
		public virtual void listSelectionChange ();
		public void removeCurrentPreset ();
		public void selectAutomaticPreset ();
		public void selectPreset (string? preset_name);
		public bool automatic_chosen { get; }
		public signal void automatic_preset_chosen ();
		public signal void delete_preset_chosen ();
		public signal void preset_selected (Noise.EqualizerPreset p);
	}
	[CCode (cheader_filename = "noise.h")]
	public class ReadOnlyPlaylistViewWrapper : Noise.ViewWrapper {
		public bool is_queue;
		public Noise.TreeViewSetup tvs;
		public ReadOnlyPlaylistViewWrapper (int playlist_id, Noise.TreeViewSetup? tvs = null, bool? is_queue = false, Noise.Library library);
		protected override void set_no_media_alert ();
		public void set_no_media_alert_message (string head, string body, Gtk.MessageType? type = Gtk.MessageType.INFO);
		public int playlist_id { get; set construct; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class RemoveFilesDialog : Gtk.Dialog {
		public RemoveFilesDialog (Gee.Collection<Noise.Media> to_remove, Noise.ViewWrapper.Hint media_type);
		public signal void remove_media (bool response);
	}
	[CCode (cheader_filename = "noise.h")]
	public class SetMusicFolderConfirmation : Gtk.Dialog {
		public SetMusicFolderConfirmation (string path);
		public void cancel_clicked ();
		public void ok_clicked ();
		public void savePlaylistsClicked ();
		public signal void finished (bool response);
	}
	[CCode (cheader_filename = "noise.h")]
	public class SimpleOptionChooser : Gtk.EventBox {
		public Gee.LinkedList<Gtk.Image> images;
		public Gee.LinkedList<Gtk.RadioMenuItem> items;
		public SimpleOptionChooser (bool menu_only_mode = false);
		public int appendItem (string text, Gtk.Image image, string tooltip);
		public override bool button_press_event (Gdk.EventButton event);
		public void setOption (int index, bool notify = true);
		public int current_option { get; }
		public signal void option_changed (bool by_user = false);
	}
	[CCode (cheader_filename = "noise.h")]
	public class SmartPlaylistEditor : Gtk.Dialog {
		public SmartPlaylistEditor (Noise.SmartPlaylist? sp = null, Noise.Library library);
		public virtual void add_button_click ();
		public void add_row ();
		public virtual void close_click ();
		public void load_smart_playlist ();
		public virtual void save_click ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class SmartPlaylistEditorQuery : GLib.Object {
		public Gtk.Grid grid;
		public SmartPlaylistEditorQuery (Noise.SmartQuery q);
		public virtual void field_changed (bool from_user = true);
		public Noise.SmartQuery get_query ();
		public bool is_date (Noise.SmartQuery.FieldType compared);
		public bool is_rating (Noise.SmartQuery.FieldType compared);
		public bool needs_value (Noise.SmartQuery.FieldType compared);
		public bool needs_value_2 (Noise.SmartQuery.FieldType compared);
		public virtual void remove_clicked ();
		public signal void changed ();
		public signal void removed ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class SourceListExpandableItem : Granite.Widgets.SourceList.ExpandableItem, Noise.SourceListEntry {
		public Noise.ViewWrapper.Hint hint;
		public SourceListExpandableItem (int page_number, string name, Noise.ViewWrapper.Hint hint, GLib.Icon icon, GLib.Icon? activatable_icon = null, GLib.Object? give_more_information = null);
		public override Gtk.Menu? get_context_menu ();
		public int page_number { get; set; }
		public signal void device_eject_clicked (int page_number);
		public signal void device_import_clicked (int page_number);
		public signal void device_new_playlist_clicked (int page_number);
		public signal void device_new_smartplaylist_clicked (int page_number);
		public signal void device_sync_clicked (int page_number);
	}
	[CCode (cheader_filename = "noise.h")]
	public class SourceListItem : Granite.Widgets.SourceList.Item, Noise.SourceListEntry, Granite.Widgets.SourceListDragDest {
		public Noise.ViewWrapper.Hint hint;
		public SourceListItem (int page_number, string name, Noise.ViewWrapper.Hint hint, GLib.Icon icon, GLib.Icon? activatable_icon = null);
		public override Gtk.Menu? get_context_menu ();
		public int page_number { get; set; }
		public signal void playlist_edit_clicked (int page_number);
		public signal void playlist_export_clicked (int page_number);
		public signal void playlist_media_added (int page_number, string[] media);
		public signal void playlist_remove_clicked (int page_number);
		public signal void playlist_rename_clicked (int page_number);
		public signal void playlist_save_clicked (int page_number);
	}
	[CCode (cheader_filename = "noise.h")]
	public class SourceListRoot : Granite.Widgets.SourceList.ExpandableItem, Granite.Widgets.SourceListSortable {
		public SourceListRoot ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class SourceListView : Granite.Widgets.SourceList {
		public SourceListView ();
		public Noise.SourceListEntry add_item (int page_number, string name, Noise.ViewWrapper.Hint hint, GLib.Icon icon, GLib.Icon? activatable_icon = null, Noise.SourceListExpandableItem? into_expandable = null, GLib.Object? give_more_information = null);
		public void change_device_name (int page_number, string new_name);
		public void change_playlist_category_visibility (bool visible);
		public void change_playlist_name (int page_number, string new_name);
		public void enumerate_children_items (Noise.SourceListExpandableItem exp_item, ref Gee.TreeSet<Noise.SourceListItem> pages);
		public void enumerate_children_pages (Noise.SourceListExpandableItem exp_item, ref Gee.TreeSet<int> pages);
		public int get_device_from_item (Noise.SourceListExpandableItem item);
		public override void item_selected (Granite.Widgets.SourceList.Item? item);
		public Gee.Collection<int> remove_device (int page_number);
		public void remove_playlist (int page_number);
		public signal void activated ();
		public signal void device_eject_clicked (int page_number);
		public signal void device_import_clicked (int page_number);
		public signal void device_new_playlist_clicked (int page_number);
		public signal void device_new_smartplaylist_clicked (int page_number);
		public signal void device_sync_clicked (int page_number);
		public signal void edited (int page_number, string new_name);
		public signal void item_action_activated (int page_number);
		public signal void playlist_edit_clicked (int page_number);
		public signal void playlist_export_clicked (int page_number);
		public signal void playlist_import_clicked ();
		public signal void playlist_media_added (int page_number, string[] uris);
		public signal void playlist_remove_clicked (int page_number);
		public signal void playlist_rename_clicked (int page_number);
		public signal void playlist_save_clicked (int page_number);
		public signal void selection_changed (int page_number);
	}
	[CCode (cheader_filename = "noise.h")]
	public class StatsDisplay : Gtk.Box {
		public int last_played;
		public int plays;
		public int skips;
		public StatsDisplay (int plays, int skips, int last_played);
		public virtual void resetClicked ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class Streamer : Noise.Playback, GLib.Object {
		public Gst.Element cdda;
		public bool set_resume_pos;
		public Streamer ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class SyncWarningDialog : Gtk.Window {
		public SyncWarningDialog (Noise.Device d, Gee.Collection<Noise.Media> to_sync, Gee.Collection<Noise.Media> removed);
		public void file_operations_done ();
		public void file_operations_started ();
		public void importMediasClicked ();
		public void syncClicked ();
	}
	[CCode (cheader_filename = "noise.h")]
	public class TopDisplay : Gtk.Stack {
		public TopDisplay ();
		public virtual bool change_value (Gtk.ScrollType scroll, double val);
		public double get_current_time ();
		public override void get_preferred_width (out int minimum_width, out int natural_width);
		public double get_scale_value ();
		public virtual void player_position_update (int64 position);
		public virtual bool scale_button_press (Gdk.EventButton event);
		public virtual bool scale_button_release (Gdk.EventButton event);
		public void set_current_time (double val);
		public void set_list_view (Noise.MusicListView list_view);
		public void set_max_time (double max);
		public void set_media (Noise.Media current_media);
		public void set_progress_value (double progress);
		public virtual void value_changed ();
		public signal void scale_value_changed (Gtk.ScrollType scroll, double val);
	}
	[CCode (cheader_filename = "noise.h")]
	public class TransferFromDeviceDialog : Gtk.Window {
		public TransferFromDeviceDialog (Noise.Device d, Gee.Collection<Noise.Media> _medias);
		public virtual void cancelClick ();
		public bool createTransferList (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public static int mediaCompareFunc (Noise.Media a, Noise.Media b);
		public bool selectAll (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public virtual void transferAllToggled ();
		public virtual void transferClick ();
		public bool unselectAll (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public bool updateTransferSensetivity (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
		public static Gtk.Alignment wrap_alignment (Gtk.Widget widget, int top, int right, int bottom, int left);
	}
	[CCode (cheader_filename = "noise.h")]
	public class TreeViewSetup : GLib.Object {
		public TreeViewSetup (int sort_col, Gtk.SortType sort_dir, Noise.ViewWrapper.Hint hint);
		public string columns_to_string ();
		public Gtk.TreeViewColumn create_column (Noise.ListColumn type, bool visible = true);
		public static Noise.ListColumn? get_column_type (Gtk.TreeViewColumn column);
		public Gee.Collection<Gtk.TreeViewColumn> get_columns ();
		public Noise.ViewWrapper.Hint get_hint ();
		public bool import_columns (string cols);
		public void set_columns (Gee.Collection<Gtk.TreeViewColumn> cols);
		public void set_hint (Noise.ViewWrapper.Hint hint);
		public void set_sort_direction_from_string (string dir);
		public string sort_direction_to_string ();
		public int sort_column_id { get; set; }
		public Gtk.SortType sort_direction { get; set; }
	}
	[CCode (cheader_filename = "noise.h")]
	public class ViewContainer : Gtk.Stack {
		public ViewContainer ();
		public int add_view (Gtk.Widget view);
		public int get_current_index ();
		public Gtk.Widget? get_current_view ();
		public int get_n_pages ();
		public Gtk.Widget? get_nth_page (int index);
		public Gtk.Widget? get_view (int index);
		public int get_view_index (Gtk.Widget view);
		public bool has_view (Gtk.Widget view);
		public bool has_view_index (int index);
		public void remove_view (Gtk.Widget view);
		public bool set_current_view (Gtk.Widget view);
		public bool set_current_view_from_index (int index);
	}
	[CCode (cheader_filename = "noise.h")]
	public class ViewTextOverlay : Gtk.Overlay {
		public ViewTextOverlay ();
		public string message { get; set; }
		public bool message_visible { get; set; }
	}
	[CCode (cheader_filename = "noise.h")]
	public abstract class ViewWrapper : Gtk.Grid {
		public enum Hint {
			NONE,
			MUSIC,
			PLAYLIST,
			READ_ONLY_PLAYLIST,
			SMART_PLAYLIST,
			CDROM,
			DEVICE,
			DEVICE_AUDIO,
			DEVICE_PODCAST,
			DEVICE_AUDIOBOOK,
			NETWORK_DEVICE,
			ALBUM_LIST
		}
		public enum ViewType {
			GRID,
			LIST,
			ALERT,
			WELCOME,
			NONE
		}
		protected const int VIEW_CONSTRUCT_PRIORITY;
		public ViewWrapper (Noise.ViewWrapper.Hint hint, Noise.Library library);
		public async void add_media_async (Gee.Collection<Noise.Media> to_add);
		protected virtual bool check_have_media ();
		public void clear_filters ();
		public Gee.Collection<Noise.Media> get_media_list ();
		protected string get_statusbar_text ();
		protected void pack_views ();
		public void play_first_media (bool? force = false);
		public async void remove_media_async (Gee.Collection<Noise.Media> to_remove);
		protected virtual void select_proper_content_view ();
		protected void set_active_view (Noise.ViewWrapper.ViewType type, out bool successful = null);
		public void set_as_current_view ();
		public async void set_media_async (Gee.Collection<Noise.Media> new_media);
		protected virtual void set_no_media_alert ();
		protected void update_library_window_widgets ();
		public async void update_media_async (Gee.Collection<Noise.Media> to_update);
		public void update_statusbar_info ();
		protected void update_visible_media ();
		public void view_selector_changed ();
		protected Noise.ViewWrapper.ViewType current_view { get; }
		protected Granite.Widgets.EmbeddedAlert embedded_alert { get; set; }
		public Noise.GridView grid_view { get; protected set; }
		public bool has_embedded_alert { get; }
		public bool has_grid_view { get; }
		public bool has_list_view { get; }
		public bool has_welcome_screen { get; }
		public Noise.ViewWrapper.Hint hint { get; protected set; }
		public int index { get; }
		public bool is_current_wrapper { get; }
		public Noise.Library library { get; protected set; }
		public Noise.ListView list_view { get; protected set; }
		public int media_count { get; }
		public int relative_id { get; protected set; }
		protected Granite.Widgets.Welcome welcome_screen { get; set; }
	}
	[CCode (cheader_filename = "noise.h")]
	public interface ContentView : Gtk.Widget {
		public const string FULL_STATUSBAR_FORMAT;
		public abstract void add_media (Gee.Collection<Noise.Media> to_add);
		public abstract Noise.ViewWrapper.Hint get_hint ();
		public abstract Gee.Collection<Noise.Media> get_media ();
		public abstract string get_statusbar_text ();
		public abstract Gee.Collection<Noise.Media> get_visible_media ();
		public abstract void refilter (string? search);
		public abstract void remove_media (Gee.Collection<Noise.Media> to_remove);
		public abstract void set_media (Gee.Collection<Noise.Media> new_media);
		public abstract void update_media (Gee.Collection<Noise.Media> to_update);
		public signal void import_requested (Gee.Collection<Noise.Media> to_import);
	}
	[CCode (cheader_filename = "noise.h")]
	public interface SourceListEntry : Granite.Widgets.SourceList.Item {
	}
	[CCode (cheader_filename = "noise.h")]
	public enum ListColumn {
		ICON,
		NUMBER,
		TRACK,
		TITLE,
		LENGTH,
		ARTIST,
		ALBUM,
		ALBUM_ARTIST,
		COMPOSER,
		GENRE,
		YEAR,
		GROUPING,
		BITRATE,
		RATING,
		PLAY_COUNT,
		SKIP_COUNT,
		DATE_ADDED,
		LAST_PLAYED,
		BPM,
		FILE_LOCATION,
		FILE_SIZE,
		N_COLUMNS;
		public string to_string ();
		public GLib.Type get_data_type ();
		public GLib.Value? get_value_for_media (Noise.Media m, int media_row_index = -1);
		public static Gee.Collection<Noise.ListColumn> get_all ();
	}
}
namespace Granite {
	namespace Widgets {
		[CCode (cheader_filename = "noise.h")]
		public class CellRendererRating : Gtk.CellRendererPixbuf {
			public CellRendererRating (Gtk.IconSize icon_size = Gtk.IconSize.MENU);
			public override bool activate (Gdk.Event event, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
			public override void render (Cairo.Context ctx, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
			public int n_stars { get; set; }
			public uint rating { get; set; }
			public int star_spacing { get; set; }
			public signal void rating_changed (int new_rating, Gtk.Widget widget, string path);
		}
		[CCode (cheader_filename = "noise.h")]
		public class EmbeddedAlert : Gtk.EventBox {
			public EmbeddedAlert ();
			public override void get_preferred_width (out int minimum_width, out int natural_width);
			public void set_alert (string primary_text, string secondary_text, Gtk.Action[]? actions = null, bool show_icon = true, Gtk.MessageType type = Gtk.MessageType.WARNING);
			public Gtk.Action[]? actions { get; set; }
			public bool buttons_visible { get; set; }
			public Gtk.MessageType message_type { get; set; }
			public string primary_text { get; set; }
			public string secondary_text { get; set; }
			public bool show_icon { get; set; }
			public bool working { get; set; }
		}
		[CCode (cheader_filename = "noise.h")]
		public class ExpanderRenderer : Gtk.CellRenderer {
			public static int EXPANDER_SIZE;
			public bool expanded;
			public ExpanderRenderer ();
			public override void get_size (Gtk.Widget widget, Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
			public override void render (Cairo.Context context, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		}
		[CCode (cheader_filename = "noise.h")]
		public class Rating : Gtk.EventBox {
			public class Renderer : GLib.Object {
				public Renderer (Gtk.IconSize icon_size, bool symbolic, Gtk.StyleContext? context);
				public int get_new_rating (double x);
				public Gdk.Pixbuf canvas { get; private set; }
				public bool delayed_render_mode { get; set; }
				public int height { get; private set; }
				public Gtk.IconSize icon_size { get; set; }
				public int item_height { get; private set; }
				public int item_width { get; private set; }
				public int n_stars { get; set; }
				public uint rating { get; set; }
				public double rating_offset { get; set; }
				public int star_spacing { get; set; }
				public Gtk.StyleContext? style_context { get; set; }
				public bool symbolic { get; set; }
				public int width { get; private set; }
				public virtual signal void render ();
			}
			public Rating (bool centered, Gtk.IconSize size, bool symbolic = false);
			public override bool button_press_event (Gdk.EventButton event);
			public override bool draw (Cairo.Context context);
			public override bool leave_notify_event (Gdk.EventCrossing ev);
			public override bool motion_notify_event (Gdk.EventMotion event);
			public bool centered { get; set; }
			public Gtk.IconSize icon_size { get; set; }
			public int item_width { get; }
			public int n_stars { get; set; }
			public int rating { get; set; }
			public double rating_offset { get; set; }
			public int star_spacing { get; set; }
			public bool symbolic { get; set; }
			public signal void rating_changed (int new_rating);
		}
		[CCode (cheader_filename = "noise.h")]
		public class RatingMenuItem : Gtk.MenuItem {
			public RatingMenuItem ();
			public override bool button_press_event (Gdk.EventButton ev);
			public override bool leave_notify_event (Gdk.EventCrossing ev);
			public override bool motion_notify_event (Gdk.EventMotion ev);
			public Granite.Widgets.Rating rating { get; private set; }
			public int rating_value { get; set; }
		}
		[CCode (cheader_filename = "noise.h")]
		public class SideBar : Gtk.TreeView {
			public bool autoExpanded;
			public Gtk.TreeModelFilter filter;
			public Gtk.TreeStore tree;
			public SideBar ();
			public Gtk.TreeIter addItem (Gtk.TreeIter? parent, GLib.Object? o, Gtk.Widget? w, Gdk.Pixbuf? pixbuf, string text, Gdk.Pixbuf? clickable);
			public void clickableCellDataFunc (Gtk.CellLayout layout, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter);
			public Gtk.TreeIter? convertToChild (Gtk.TreeIter? filt);
			public Gtk.TreeIter? convertToFilter (Gtk.TreeIter? child);
			public bool expandItem (Gtk.TreeIter iter, bool expanded);
			public void expanderCellDataFunc (Gtk.CellLayout layout, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter);
			public GLib.Object? getObject (Gtk.TreeIter iter);
			public Gtk.TreeIter? getSelectedIter ();
			public GLib.Object? getSelectedObject ();
			public Gtk.Widget? getSelectedWidget ();
			public Gtk.Widget? getWidget (Gtk.TreeIter iter);
			public bool item_expanded (Gtk.TreeIter? iter);
			public void pixCellDataFunc (Gtk.CellLayout layout, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter);
			public bool removeItem (Gtk.TreeIter iter);
			public void secondarySpacerDataFunc (Gtk.CellLayout layout, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter);
			public void selectionChange ();
			public void setName (Gtk.TreeIter it, string name);
			public bool setNameFromObject (Gtk.TreeIter parent, GLib.Object o, string name);
			public void setSelectedIter (Gtk.TreeIter iter);
			public void setVisibility (Gtk.TreeIter it, bool val);
			public void spacerDataFunc (Gtk.CellLayout layout, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter);
			public void textCellDataFunc (Gtk.CellLayout layout, Gtk.CellRenderer renderer, Gtk.TreeModel model, Gtk.TreeIter iter);
			public signal void clickable_clicked (Gtk.TreeIter iter);
			public signal void true_selection_change (Gtk.TreeIter selected);
		}
		[CCode (cheader_filename = "noise.h")]
		public enum SideBarColumn {
			COLUMN_OBJECT,
			COLUMN_WIDGET,
			COLUMN_VISIBLE,
			COLUMN_PIXBUF,
			COLUMN_TEXT,
			COLUMN_CLICKABLE
		}
	}
}
[CCode (cheader_filename = "noise.h")]
public class SpaceWidget : Gtk.ScrolledWindow {
	public enum ItemColor {
		BLUE,
		ORANGE,
		GREEN,
		RED,
		PURPLE,
		GREY
	}
	public static Gtk.CssProvider style_provider;
	public SpaceWidget (uint64 size);
	public int add_item (string name, uint64 size, SpaceWidget.ItemColor color);
	public void set_size (uint64 size);
	public void set_sync_button_sensitive (bool val);
	public override void size_allocate (Gtk.Allocation allocation);
	public void update_item_size (int index, uint64 size);
	public signal void sync_clicked ();
}
[CCode (cheader_filename = "noise.h")]
[DBus (name = "org.gnome.SettingsDaemon.MediaKeys")]
public interface GnomeMediaKeys : GLib.Object {
	public abstract void GrabMediaPlayerKeys (string application, uint32 time) throws GLib.IOError;
	public abstract void ReleaseMediaPlayerKeys (string application) throws GLib.IOError;
	public signal void MediaPlayerKeyPressed (string application, string key);
}
