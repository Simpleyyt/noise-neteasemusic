/* noise.h generated by valac 0.28.1, the Vala compiler, do not modify */


#ifndef __NOISE_H__
#define __NOISE_H__

#include <glib.h>
#include <granite.h>
#include <stdlib.h>
#include <string.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <noise-core.h>
#include <gdk/gdk.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gio/gio.h>
#include <gee.h>
#include <float.h>
#include <math.h>
#include <SQLHeavy.h>
#include <gst/gst.h>
#include <gst/pbutils/pbutils.h>

G_BEGIN_DECLS


#define NOISE_TYPE_APP (noise_app_get_type ())
#define NOISE_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_APP, NoiseApp))
#define NOISE_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_APP, NoiseAppClass))
#define NOISE_IS_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_APP))
#define NOISE_IS_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_APP))
#define NOISE_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_APP, NoiseAppClass))

typedef struct _NoiseApp NoiseApp;
typedef struct _NoiseAppClass NoiseAppClass;
typedef struct _NoiseAppPrivate NoiseAppPrivate;

#define NOISE_TYPE_PLAYBACK_MANAGER (noise_playback_manager_get_type ())
#define NOISE_PLAYBACK_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_PLAYBACK_MANAGER, NoisePlaybackManager))
#define NOISE_PLAYBACK_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_PLAYBACK_MANAGER, NoisePlaybackManagerClass))
#define NOISE_IS_PLAYBACK_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_PLAYBACK_MANAGER))
#define NOISE_IS_PLAYBACK_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_PLAYBACK_MANAGER))
#define NOISE_PLAYBACK_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_PLAYBACK_MANAGER, NoisePlaybackManagerClass))

typedef struct _NoisePlaybackManager NoisePlaybackManager;
typedef struct _NoisePlaybackManagerClass NoisePlaybackManagerClass;

#define NOISE_TYPE_LIBRARY_WINDOW (noise_library_window_get_type ())
#define NOISE_LIBRARY_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_LIBRARY_WINDOW, NoiseLibraryWindow))
#define NOISE_LIBRARY_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_LIBRARY_WINDOW, NoiseLibraryWindowClass))
#define NOISE_IS_LIBRARY_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_LIBRARY_WINDOW))
#define NOISE_IS_LIBRARY_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_LIBRARY_WINDOW))
#define NOISE_LIBRARY_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_LIBRARY_WINDOW, NoiseLibraryWindowClass))

typedef struct _NoiseLibraryWindow NoiseLibraryWindow;
typedef struct _NoiseLibraryWindowClass NoiseLibraryWindowClass;
typedef struct _NoiseLibraryWindowPrivate NoiseLibraryWindowPrivate;

#define NOISE_TYPE_INFO_PANEL (noise_info_panel_get_type ())
#define NOISE_INFO_PANEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_INFO_PANEL, NoiseInfoPanel))
#define NOISE_INFO_PANEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_INFO_PANEL, NoiseInfoPanelClass))
#define NOISE_IS_INFO_PANEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_INFO_PANEL))
#define NOISE_IS_INFO_PANEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_INFO_PANEL))
#define NOISE_INFO_PANEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_INFO_PANEL, NoiseInfoPanelClass))

typedef struct _NoiseInfoPanel NoiseInfoPanel;
typedef struct _NoiseInfoPanelClass NoiseInfoPanelClass;

#define NOISE_TYPE_VIEW_WRAPPER (noise_view_wrapper_get_type ())
#define NOISE_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_VIEW_WRAPPER, NoiseViewWrapper))
#define NOISE_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_VIEW_WRAPPER, NoiseViewWrapperClass))
#define NOISE_IS_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_VIEW_WRAPPER))
#define NOISE_IS_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_VIEW_WRAPPER))
#define NOISE_VIEW_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_VIEW_WRAPPER, NoiseViewWrapperClass))

typedef struct _NoiseViewWrapper NoiseViewWrapper;
typedef struct _NoiseViewWrapperClass NoiseViewWrapperClass;

#define NOISE_TYPE_SOURCE_LIST_ENTRY (noise_source_list_entry_get_type ())
#define NOISE_SOURCE_LIST_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SOURCE_LIST_ENTRY, NoiseSourceListEntry))
#define NOISE_IS_SOURCE_LIST_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SOURCE_LIST_ENTRY))
#define NOISE_SOURCE_LIST_ENTRY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), NOISE_TYPE_SOURCE_LIST_ENTRY, NoiseSourceListEntryIface))

typedef struct _NoiseSourceListEntry NoiseSourceListEntry;
typedef struct _NoiseSourceListEntryIface NoiseSourceListEntryIface;

#define NOISE_TYPE_TREE_VIEW_SETUP (noise_tree_view_setup_get_type ())
#define NOISE_TREE_VIEW_SETUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_TREE_VIEW_SETUP, NoiseTreeViewSetup))
#define NOISE_TREE_VIEW_SETUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_TREE_VIEW_SETUP, NoiseTreeViewSetupClass))
#define NOISE_IS_TREE_VIEW_SETUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_TREE_VIEW_SETUP))
#define NOISE_IS_TREE_VIEW_SETUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_TREE_VIEW_SETUP))
#define NOISE_TREE_VIEW_SETUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_TREE_VIEW_SETUP, NoiseTreeViewSetupClass))

typedef struct _NoiseTreeViewSetup NoiseTreeViewSetup;
typedef struct _NoiseTreeViewSetupClass NoiseTreeViewSetupClass;

#define NOISE_TYPE_LOCAL_LIBRARY (noise_local_library_get_type ())
#define NOISE_LOCAL_LIBRARY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_LOCAL_LIBRARY, NoiseLocalLibrary))
#define NOISE_LOCAL_LIBRARY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_LOCAL_LIBRARY, NoiseLocalLibraryClass))
#define NOISE_IS_LOCAL_LIBRARY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_LOCAL_LIBRARY))
#define NOISE_IS_LOCAL_LIBRARY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_LOCAL_LIBRARY))
#define NOISE_LOCAL_LIBRARY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_LOCAL_LIBRARY, NoiseLocalLibraryClass))

typedef struct _NoiseLocalLibrary NoiseLocalLibrary;
typedef struct _NoiseLocalLibraryClass NoiseLocalLibraryClass;

#define NOISE_TYPE_SOURCE_LIST_VIEW (noise_source_list_view_get_type ())
#define NOISE_SOURCE_LIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SOURCE_LIST_VIEW, NoiseSourceListView))
#define NOISE_SOURCE_LIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SOURCE_LIST_VIEW, NoiseSourceListViewClass))
#define NOISE_IS_SOURCE_LIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SOURCE_LIST_VIEW))
#define NOISE_IS_SOURCE_LIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SOURCE_LIST_VIEW))
#define NOISE_SOURCE_LIST_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SOURCE_LIST_VIEW, NoiseSourceListViewClass))

typedef struct _NoiseSourceListView NoiseSourceListView;
typedef struct _NoiseSourceListViewClass NoiseSourceListViewClass;

#define NOISE_TYPE_VIEW_CONTAINER (noise_view_container_get_type ())
#define NOISE_VIEW_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_VIEW_CONTAINER, NoiseViewContainer))
#define NOISE_VIEW_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_VIEW_CONTAINER, NoiseViewContainerClass))
#define NOISE_IS_VIEW_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_VIEW_CONTAINER))
#define NOISE_IS_VIEW_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_VIEW_CONTAINER))
#define NOISE_VIEW_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_VIEW_CONTAINER, NoiseViewContainerClass))

typedef struct _NoiseViewContainer NoiseViewContainer;
typedef struct _NoiseViewContainerClass NoiseViewContainerClass;

#define NOISE_TYPE_TOP_DISPLAY (noise_top_display_get_type ())
#define NOISE_TOP_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_TOP_DISPLAY, NoiseTopDisplay))
#define NOISE_TOP_DISPLAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_TOP_DISPLAY, NoiseTopDisplayClass))
#define NOISE_IS_TOP_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_TOP_DISPLAY))
#define NOISE_IS_TOP_DISPLAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_TOP_DISPLAY))
#define NOISE_TOP_DISPLAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_TOP_DISPLAY, NoiseTopDisplayClass))

typedef struct _NoiseTopDisplay NoiseTopDisplay;
typedef struct _NoiseTopDisplayClass NoiseTopDisplayClass;

#define NOISE_WIDGETS_TYPE_VIEW_SELECTOR (noise_widgets_view_selector_get_type ())
#define NOISE_WIDGETS_VIEW_SELECTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_WIDGETS_TYPE_VIEW_SELECTOR, NoiseWidgetsViewSelector))
#define NOISE_WIDGETS_VIEW_SELECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_WIDGETS_TYPE_VIEW_SELECTOR, NoiseWidgetsViewSelectorClass))
#define NOISE_WIDGETS_IS_VIEW_SELECTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_WIDGETS_TYPE_VIEW_SELECTOR))
#define NOISE_WIDGETS_IS_VIEW_SELECTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_WIDGETS_TYPE_VIEW_SELECTOR))
#define NOISE_WIDGETS_VIEW_SELECTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_WIDGETS_TYPE_VIEW_SELECTOR, NoiseWidgetsViewSelectorClass))

typedef struct _NoiseWidgetsViewSelector NoiseWidgetsViewSelector;
typedef struct _NoiseWidgetsViewSelectorClass NoiseWidgetsViewSelectorClass;

#define NOISE_WIDGETS_TYPE_STATUS_BAR (noise_widgets_status_bar_get_type ())
#define NOISE_WIDGETS_STATUS_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_WIDGETS_TYPE_STATUS_BAR, NoiseWidgetsStatusBar))
#define NOISE_WIDGETS_STATUS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_WIDGETS_TYPE_STATUS_BAR, NoiseWidgetsStatusBarClass))
#define NOISE_WIDGETS_IS_STATUS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_WIDGETS_TYPE_STATUS_BAR))
#define NOISE_WIDGETS_IS_STATUS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_WIDGETS_TYPE_STATUS_BAR))
#define NOISE_WIDGETS_STATUS_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_WIDGETS_TYPE_STATUS_BAR, NoiseWidgetsStatusBarClass))

typedef struct _NoiseWidgetsStatusBar NoiseWidgetsStatusBar;
typedef struct _NoiseWidgetsStatusBarClass NoiseWidgetsStatusBarClass;
typedef struct _NoisePlaybackManagerPrivate NoisePlaybackManagerPrivate;

#define NOISE_TYPE_STREAMER (noise_streamer_get_type ())
#define NOISE_STREAMER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_STREAMER, NoiseStreamer))
#define NOISE_STREAMER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_STREAMER, NoiseStreamerClass))
#define NOISE_IS_STREAMER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_STREAMER))
#define NOISE_IS_STREAMER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_STREAMER))
#define NOISE_STREAMER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_STREAMER, NoiseStreamerClass))

typedef struct _NoiseStreamer NoiseStreamer;
typedef struct _NoiseStreamerClass NoiseStreamerClass;

#define NOISE_TYPE_FILE_OPERATOR (noise_file_operator_get_type ())
#define NOISE_FILE_OPERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_FILE_OPERATOR, NoiseFileOperator))
#define NOISE_FILE_OPERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_FILE_OPERATOR, NoiseFileOperatorClass))
#define NOISE_IS_FILE_OPERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_FILE_OPERATOR))
#define NOISE_IS_FILE_OPERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_FILE_OPERATOR))
#define NOISE_FILE_OPERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_FILE_OPERATOR, NoiseFileOperatorClass))

typedef struct _NoiseFileOperator NoiseFileOperator;
typedef struct _NoiseFileOperatorClass NoiseFileOperatorClass;
typedef struct _NoiseFileOperatorPrivate NoiseFileOperatorPrivate;

#define NOISE_TYPE_GSTREAMER_TAGGER (noise_gstreamer_tagger_get_type ())
#define NOISE_GSTREAMER_TAGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_GSTREAMER_TAGGER, NoiseGStreamerTagger))
#define NOISE_GSTREAMER_TAGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_GSTREAMER_TAGGER, NoiseGStreamerTaggerClass))
#define NOISE_IS_GSTREAMER_TAGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_GSTREAMER_TAGGER))
#define NOISE_IS_GSTREAMER_TAGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_GSTREAMER_TAGGER))
#define NOISE_GSTREAMER_TAGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_GSTREAMER_TAGGER, NoiseGStreamerTaggerClass))

typedef struct _NoiseGStreamerTagger NoiseGStreamerTagger;
typedef struct _NoiseGStreamerTaggerClass NoiseGStreamerTaggerClass;

#define NOISE_FILE_OPERATOR_TYPE_IMPORT_TYPE (noise_file_operator_import_type_get_type ())

#define NOISE_TYPE_LYRIC_FETCHER (noise_lyric_fetcher_get_type ())
#define NOISE_LYRIC_FETCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_LYRIC_FETCHER, NoiseLyricFetcher))
#define NOISE_LYRIC_FETCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_LYRIC_FETCHER, NoiseLyricFetcherClass))
#define NOISE_IS_LYRIC_FETCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_LYRIC_FETCHER))
#define NOISE_IS_LYRIC_FETCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_LYRIC_FETCHER))
#define NOISE_LYRIC_FETCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_LYRIC_FETCHER, NoiseLyricFetcherClass))

typedef struct _NoiseLyricFetcher NoiseLyricFetcher;
typedef struct _NoiseLyricFetcherClass NoiseLyricFetcherClass;
typedef struct _NoiseLyricFetcherPrivate NoiseLyricFetcherPrivate;

#define NOISE_TYPE_MEDIA_ART_CACHE (noise_media_art_cache_get_type ())
#define NOISE_MEDIA_ART_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_MEDIA_ART_CACHE, NoiseMediaArtCache))
#define NOISE_MEDIA_ART_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_MEDIA_ART_CACHE, NoiseMediaArtCacheClass))
#define NOISE_IS_MEDIA_ART_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_MEDIA_ART_CACHE))
#define NOISE_IS_MEDIA_ART_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_MEDIA_ART_CACHE))
#define NOISE_MEDIA_ART_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_MEDIA_ART_CACHE, NoiseMediaArtCacheClass))

typedef struct _NoiseMediaArtCache NoiseMediaArtCache;
typedef struct _NoiseMediaArtCacheClass NoiseMediaArtCacheClass;
typedef struct _NoiseMediaArtCachePrivate NoiseMediaArtCachePrivate;

#define NOISE_TYPE_COVERART_CACHE (noise_coverart_cache_get_type ())
#define NOISE_COVERART_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_COVERART_CACHE, NoiseCoverartCache))
#define NOISE_COVERART_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_COVERART_CACHE, NoiseCoverartCacheClass))
#define NOISE_IS_COVERART_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_COVERART_CACHE))
#define NOISE_IS_COVERART_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_COVERART_CACHE))
#define NOISE_COVERART_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_COVERART_CACHE, NoiseCoverartCacheClass))

typedef struct _NoiseCoverartCache NoiseCoverartCache;
typedef struct _NoiseCoverartCacheClass NoiseCoverartCacheClass;
typedef struct _NoiseCoverartCachePrivate NoiseCoverartCachePrivate;

#define TYPE_GNOME_MEDIA_KEYS (gnome_media_keys_get_type ())
#define GNOME_MEDIA_KEYS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GNOME_MEDIA_KEYS, GnomeMediaKeys))
#define IS_GNOME_MEDIA_KEYS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GNOME_MEDIA_KEYS))
#define GNOME_MEDIA_KEYS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_GNOME_MEDIA_KEYS, GnomeMediaKeysIface))

typedef struct _GnomeMediaKeys GnomeMediaKeys;
typedef struct _GnomeMediaKeysIface GnomeMediaKeysIface;

#define TYPE_GNOME_MEDIA_KEYS_PROXY (gnome_media_keys_proxy_get_type ())

#define NOISE_TYPE_MEDIA_KEY_LISTENER (noise_media_key_listener_get_type ())
#define NOISE_MEDIA_KEY_LISTENER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_MEDIA_KEY_LISTENER, NoiseMediaKeyListener))
#define NOISE_MEDIA_KEY_LISTENER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_MEDIA_KEY_LISTENER, NoiseMediaKeyListenerClass))
#define NOISE_IS_MEDIA_KEY_LISTENER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_MEDIA_KEY_LISTENER))
#define NOISE_IS_MEDIA_KEY_LISTENER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_MEDIA_KEY_LISTENER))
#define NOISE_MEDIA_KEY_LISTENER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_MEDIA_KEY_LISTENER, NoiseMediaKeyListenerClass))

typedef struct _NoiseMediaKeyListener NoiseMediaKeyListener;
typedef struct _NoiseMediaKeyListenerClass NoiseMediaKeyListenerClass;
typedef struct _NoiseMediaKeyListenerPrivate NoiseMediaKeyListenerPrivate;
typedef struct _NoiseLocalLibraryPrivate NoiseLocalLibraryPrivate;

#define NOISE_TYPE_DATA_BASE_UPDATER (noise_data_base_updater_get_type ())
#define NOISE_DATA_BASE_UPDATER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_DATA_BASE_UPDATER, NoiseDataBaseUpdater))
#define NOISE_DATA_BASE_UPDATER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_DATA_BASE_UPDATER, NoiseDataBaseUpdaterClass))
#define NOISE_IS_DATA_BASE_UPDATER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_DATA_BASE_UPDATER))
#define NOISE_IS_DATA_BASE_UPDATER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_DATA_BASE_UPDATER))
#define NOISE_DATA_BASE_UPDATER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_DATA_BASE_UPDATER, NoiseDataBaseUpdaterClass))

typedef struct _NoiseDataBaseUpdater NoiseDataBaseUpdater;
typedef struct _NoiseDataBaseUpdaterClass NoiseDataBaseUpdaterClass;

#define NOISE_TYPE_LOCAL_MEDIA (noise_local_media_get_type ())
#define NOISE_LOCAL_MEDIA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_LOCAL_MEDIA, NoiseLocalMedia))
#define NOISE_LOCAL_MEDIA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_LOCAL_MEDIA, NoiseLocalMediaClass))
#define NOISE_IS_LOCAL_MEDIA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_LOCAL_MEDIA))
#define NOISE_IS_LOCAL_MEDIA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_LOCAL_MEDIA))
#define NOISE_LOCAL_MEDIA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_LOCAL_MEDIA, NoiseLocalMediaClass))

typedef struct _NoiseLocalMedia NoiseLocalMedia;
typedef struct _NoiseLocalMediaClass NoiseLocalMediaClass;
typedef struct _NoiseLocalMediaPrivate NoiseLocalMediaPrivate;

#define NOISE_WIDGETS_TYPE_NAVIGATION_ARROWS (noise_widgets_navigation_arrows_get_type ())
#define NOISE_WIDGETS_NAVIGATION_ARROWS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_WIDGETS_TYPE_NAVIGATION_ARROWS, NoiseWidgetsNavigationArrows))
#define NOISE_WIDGETS_NAVIGATION_ARROWS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_WIDGETS_TYPE_NAVIGATION_ARROWS, NoiseWidgetsNavigationArrowsClass))
#define NOISE_WIDGETS_IS_NAVIGATION_ARROWS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_WIDGETS_TYPE_NAVIGATION_ARROWS))
#define NOISE_WIDGETS_IS_NAVIGATION_ARROWS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_WIDGETS_TYPE_NAVIGATION_ARROWS))
#define NOISE_WIDGETS_NAVIGATION_ARROWS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_WIDGETS_TYPE_NAVIGATION_ARROWS, NoiseWidgetsNavigationArrowsClass))

typedef struct _NoiseWidgetsNavigationArrows NoiseWidgetsNavigationArrows;
typedef struct _NoiseWidgetsNavigationArrowsClass NoiseWidgetsNavigationArrowsClass;
typedef struct _NoiseWidgetsNavigationArrowsPrivate NoiseWidgetsNavigationArrowsPrivate;
typedef struct _NoiseTopDisplayPrivate NoiseTopDisplayPrivate;

#define NOISE_TYPE_FAST_VIEW (noise_fast_view_get_type ())
#define NOISE_FAST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_FAST_VIEW, NoiseFastView))
#define NOISE_FAST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_FAST_VIEW, NoiseFastViewClass))
#define NOISE_IS_FAST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_FAST_VIEW))
#define NOISE_IS_FAST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_FAST_VIEW))
#define NOISE_FAST_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_FAST_VIEW, NoiseFastViewClass))

typedef struct _NoiseFastView NoiseFastView;
typedef struct _NoiseFastViewClass NoiseFastViewClass;

#define NOISE_TYPE_GENERIC_LIST (noise_generic_list_get_type ())
#define NOISE_GENERIC_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_GENERIC_LIST, NoiseGenericList))
#define NOISE_GENERIC_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_GENERIC_LIST, NoiseGenericListClass))
#define NOISE_IS_GENERIC_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_GENERIC_LIST))
#define NOISE_IS_GENERIC_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_GENERIC_LIST))
#define NOISE_GENERIC_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_GENERIC_LIST, NoiseGenericListClass))

typedef struct _NoiseGenericList NoiseGenericList;
typedef struct _NoiseGenericListClass NoiseGenericListClass;

#define NOISE_TYPE_MUSIC_LIST_VIEW (noise_music_list_view_get_type ())
#define NOISE_MUSIC_LIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_MUSIC_LIST_VIEW, NoiseMusicListView))
#define NOISE_MUSIC_LIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_MUSIC_LIST_VIEW, NoiseMusicListViewClass))
#define NOISE_IS_MUSIC_LIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_MUSIC_LIST_VIEW))
#define NOISE_IS_MUSIC_LIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_MUSIC_LIST_VIEW))
#define NOISE_MUSIC_LIST_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_MUSIC_LIST_VIEW, NoiseMusicListViewClass))

typedef struct _NoiseMusicListView NoiseMusicListView;
typedef struct _NoiseMusicListViewClass NoiseMusicListViewClass;
typedef struct _NoiseInfoPanelPrivate NoiseInfoPanelPrivate;

#define GRANITE_WIDGETS_TYPE_EMBEDDED_ALERT (granite_widgets_embedded_alert_get_type ())
#define GRANITE_WIDGETS_EMBEDDED_ALERT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_EMBEDDED_ALERT, GraniteWidgetsEmbeddedAlert))
#define GRANITE_WIDGETS_EMBEDDED_ALERT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_EMBEDDED_ALERT, GraniteWidgetsEmbeddedAlertClass))
#define GRANITE_WIDGETS_IS_EMBEDDED_ALERT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_EMBEDDED_ALERT))
#define GRANITE_WIDGETS_IS_EMBEDDED_ALERT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_EMBEDDED_ALERT))
#define GRANITE_WIDGETS_EMBEDDED_ALERT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_EMBEDDED_ALERT, GraniteWidgetsEmbeddedAlertClass))

typedef struct _GraniteWidgetsEmbeddedAlert GraniteWidgetsEmbeddedAlert;
typedef struct _GraniteWidgetsEmbeddedAlertClass GraniteWidgetsEmbeddedAlertClass;
typedef struct _GraniteWidgetsEmbeddedAlertPrivate GraniteWidgetsEmbeddedAlertPrivate;

#define NOISE_TYPE_SIMPLE_OPTION_CHOOSER (noise_simple_option_chooser_get_type ())
#define NOISE_SIMPLE_OPTION_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SIMPLE_OPTION_CHOOSER, NoiseSimpleOptionChooser))
#define NOISE_SIMPLE_OPTION_CHOOSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SIMPLE_OPTION_CHOOSER, NoiseSimpleOptionChooserClass))
#define NOISE_IS_SIMPLE_OPTION_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SIMPLE_OPTION_CHOOSER))
#define NOISE_IS_SIMPLE_OPTION_CHOOSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SIMPLE_OPTION_CHOOSER))
#define NOISE_SIMPLE_OPTION_CHOOSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SIMPLE_OPTION_CHOOSER, NoiseSimpleOptionChooserClass))

typedef struct _NoiseSimpleOptionChooser NoiseSimpleOptionChooser;
typedef struct _NoiseSimpleOptionChooserClass NoiseSimpleOptionChooserClass;
typedef struct _NoiseSimpleOptionChooserPrivate NoiseSimpleOptionChooserPrivate;

#define NOISE_TYPE_PRESET_LIST (noise_preset_list_get_type ())
#define NOISE_PRESET_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_PRESET_LIST, NoisePresetList))
#define NOISE_PRESET_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_PRESET_LIST, NoisePresetListClass))
#define NOISE_IS_PRESET_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_PRESET_LIST))
#define NOISE_IS_PRESET_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_PRESET_LIST))
#define NOISE_PRESET_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_PRESET_LIST, NoisePresetListClass))

typedef struct _NoisePresetList NoisePresetList;
typedef struct _NoisePresetListClass NoisePresetListClass;
typedef struct _NoisePresetListPrivate NoisePresetListPrivate;

#define GRANITE_WIDGETS_TYPE_EXPANDER_RENDERER (granite_widgets_expander_renderer_get_type ())
#define GRANITE_WIDGETS_EXPANDER_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_EXPANDER_RENDERER, GraniteWidgetsExpanderRenderer))
#define GRANITE_WIDGETS_EXPANDER_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_EXPANDER_RENDERER, GraniteWidgetsExpanderRendererClass))
#define GRANITE_WIDGETS_IS_EXPANDER_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_EXPANDER_RENDERER))
#define GRANITE_WIDGETS_IS_EXPANDER_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_EXPANDER_RENDERER))
#define GRANITE_WIDGETS_EXPANDER_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_EXPANDER_RENDERER, GraniteWidgetsExpanderRendererClass))

typedef struct _GraniteWidgetsExpanderRenderer GraniteWidgetsExpanderRenderer;
typedef struct _GraniteWidgetsExpanderRendererClass GraniteWidgetsExpanderRendererClass;
typedef struct _GraniteWidgetsExpanderRendererPrivate GraniteWidgetsExpanderRendererPrivate;

#define GRANITE_WIDGETS_TYPE_SIDE_BAR_COLUMN (granite_widgets_side_bar_column_get_type ())

#define GRANITE_WIDGETS_TYPE_SIDE_BAR (granite_widgets_side_bar_get_type ())
#define GRANITE_WIDGETS_SIDE_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_SIDE_BAR, GraniteWidgetsSideBar))
#define GRANITE_WIDGETS_SIDE_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_SIDE_BAR, GraniteWidgetsSideBarClass))
#define GRANITE_WIDGETS_IS_SIDE_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_SIDE_BAR))
#define GRANITE_WIDGETS_IS_SIDE_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_SIDE_BAR))
#define GRANITE_WIDGETS_SIDE_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_SIDE_BAR, GraniteWidgetsSideBarClass))

typedef struct _GraniteWidgetsSideBar GraniteWidgetsSideBar;
typedef struct _GraniteWidgetsSideBarClass GraniteWidgetsSideBarClass;
typedef struct _GraniteWidgetsSideBarPrivate GraniteWidgetsSideBarPrivate;

#define NOISE_TYPE_SOURCE_LIST_ITEM (noise_source_list_item_get_type ())
#define NOISE_SOURCE_LIST_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SOURCE_LIST_ITEM, NoiseSourceListItem))
#define NOISE_SOURCE_LIST_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SOURCE_LIST_ITEM, NoiseSourceListItemClass))
#define NOISE_IS_SOURCE_LIST_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SOURCE_LIST_ITEM))
#define NOISE_IS_SOURCE_LIST_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SOURCE_LIST_ITEM))
#define NOISE_SOURCE_LIST_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SOURCE_LIST_ITEM, NoiseSourceListItemClass))

typedef struct _NoiseSourceListItem NoiseSourceListItem;
typedef struct _NoiseSourceListItemClass NoiseSourceListItemClass;
typedef struct _NoiseSourceListItemPrivate NoiseSourceListItemPrivate;

#define NOISE_VIEW_WRAPPER_TYPE_HINT (noise_view_wrapper_hint_get_type ())

#define NOISE_TYPE_SOURCE_LIST_EXPANDABLE_ITEM (noise_source_list_expandable_item_get_type ())
#define NOISE_SOURCE_LIST_EXPANDABLE_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SOURCE_LIST_EXPANDABLE_ITEM, NoiseSourceListExpandableItem))
#define NOISE_SOURCE_LIST_EXPANDABLE_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SOURCE_LIST_EXPANDABLE_ITEM, NoiseSourceListExpandableItemClass))
#define NOISE_IS_SOURCE_LIST_EXPANDABLE_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SOURCE_LIST_EXPANDABLE_ITEM))
#define NOISE_IS_SOURCE_LIST_EXPANDABLE_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SOURCE_LIST_EXPANDABLE_ITEM))
#define NOISE_SOURCE_LIST_EXPANDABLE_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SOURCE_LIST_EXPANDABLE_ITEM, NoiseSourceListExpandableItemClass))

typedef struct _NoiseSourceListExpandableItem NoiseSourceListExpandableItem;
typedef struct _NoiseSourceListExpandableItemClass NoiseSourceListExpandableItemClass;
typedef struct _NoiseSourceListExpandableItemPrivate NoiseSourceListExpandableItemPrivate;

#define NOISE_TYPE_PLAY_LIST_CATEGORY (noise_play_list_category_get_type ())
#define NOISE_PLAY_LIST_CATEGORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_PLAY_LIST_CATEGORY, NoisePlayListCategory))
#define NOISE_PLAY_LIST_CATEGORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_PLAY_LIST_CATEGORY, NoisePlayListCategoryClass))
#define NOISE_IS_PLAY_LIST_CATEGORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_PLAY_LIST_CATEGORY))
#define NOISE_IS_PLAY_LIST_CATEGORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_PLAY_LIST_CATEGORY))
#define NOISE_PLAY_LIST_CATEGORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_PLAY_LIST_CATEGORY, NoisePlayListCategoryClass))

typedef struct _NoisePlayListCategory NoisePlayListCategory;
typedef struct _NoisePlayListCategoryClass NoisePlayListCategoryClass;
typedef struct _NoisePlayListCategoryPrivate NoisePlayListCategoryPrivate;

#define NOISE_TYPE_SOURCE_LIST_ROOT (noise_source_list_root_get_type ())
#define NOISE_SOURCE_LIST_ROOT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SOURCE_LIST_ROOT, NoiseSourceListRoot))
#define NOISE_SOURCE_LIST_ROOT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SOURCE_LIST_ROOT, NoiseSourceListRootClass))
#define NOISE_IS_SOURCE_LIST_ROOT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SOURCE_LIST_ROOT))
#define NOISE_IS_SOURCE_LIST_ROOT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SOURCE_LIST_ROOT))
#define NOISE_SOURCE_LIST_ROOT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SOURCE_LIST_ROOT, NoiseSourceListRootClass))

typedef struct _NoiseSourceListRoot NoiseSourceListRoot;
typedef struct _NoiseSourceListRootClass NoiseSourceListRootClass;
typedef struct _NoiseSourceListRootPrivate NoiseSourceListRootPrivate;
typedef struct _NoiseSourceListViewPrivate NoiseSourceListViewPrivate;
typedef struct _NoiseWidgetsStatusBarPrivate NoiseWidgetsStatusBarPrivate;

#define GRANITE_WIDGETS_TYPE_RATING (granite_widgets_rating_get_type ())
#define GRANITE_WIDGETS_RATING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_RATING, GraniteWidgetsRating))
#define GRANITE_WIDGETS_RATING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_RATING, GraniteWidgetsRatingClass))
#define GRANITE_WIDGETS_IS_RATING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_RATING))
#define GRANITE_WIDGETS_IS_RATING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_RATING))
#define GRANITE_WIDGETS_RATING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_RATING, GraniteWidgetsRatingClass))

typedef struct _GraniteWidgetsRating GraniteWidgetsRating;
typedef struct _GraniteWidgetsRatingClass GraniteWidgetsRatingClass;
typedef struct _GraniteWidgetsRatingPrivate GraniteWidgetsRatingPrivate;

#define GRANITE_WIDGETS_RATING_TYPE_RENDERER (granite_widgets_rating_renderer_get_type ())
#define GRANITE_WIDGETS_RATING_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_RATING_TYPE_RENDERER, GraniteWidgetsRatingRenderer))
#define GRANITE_WIDGETS_RATING_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_RATING_TYPE_RENDERER, GraniteWidgetsRatingRendererClass))
#define GRANITE_WIDGETS_RATING_IS_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_RATING_TYPE_RENDERER))
#define GRANITE_WIDGETS_RATING_IS_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_RATING_TYPE_RENDERER))
#define GRANITE_WIDGETS_RATING_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_RATING_TYPE_RENDERER, GraniteWidgetsRatingRendererClass))

typedef struct _GraniteWidgetsRatingRenderer GraniteWidgetsRatingRenderer;
typedef struct _GraniteWidgetsRatingRendererClass GraniteWidgetsRatingRendererClass;
typedef struct _GraniteWidgetsRatingRendererPrivate GraniteWidgetsRatingRendererPrivate;

#define GRANITE_WIDGETS_TYPE_RATING_MENU_ITEM (granite_widgets_rating_menu_item_get_type ())
#define GRANITE_WIDGETS_RATING_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_RATING_MENU_ITEM, GraniteWidgetsRatingMenuItem))
#define GRANITE_WIDGETS_RATING_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_RATING_MENU_ITEM, GraniteWidgetsRatingMenuItemClass))
#define GRANITE_WIDGETS_IS_RATING_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_RATING_MENU_ITEM))
#define GRANITE_WIDGETS_IS_RATING_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_RATING_MENU_ITEM))
#define GRANITE_WIDGETS_RATING_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_RATING_MENU_ITEM, GraniteWidgetsRatingMenuItemClass))

typedef struct _GraniteWidgetsRatingMenuItem GraniteWidgetsRatingMenuItem;
typedef struct _GraniteWidgetsRatingMenuItemClass GraniteWidgetsRatingMenuItemClass;
typedef struct _GraniteWidgetsRatingMenuItemPrivate GraniteWidgetsRatingMenuItemPrivate;

#define GRANITE_WIDGETS_TYPE_CELL_RENDERER_RATING (granite_widgets_cell_renderer_rating_get_type ())
#define GRANITE_WIDGETS_CELL_RENDERER_RATING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_RATING, GraniteWidgetsCellRendererRating))
#define GRANITE_WIDGETS_CELL_RENDERER_RATING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_CELL_RENDERER_RATING, GraniteWidgetsCellRendererRatingClass))
#define GRANITE_WIDGETS_IS_CELL_RENDERER_RATING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_RATING))
#define GRANITE_WIDGETS_IS_CELL_RENDERER_RATING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_CELL_RENDERER_RATING))
#define GRANITE_WIDGETS_CELL_RENDERER_RATING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_RATING, GraniteWidgetsCellRendererRatingClass))

typedef struct _GraniteWidgetsCellRendererRating GraniteWidgetsCellRendererRating;
typedef struct _GraniteWidgetsCellRendererRatingClass GraniteWidgetsCellRendererRatingClass;
typedef struct _GraniteWidgetsCellRendererRatingPrivate GraniteWidgetsCellRendererRatingPrivate;

#define TYPE_SPACE_WIDGET (space_widget_get_type ())
#define SPACE_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SPACE_WIDGET, SpaceWidget))
#define SPACE_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SPACE_WIDGET, SpaceWidgetClass))
#define IS_SPACE_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SPACE_WIDGET))
#define IS_SPACE_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SPACE_WIDGET))
#define SPACE_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SPACE_WIDGET, SpaceWidgetClass))

typedef struct _SpaceWidget SpaceWidget;
typedef struct _SpaceWidgetClass SpaceWidgetClass;
typedef struct _SpaceWidgetPrivate SpaceWidgetPrivate;

#define SPACE_WIDGET_TYPE_ITEM_COLOR (space_widget_item_color_get_type ())
typedef struct _NoiseWidgetsViewSelectorPrivate NoiseWidgetsViewSelectorPrivate;

#define NOISE_WIDGETS_VIEW_SELECTOR_TYPE_MODE (noise_widgets_view_selector_mode_get_type ())

#define NOISE_TYPE_EQUALIZER_POPOVER (noise_equalizer_popover_get_type ())
#define NOISE_EQUALIZER_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_EQUALIZER_POPOVER, NoiseEqualizerPopover))
#define NOISE_EQUALIZER_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_EQUALIZER_POPOVER, NoiseEqualizerPopoverClass))
#define NOISE_IS_EQUALIZER_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_EQUALIZER_POPOVER))
#define NOISE_IS_EQUALIZER_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_EQUALIZER_POPOVER))
#define NOISE_EQUALIZER_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_EQUALIZER_POPOVER, NoiseEqualizerPopoverClass))

typedef struct _NoiseEqualizerPopover NoiseEqualizerPopover;
typedef struct _NoiseEqualizerPopoverClass NoiseEqualizerPopoverClass;
typedef struct _NoiseEqualizerPopoverPrivate NoiseEqualizerPopoverPrivate;

#define NOISE_WIDGETS_TYPE_TILE_VIEW (noise_widgets_tile_view_get_type ())
#define NOISE_WIDGETS_TILE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_WIDGETS_TYPE_TILE_VIEW, NoiseWidgetsTileView))
#define NOISE_WIDGETS_TILE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_WIDGETS_TYPE_TILE_VIEW, NoiseWidgetsTileViewClass))
#define NOISE_WIDGETS_IS_TILE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_WIDGETS_TYPE_TILE_VIEW))
#define NOISE_WIDGETS_IS_TILE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_WIDGETS_TYPE_TILE_VIEW))
#define NOISE_WIDGETS_TILE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_WIDGETS_TYPE_TILE_VIEW, NoiseWidgetsTileViewClass))

typedef struct _NoiseWidgetsTileView NoiseWidgetsTileView;
typedef struct _NoiseWidgetsTileViewClass NoiseWidgetsTileViewClass;
typedef struct _NoiseWidgetsTileViewPrivate NoiseWidgetsTileViewPrivate;

#define NOISE_TYPE_FAST_GRID (noise_fast_grid_get_type ())
#define NOISE_FAST_GRID(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_FAST_GRID, NoiseFastGrid))
#define NOISE_FAST_GRID_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_FAST_GRID, NoiseFastGridClass))
#define NOISE_IS_FAST_GRID(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_FAST_GRID))
#define NOISE_IS_FAST_GRID_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_FAST_GRID))
#define NOISE_FAST_GRID_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_FAST_GRID, NoiseFastGridClass))

typedef struct _NoiseFastGrid NoiseFastGrid;
typedef struct _NoiseFastGridClass NoiseFastGridClass;
typedef struct _NoiseFastGridPrivate NoiseFastGridPrivate;

#define NOISE_FAST_GRID_TYPE_COLUMN (noise_fast_grid_column_get_type ())

#define NOISE_TYPE_FAST_GRID_MODEL (noise_fast_grid_model_get_type ())
#define NOISE_FAST_GRID_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_FAST_GRID_MODEL, NoiseFastGridModel))
#define NOISE_FAST_GRID_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_FAST_GRID_MODEL, NoiseFastGridModelClass))
#define NOISE_IS_FAST_GRID_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_FAST_GRID_MODEL))
#define NOISE_IS_FAST_GRID_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_FAST_GRID_MODEL))
#define NOISE_FAST_GRID_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_FAST_GRID_MODEL, NoiseFastGridModelClass))

typedef struct _NoiseFastGridModel NoiseFastGridModel;
typedef struct _NoiseFastGridModelClass NoiseFastGridModelClass;
typedef struct _NoiseFastGridModelPrivate NoiseFastGridModelPrivate;
typedef struct _NoiseFastViewPrivate NoiseFastViewPrivate;

#define NOISE_TYPE_FAST_MODEL (noise_fast_model_get_type ())
#define NOISE_FAST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_FAST_MODEL, NoiseFastModel))
#define NOISE_FAST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_FAST_MODEL, NoiseFastModelClass))
#define NOISE_IS_FAST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_FAST_MODEL))
#define NOISE_IS_FAST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_FAST_MODEL))
#define NOISE_FAST_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_FAST_MODEL, NoiseFastModelClass))

typedef struct _NoiseFastModel NoiseFastModel;
typedef struct _NoiseFastModelClass NoiseFastModelClass;
typedef struct _NoiseFastModelPrivate NoiseFastModelPrivate;

#define NOISE_TYPE_DATA_BASE_MANAGER (noise_data_base_manager_get_type ())
#define NOISE_DATA_BASE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_DATA_BASE_MANAGER, NoiseDataBaseManager))
#define NOISE_DATA_BASE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_DATA_BASE_MANAGER, NoiseDataBaseManagerClass))
#define NOISE_IS_DATA_BASE_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_DATA_BASE_MANAGER))
#define NOISE_IS_DATA_BASE_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_DATA_BASE_MANAGER))
#define NOISE_DATA_BASE_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_DATA_BASE_MANAGER, NoiseDataBaseManagerClass))

typedef struct _NoiseDataBaseManager NoiseDataBaseManager;
typedef struct _NoiseDataBaseManagerClass NoiseDataBaseManagerClass;
typedef struct _NoiseDataBaseManagerPrivate NoiseDataBaseManagerPrivate;
typedef struct _NoiseDataBaseUpdaterPrivate NoiseDataBaseUpdaterPrivate;
typedef struct _NoiseGStreamerTaggerPrivate NoiseGStreamerTaggerPrivate;
typedef struct _NoiseStreamerPrivate NoiseStreamerPrivate;

#define NOISE_TYPE_COVER_IMPORT (noise_cover_import_get_type ())
#define NOISE_COVER_IMPORT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_COVER_IMPORT, NoiseCoverImport))
#define NOISE_COVER_IMPORT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_COVER_IMPORT, NoiseCoverImportClass))
#define NOISE_IS_COVER_IMPORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_COVER_IMPORT))
#define NOISE_IS_COVER_IMPORT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_COVER_IMPORT))
#define NOISE_COVER_IMPORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_COVER_IMPORT, NoiseCoverImportClass))

typedef struct _NoiseCoverImport NoiseCoverImport;
typedef struct _NoiseCoverImportClass NoiseCoverImportClass;
typedef struct _NoiseCoverImportPrivate NoiseCoverImportPrivate;
typedef struct _NoiseViewContainerPrivate NoiseViewContainerPrivate;
typedef struct _NoiseViewWrapperPrivate NoiseViewWrapperPrivate;

#define NOISE_VIEW_WRAPPER_TYPE_VIEW_TYPE (noise_view_wrapper_view_type_get_type ())

#define NOISE_TYPE_LIST_VIEW (noise_list_view_get_type ())
#define NOISE_LIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_LIST_VIEW, NoiseListView))
#define NOISE_LIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_LIST_VIEW, NoiseListViewClass))
#define NOISE_IS_LIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_LIST_VIEW))
#define NOISE_IS_LIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_LIST_VIEW))
#define NOISE_LIST_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_LIST_VIEW, NoiseListViewClass))

typedef struct _NoiseListView NoiseListView;
typedef struct _NoiseListViewClass NoiseListViewClass;

#define NOISE_TYPE_VIEW_TEXT_OVERLAY (noise_view_text_overlay_get_type ())
#define NOISE_VIEW_TEXT_OVERLAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_VIEW_TEXT_OVERLAY, NoiseViewTextOverlay))
#define NOISE_VIEW_TEXT_OVERLAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_VIEW_TEXT_OVERLAY, NoiseViewTextOverlayClass))
#define NOISE_IS_VIEW_TEXT_OVERLAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_VIEW_TEXT_OVERLAY))
#define NOISE_IS_VIEW_TEXT_OVERLAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_VIEW_TEXT_OVERLAY))
#define NOISE_VIEW_TEXT_OVERLAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_VIEW_TEXT_OVERLAY, NoiseViewTextOverlayClass))

typedef struct _NoiseViewTextOverlay NoiseViewTextOverlay;
typedef struct _NoiseViewTextOverlayClass NoiseViewTextOverlayClass;

#define NOISE_TYPE_GRID_LAYOUT (noise_grid_layout_get_type ())
#define NOISE_GRID_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_GRID_LAYOUT, NoiseGridLayout))
#define NOISE_GRID_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_GRID_LAYOUT, NoiseGridLayoutClass))
#define NOISE_IS_GRID_LAYOUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_GRID_LAYOUT))
#define NOISE_IS_GRID_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_GRID_LAYOUT))
#define NOISE_GRID_LAYOUT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_GRID_LAYOUT, NoiseGridLayoutClass))

typedef struct _NoiseGridLayout NoiseGridLayout;
typedef struct _NoiseGridLayoutClass NoiseGridLayoutClass;

#define NOISE_TYPE_GRID_VIEW (noise_grid_view_get_type ())
#define NOISE_GRID_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_GRID_VIEW, NoiseGridView))
#define NOISE_GRID_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_GRID_VIEW, NoiseGridViewClass))
#define NOISE_IS_GRID_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_GRID_VIEW))
#define NOISE_IS_GRID_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_GRID_VIEW))
#define NOISE_GRID_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_GRID_VIEW, NoiseGridViewClass))

typedef struct _NoiseGridView NoiseGridView;
typedef struct _NoiseGridViewClass NoiseGridViewClass;

#define NOISE_TYPE_MUSIC_VIEW_WRAPPER (noise_music_view_wrapper_get_type ())
#define NOISE_MUSIC_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_MUSIC_VIEW_WRAPPER, NoiseMusicViewWrapper))
#define NOISE_MUSIC_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_MUSIC_VIEW_WRAPPER, NoiseMusicViewWrapperClass))
#define NOISE_IS_MUSIC_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_MUSIC_VIEW_WRAPPER))
#define NOISE_IS_MUSIC_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_MUSIC_VIEW_WRAPPER))
#define NOISE_MUSIC_VIEW_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_MUSIC_VIEW_WRAPPER, NoiseMusicViewWrapperClass))

typedef struct _NoiseMusicViewWrapper NoiseMusicViewWrapper;
typedef struct _NoiseMusicViewWrapperClass NoiseMusicViewWrapperClass;
typedef struct _NoiseMusicViewWrapperPrivate NoiseMusicViewWrapperPrivate;

#define NOISE_TYPE_DEVICE_VIEW_WRAPPER (noise_device_view_wrapper_get_type ())
#define NOISE_DEVICE_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_DEVICE_VIEW_WRAPPER, NoiseDeviceViewWrapper))
#define NOISE_DEVICE_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_DEVICE_VIEW_WRAPPER, NoiseDeviceViewWrapperClass))
#define NOISE_IS_DEVICE_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_DEVICE_VIEW_WRAPPER))
#define NOISE_IS_DEVICE_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_DEVICE_VIEW_WRAPPER))
#define NOISE_DEVICE_VIEW_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_DEVICE_VIEW_WRAPPER, NoiseDeviceViewWrapperClass))

typedef struct _NoiseDeviceViewWrapper NoiseDeviceViewWrapper;
typedef struct _NoiseDeviceViewWrapperClass NoiseDeviceViewWrapperClass;
typedef struct _NoiseDeviceViewWrapperPrivate NoiseDeviceViewWrapperPrivate;

#define NOISE_TYPE_PLAYLIST_VIEW_WRAPPER (noise_playlist_view_wrapper_get_type ())
#define NOISE_PLAYLIST_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_PLAYLIST_VIEW_WRAPPER, NoisePlaylistViewWrapper))
#define NOISE_PLAYLIST_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_PLAYLIST_VIEW_WRAPPER, NoisePlaylistViewWrapperClass))
#define NOISE_IS_PLAYLIST_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_PLAYLIST_VIEW_WRAPPER))
#define NOISE_IS_PLAYLIST_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_PLAYLIST_VIEW_WRAPPER))
#define NOISE_PLAYLIST_VIEW_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_PLAYLIST_VIEW_WRAPPER, NoisePlaylistViewWrapperClass))

typedef struct _NoisePlaylistViewWrapper NoisePlaylistViewWrapper;
typedef struct _NoisePlaylistViewWrapperClass NoisePlaylistViewWrapperClass;
typedef struct _NoisePlaylistViewWrapperPrivate NoisePlaylistViewWrapperPrivate;

#define NOISE_TYPE_READ_ONLY_PLAYLIST_VIEW_WRAPPER (noise_read_only_playlist_view_wrapper_get_type ())
#define NOISE_READ_ONLY_PLAYLIST_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_READ_ONLY_PLAYLIST_VIEW_WRAPPER, NoiseReadOnlyPlaylistViewWrapper))
#define NOISE_READ_ONLY_PLAYLIST_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_READ_ONLY_PLAYLIST_VIEW_WRAPPER, NoiseReadOnlyPlaylistViewWrapperClass))
#define NOISE_IS_READ_ONLY_PLAYLIST_VIEW_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_READ_ONLY_PLAYLIST_VIEW_WRAPPER))
#define NOISE_IS_READ_ONLY_PLAYLIST_VIEW_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_READ_ONLY_PLAYLIST_VIEW_WRAPPER))
#define NOISE_READ_ONLY_PLAYLIST_VIEW_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_READ_ONLY_PLAYLIST_VIEW_WRAPPER, NoiseReadOnlyPlaylistViewWrapperClass))

typedef struct _NoiseReadOnlyPlaylistViewWrapper NoiseReadOnlyPlaylistViewWrapper;
typedef struct _NoiseReadOnlyPlaylistViewWrapperClass NoiseReadOnlyPlaylistViewWrapperClass;
typedef struct _NoiseReadOnlyPlaylistViewWrapperPrivate NoiseReadOnlyPlaylistViewWrapperPrivate;

#define NOISE_TYPE_DEVICE_VIEW (noise_device_view_get_type ())
#define NOISE_DEVICE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_DEVICE_VIEW, NoiseDeviceView))
#define NOISE_DEVICE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_DEVICE_VIEW, NoiseDeviceViewClass))
#define NOISE_IS_DEVICE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_DEVICE_VIEW))
#define NOISE_IS_DEVICE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_DEVICE_VIEW))
#define NOISE_DEVICE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_DEVICE_VIEW, NoiseDeviceViewClass))

typedef struct _NoiseDeviceView NoiseDeviceView;
typedef struct _NoiseDeviceViewClass NoiseDeviceViewClass;
typedef struct _NoiseDeviceViewPrivate NoiseDeviceViewPrivate;

#define NOISE_TYPE_DEVICE_SUMMARY_WIDGET (noise_device_summary_widget_get_type ())
#define NOISE_DEVICE_SUMMARY_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_DEVICE_SUMMARY_WIDGET, NoiseDeviceSummaryWidget))
#define NOISE_DEVICE_SUMMARY_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_DEVICE_SUMMARY_WIDGET, NoiseDeviceSummaryWidgetClass))
#define NOISE_IS_DEVICE_SUMMARY_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_DEVICE_SUMMARY_WIDGET))
#define NOISE_IS_DEVICE_SUMMARY_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_DEVICE_SUMMARY_WIDGET))
#define NOISE_DEVICE_SUMMARY_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_DEVICE_SUMMARY_WIDGET, NoiseDeviceSummaryWidgetClass))

typedef struct _NoiseDeviceSummaryWidget NoiseDeviceSummaryWidget;
typedef struct _NoiseDeviceSummaryWidgetClass NoiseDeviceSummaryWidgetClass;
typedef struct _NoiseDeviceSummaryWidgetPrivate NoiseDeviceSummaryWidgetPrivate;

#define NOISE_TYPE_CONTENT_VIEW (noise_content_view_get_type ())
#define NOISE_CONTENT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_CONTENT_VIEW, NoiseContentView))
#define NOISE_IS_CONTENT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_CONTENT_VIEW))
#define NOISE_CONTENT_VIEW_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), NOISE_TYPE_CONTENT_VIEW, NoiseContentViewIface))

typedef struct _NoiseContentView NoiseContentView;
typedef struct _NoiseContentViewIface NoiseContentViewIface;
typedef struct _NoiseViewTextOverlayPrivate NoiseViewTextOverlayPrivate;
typedef struct _NoiseGridLayoutPrivate NoiseGridLayoutPrivate;
typedef struct _NoiseGridViewPrivate NoiseGridViewPrivate;

#define NOISE_TYPE_POPUP_LIST_VIEW (noise_popup_list_view_get_type ())
#define NOISE_POPUP_LIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_POPUP_LIST_VIEW, NoisePopupListView))
#define NOISE_POPUP_LIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_POPUP_LIST_VIEW, NoisePopupListViewClass))
#define NOISE_IS_POPUP_LIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_POPUP_LIST_VIEW))
#define NOISE_IS_POPUP_LIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_POPUP_LIST_VIEW))
#define NOISE_POPUP_LIST_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_POPUP_LIST_VIEW, NoisePopupListViewClass))

typedef struct _NoisePopupListView NoisePopupListView;
typedef struct _NoisePopupListViewClass NoisePopupListViewClass;
typedef struct _NoisePopupListViewPrivate NoisePopupListViewPrivate;
typedef struct _NoiseListViewPrivate NoiseListViewPrivate;

#define NOISE_TYPE_COLUMN_BROWSER (noise_column_browser_get_type ())
#define NOISE_COLUMN_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_COLUMN_BROWSER, NoiseColumnBrowser))
#define NOISE_COLUMN_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_COLUMN_BROWSER, NoiseColumnBrowserClass))
#define NOISE_IS_COLUMN_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_COLUMN_BROWSER))
#define NOISE_IS_COLUMN_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_COLUMN_BROWSER))
#define NOISE_COLUMN_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_COLUMN_BROWSER, NoiseColumnBrowserClass))

typedef struct _NoiseColumnBrowser NoiseColumnBrowser;
typedef struct _NoiseColumnBrowserClass NoiseColumnBrowserClass;

#define NOISE_TYPE_BROWSER_COLUMN_MODEL (noise_browser_column_model_get_type ())
#define NOISE_BROWSER_COLUMN_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_BROWSER_COLUMN_MODEL, NoiseBrowserColumnModel))
#define NOISE_BROWSER_COLUMN_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_BROWSER_COLUMN_MODEL, NoiseBrowserColumnModelClass))
#define NOISE_IS_BROWSER_COLUMN_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_BROWSER_COLUMN_MODEL))
#define NOISE_IS_BROWSER_COLUMN_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_BROWSER_COLUMN_MODEL))
#define NOISE_BROWSER_COLUMN_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_BROWSER_COLUMN_MODEL, NoiseBrowserColumnModelClass))

typedef struct _NoiseBrowserColumnModel NoiseBrowserColumnModel;
typedef struct _NoiseBrowserColumnModelClass NoiseBrowserColumnModelClass;
typedef struct _NoiseBrowserColumnModelPrivate NoiseBrowserColumnModelPrivate;

#define NOISE_BROWSER_COLUMN_TYPE_CATEGORY (noise_browser_column_category_get_type ())

#define NOISE_TYPE_BROWSER_COLUMN (noise_browser_column_get_type ())
#define NOISE_BROWSER_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_BROWSER_COLUMN, NoiseBrowserColumn))
#define NOISE_BROWSER_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_BROWSER_COLUMN, NoiseBrowserColumnClass))
#define NOISE_IS_BROWSER_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_BROWSER_COLUMN))
#define NOISE_IS_BROWSER_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_BROWSER_COLUMN))
#define NOISE_BROWSER_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_BROWSER_COLUMN, NoiseBrowserColumnClass))

typedef struct _NoiseBrowserColumn NoiseBrowserColumn;
typedef struct _NoiseBrowserColumnClass NoiseBrowserColumnClass;
typedef struct _NoiseBrowserColumnPrivate NoiseBrowserColumnPrivate;
typedef struct _NoiseColumnBrowserPrivate NoiseColumnBrowserPrivate;

#define NOISE_COLUMN_BROWSER_TYPE_POSITION (noise_column_browser_position_get_type ())

#define NOISE_TYPE_MUSIC_COLUMN_BROWSER (noise_music_column_browser_get_type ())
#define NOISE_MUSIC_COLUMN_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_MUSIC_COLUMN_BROWSER, NoiseMusicColumnBrowser))
#define NOISE_MUSIC_COLUMN_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_MUSIC_COLUMN_BROWSER, NoiseMusicColumnBrowserClass))
#define NOISE_IS_MUSIC_COLUMN_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_MUSIC_COLUMN_BROWSER))
#define NOISE_IS_MUSIC_COLUMN_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_MUSIC_COLUMN_BROWSER))
#define NOISE_MUSIC_COLUMN_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_MUSIC_COLUMN_BROWSER, NoiseMusicColumnBrowserClass))

typedef struct _NoiseMusicColumnBrowser NoiseMusicColumnBrowser;
typedef struct _NoiseMusicColumnBrowserClass NoiseMusicColumnBrowserClass;
typedef struct _NoiseMusicColumnBrowserPrivate NoiseMusicColumnBrowserPrivate;

#define NOISE_TYPE_LIST_COLUMN (noise_list_column_get_type ())
typedef struct _NoiseTreeViewSetupPrivate NoiseTreeViewSetupPrivate;

#define NOISE_TYPE_CELL_DATA_FUNCTION_HELPER (noise_cell_data_function_helper_get_type ())
#define NOISE_CELL_DATA_FUNCTION_HELPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_CELL_DATA_FUNCTION_HELPER, NoiseCellDataFunctionHelper))
#define NOISE_CELL_DATA_FUNCTION_HELPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_CELL_DATA_FUNCTION_HELPER, NoiseCellDataFunctionHelperClass))
#define NOISE_IS_CELL_DATA_FUNCTION_HELPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_CELL_DATA_FUNCTION_HELPER))
#define NOISE_IS_CELL_DATA_FUNCTION_HELPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_CELL_DATA_FUNCTION_HELPER))
#define NOISE_CELL_DATA_FUNCTION_HELPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_CELL_DATA_FUNCTION_HELPER, NoiseCellDataFunctionHelperClass))

typedef struct _NoiseCellDataFunctionHelper NoiseCellDataFunctionHelper;
typedef struct _NoiseCellDataFunctionHelperClass NoiseCellDataFunctionHelperClass;
typedef struct _NoiseCellDataFunctionHelperPrivate NoiseCellDataFunctionHelperPrivate;
typedef struct _NoiseGenericListPrivate NoiseGenericListPrivate;

#define NOISE_TYPE_CONTRACT_MENU_ITEM (noise_contract_menu_item_get_type ())
#define NOISE_CONTRACT_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_CONTRACT_MENU_ITEM, NoiseContractMenuItem))
#define NOISE_CONTRACT_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_CONTRACT_MENU_ITEM, NoiseContractMenuItemClass))
#define NOISE_IS_CONTRACT_MENU_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_CONTRACT_MENU_ITEM))
#define NOISE_IS_CONTRACT_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_CONTRACT_MENU_ITEM))
#define NOISE_CONTRACT_MENU_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_CONTRACT_MENU_ITEM, NoiseContractMenuItemClass))

typedef struct _NoiseContractMenuItem NoiseContractMenuItem;
typedef struct _NoiseContractMenuItemClass NoiseContractMenuItemClass;
typedef struct _NoiseContractMenuItemPrivate NoiseContractMenuItemPrivate;
typedef struct _NoiseMusicListViewPrivate NoiseMusicListViewPrivate;

#define NOISE_TYPE_SMART_PLAYLIST_EDITOR (noise_smart_playlist_editor_get_type ())
#define NOISE_SMART_PLAYLIST_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SMART_PLAYLIST_EDITOR, NoiseSmartPlaylistEditor))
#define NOISE_SMART_PLAYLIST_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SMART_PLAYLIST_EDITOR, NoiseSmartPlaylistEditorClass))
#define NOISE_IS_SMART_PLAYLIST_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SMART_PLAYLIST_EDITOR))
#define NOISE_IS_SMART_PLAYLIST_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SMART_PLAYLIST_EDITOR))
#define NOISE_SMART_PLAYLIST_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SMART_PLAYLIST_EDITOR, NoiseSmartPlaylistEditorClass))

typedef struct _NoiseSmartPlaylistEditor NoiseSmartPlaylistEditor;
typedef struct _NoiseSmartPlaylistEditorClass NoiseSmartPlaylistEditorClass;
typedef struct _NoiseSmartPlaylistEditorPrivate NoiseSmartPlaylistEditorPrivate;

#define NOISE_TYPE_SMART_PLAYLIST_EDITOR_QUERY (noise_smart_playlist_editor_query_get_type ())
#define NOISE_SMART_PLAYLIST_EDITOR_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SMART_PLAYLIST_EDITOR_QUERY, NoiseSmartPlaylistEditorQuery))
#define NOISE_SMART_PLAYLIST_EDITOR_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SMART_PLAYLIST_EDITOR_QUERY, NoiseSmartPlaylistEditorQueryClass))
#define NOISE_IS_SMART_PLAYLIST_EDITOR_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SMART_PLAYLIST_EDITOR_QUERY))
#define NOISE_IS_SMART_PLAYLIST_EDITOR_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SMART_PLAYLIST_EDITOR_QUERY))
#define NOISE_SMART_PLAYLIST_EDITOR_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SMART_PLAYLIST_EDITOR_QUERY, NoiseSmartPlaylistEditorQueryClass))

typedef struct _NoiseSmartPlaylistEditorQuery NoiseSmartPlaylistEditorQuery;
typedef struct _NoiseSmartPlaylistEditorQueryClass NoiseSmartPlaylistEditorQueryClass;
typedef struct _NoiseSmartPlaylistEditorQueryPrivate NoiseSmartPlaylistEditorQueryPrivate;

#define NOISE_TYPE_PREFERENCES_WINDOW (noise_preferences_window_get_type ())
#define NOISE_PREFERENCES_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_PREFERENCES_WINDOW, NoisePreferencesWindow))
#define NOISE_PREFERENCES_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_PREFERENCES_WINDOW, NoisePreferencesWindowClass))
#define NOISE_IS_PREFERENCES_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_PREFERENCES_WINDOW))
#define NOISE_IS_PREFERENCES_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_PREFERENCES_WINDOW))
#define NOISE_PREFERENCES_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_PREFERENCES_WINDOW, NoisePreferencesWindowClass))

typedef struct _NoisePreferencesWindow NoisePreferencesWindow;
typedef struct _NoisePreferencesWindowClass NoisePreferencesWindowClass;
typedef struct _NoisePreferencesWindowPrivate NoisePreferencesWindowPrivate;

#define NOISE_TYPE_INSTALL_GSTREAMER_PLUGINS_DIALOG (noise_install_gstreamer_plugins_dialog_get_type ())
#define NOISE_INSTALL_GSTREAMER_PLUGINS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_INSTALL_GSTREAMER_PLUGINS_DIALOG, NoiseInstallGstreamerPluginsDialog))
#define NOISE_INSTALL_GSTREAMER_PLUGINS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_INSTALL_GSTREAMER_PLUGINS_DIALOG, NoiseInstallGstreamerPluginsDialogClass))
#define NOISE_IS_INSTALL_GSTREAMER_PLUGINS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_INSTALL_GSTREAMER_PLUGINS_DIALOG))
#define NOISE_IS_INSTALL_GSTREAMER_PLUGINS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_INSTALL_GSTREAMER_PLUGINS_DIALOG))
#define NOISE_INSTALL_GSTREAMER_PLUGINS_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_INSTALL_GSTREAMER_PLUGINS_DIALOG, NoiseInstallGstreamerPluginsDialogClass))

typedef struct _NoiseInstallGstreamerPluginsDialog NoiseInstallGstreamerPluginsDialog;
typedef struct _NoiseInstallGstreamerPluginsDialogClass NoiseInstallGstreamerPluginsDialogClass;
typedef struct _NoiseInstallGstreamerPluginsDialogPrivate NoiseInstallGstreamerPluginsDialogPrivate;

#define NOISE_TYPE_MEDIA_EDITOR (noise_media_editor_get_type ())
#define NOISE_MEDIA_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_MEDIA_EDITOR, NoiseMediaEditor))
#define NOISE_MEDIA_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_MEDIA_EDITOR, NoiseMediaEditorClass))
#define NOISE_IS_MEDIA_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_MEDIA_EDITOR))
#define NOISE_IS_MEDIA_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_MEDIA_EDITOR))
#define NOISE_MEDIA_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_MEDIA_EDITOR, NoiseMediaEditorClass))

typedef struct _NoiseMediaEditor NoiseMediaEditor;
typedef struct _NoiseMediaEditorClass NoiseMediaEditorClass;
typedef struct _NoiseMediaEditorPrivate NoiseMediaEditorPrivate;

#define NOISE_TYPE_FIELD_EDITOR (noise_field_editor_get_type ())
#define NOISE_FIELD_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_FIELD_EDITOR, NoiseFieldEditor))
#define NOISE_FIELD_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_FIELD_EDITOR, NoiseFieldEditorClass))
#define NOISE_IS_FIELD_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_FIELD_EDITOR))
#define NOISE_IS_FIELD_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_FIELD_EDITOR))
#define NOISE_FIELD_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_FIELD_EDITOR, NoiseFieldEditorClass))

typedef struct _NoiseFieldEditor NoiseFieldEditor;
typedef struct _NoiseFieldEditorClass NoiseFieldEditorClass;
typedef struct _NoiseFieldEditorPrivate NoiseFieldEditorPrivate;

#define NOISE_TYPE_STATS_DISPLAY (noise_stats_display_get_type ())
#define NOISE_STATS_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_STATS_DISPLAY, NoiseStatsDisplay))
#define NOISE_STATS_DISPLAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_STATS_DISPLAY, NoiseStatsDisplayClass))
#define NOISE_IS_STATS_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_STATS_DISPLAY))
#define NOISE_IS_STATS_DISPLAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_STATS_DISPLAY))
#define NOISE_STATS_DISPLAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_STATS_DISPLAY, NoiseStatsDisplayClass))

typedef struct _NoiseStatsDisplay NoiseStatsDisplay;
typedef struct _NoiseStatsDisplayClass NoiseStatsDisplayClass;
typedef struct _NoiseStatsDisplayPrivate NoiseStatsDisplayPrivate;

#define NOISE_TYPE_FILE_NOT_FOUND_DIALOG (noise_file_not_found_dialog_get_type ())
#define NOISE_FILE_NOT_FOUND_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_FILE_NOT_FOUND_DIALOG, NoiseFileNotFoundDialog))
#define NOISE_FILE_NOT_FOUND_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_FILE_NOT_FOUND_DIALOG, NoiseFileNotFoundDialogClass))
#define NOISE_IS_FILE_NOT_FOUND_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_FILE_NOT_FOUND_DIALOG))
#define NOISE_IS_FILE_NOT_FOUND_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_FILE_NOT_FOUND_DIALOG))
#define NOISE_FILE_NOT_FOUND_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_FILE_NOT_FOUND_DIALOG, NoiseFileNotFoundDialogClass))

typedef struct _NoiseFileNotFoundDialog NoiseFileNotFoundDialog;
typedef struct _NoiseFileNotFoundDialogClass NoiseFileNotFoundDialogClass;
typedef struct _NoiseFileNotFoundDialogPrivate NoiseFileNotFoundDialogPrivate;

#define NOISE_TYPE_REMOVE_FILES_DIALOG (noise_remove_files_dialog_get_type ())
#define NOISE_REMOVE_FILES_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_REMOVE_FILES_DIALOG, NoiseRemoveFilesDialog))
#define NOISE_REMOVE_FILES_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_REMOVE_FILES_DIALOG, NoiseRemoveFilesDialogClass))
#define NOISE_IS_REMOVE_FILES_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_REMOVE_FILES_DIALOG))
#define NOISE_IS_REMOVE_FILES_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_REMOVE_FILES_DIALOG))
#define NOISE_REMOVE_FILES_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_REMOVE_FILES_DIALOG, NoiseRemoveFilesDialogClass))

typedef struct _NoiseRemoveFilesDialog NoiseRemoveFilesDialog;
typedef struct _NoiseRemoveFilesDialogClass NoiseRemoveFilesDialogClass;
typedef struct _NoiseRemoveFilesDialogPrivate NoiseRemoveFilesDialogPrivate;

#define NOISE_TYPE_NOT_IMPORTED_WINDOW (noise_not_imported_window_get_type ())
#define NOISE_NOT_IMPORTED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_NOT_IMPORTED_WINDOW, NoiseNotImportedWindow))
#define NOISE_NOT_IMPORTED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_NOT_IMPORTED_WINDOW, NoiseNotImportedWindowClass))
#define NOISE_IS_NOT_IMPORTED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_NOT_IMPORTED_WINDOW))
#define NOISE_IS_NOT_IMPORTED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_NOT_IMPORTED_WINDOW))
#define NOISE_NOT_IMPORTED_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_NOT_IMPORTED_WINDOW, NoiseNotImportedWindowClass))

typedef struct _NoiseNotImportedWindow NoiseNotImportedWindow;
typedef struct _NoiseNotImportedWindowClass NoiseNotImportedWindowClass;
typedef struct _NoiseNotImportedWindowPrivate NoiseNotImportedWindowPrivate;

#define NOISE_TYPE_SET_MUSIC_FOLDER_CONFIRMATION (noise_set_music_folder_confirmation_get_type ())
#define NOISE_SET_MUSIC_FOLDER_CONFIRMATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SET_MUSIC_FOLDER_CONFIRMATION, NoiseSetMusicFolderConfirmation))
#define NOISE_SET_MUSIC_FOLDER_CONFIRMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SET_MUSIC_FOLDER_CONFIRMATION, NoiseSetMusicFolderConfirmationClass))
#define NOISE_IS_SET_MUSIC_FOLDER_CONFIRMATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SET_MUSIC_FOLDER_CONFIRMATION))
#define NOISE_IS_SET_MUSIC_FOLDER_CONFIRMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SET_MUSIC_FOLDER_CONFIRMATION))
#define NOISE_SET_MUSIC_FOLDER_CONFIRMATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SET_MUSIC_FOLDER_CONFIRMATION, NoiseSetMusicFolderConfirmationClass))

typedef struct _NoiseSetMusicFolderConfirmation NoiseSetMusicFolderConfirmation;
typedef struct _NoiseSetMusicFolderConfirmationClass NoiseSetMusicFolderConfirmationClass;
typedef struct _NoiseSetMusicFolderConfirmationPrivate NoiseSetMusicFolderConfirmationPrivate;

#define NOISE_TYPE_TRANSFER_FROM_DEVICE_DIALOG (noise_transfer_from_device_dialog_get_type ())
#define NOISE_TRANSFER_FROM_DEVICE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_TRANSFER_FROM_DEVICE_DIALOG, NoiseTransferFromDeviceDialog))
#define NOISE_TRANSFER_FROM_DEVICE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_TRANSFER_FROM_DEVICE_DIALOG, NoiseTransferFromDeviceDialogClass))
#define NOISE_IS_TRANSFER_FROM_DEVICE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_TRANSFER_FROM_DEVICE_DIALOG))
#define NOISE_IS_TRANSFER_FROM_DEVICE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_TRANSFER_FROM_DEVICE_DIALOG))
#define NOISE_TRANSFER_FROM_DEVICE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_TRANSFER_FROM_DEVICE_DIALOG, NoiseTransferFromDeviceDialogClass))

typedef struct _NoiseTransferFromDeviceDialog NoiseTransferFromDeviceDialog;
typedef struct _NoiseTransferFromDeviceDialogClass NoiseTransferFromDeviceDialogClass;
typedef struct _NoiseTransferFromDeviceDialogPrivate NoiseTransferFromDeviceDialogPrivate;

#define NOISE_TYPE_SYNC_WARNING_DIALOG (noise_sync_warning_dialog_get_type ())
#define NOISE_SYNC_WARNING_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), NOISE_TYPE_SYNC_WARNING_DIALOG, NoiseSyncWarningDialog))
#define NOISE_SYNC_WARNING_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), NOISE_TYPE_SYNC_WARNING_DIALOG, NoiseSyncWarningDialogClass))
#define NOISE_IS_SYNC_WARNING_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NOISE_TYPE_SYNC_WARNING_DIALOG))
#define NOISE_IS_SYNC_WARNING_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), NOISE_TYPE_SYNC_WARNING_DIALOG))
#define NOISE_SYNC_WARNING_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), NOISE_TYPE_SYNC_WARNING_DIALOG, NoiseSyncWarningDialogClass))

typedef struct _NoiseSyncWarningDialog NoiseSyncWarningDialog;
typedef struct _NoiseSyncWarningDialogClass NoiseSyncWarningDialogClass;
typedef struct _NoiseSyncWarningDialogPrivate NoiseSyncWarningDialogPrivate;

struct _NoiseApp {
	GraniteApplication parent_instance;
	NoiseAppPrivate * priv;
};

struct _NoiseAppClass {
	GraniteApplicationClass parent_class;
};

struct _NoiseLibraryWindow {
	GtkWindow parent_instance;
	NoiseLibraryWindowPrivate * priv;
	NoiseInfoPanel* info_panel;
};

struct _NoiseLibraryWindowClass {
	GtkWindowClass parent_class;
	void (*playback_stopped) (NoiseLibraryWindow* self, gint was_playing);
	void (*playback_started) (NoiseLibraryWindow* self);
	void (*playback_paused) (NoiseLibraryWindow* self);
	void (*play_media) (NoiseLibraryWindow* self, gboolean inhibit_notifications);
	void (*play_next_media) (NoiseLibraryWindow* self, gboolean inhibit_notifications);
	void (*play_previous_media) (NoiseLibraryWindow* self, gboolean inhibit_notifications);
	void (*fileImportMusicClick) (NoiseLibraryWindow* self);
	void (*end_of_stream) (NoiseLibraryWindow* self);
	void (*error_occured) (NoiseLibraryWindow* self);
	void (*current_position_update) (NoiseLibraryWindow* self, gint64 position);
	void (*dragReceived) (NoiseLibraryWindow* self, GdkDragContext* context, gint x, gint y, GtkSelectionData* data, guint info, guint timestamp);
};

struct _NoiseSourceListEntryIface {
	GTypeInterface parent_iface;
};

struct _NoisePlaybackManager {
	GObject parent_instance;
	NoisePlaybackManagerPrivate * priv;
	NoiseStaticPlaylist* queue_playlist;
	NoiseStaticPlaylist* history_playlist;
	gint next_gapless_id;
	NoiseStreamer* file_player;
	NoisePlayback* player;
};

struct _NoisePlaybackManagerClass {
	GObjectClass parent_class;
};

struct _NoiseFileOperator {
	GObject parent_instance;
	NoiseFileOperatorPrivate * priv;
	NoiseGStreamerTagger* tagger;
	GCancellable* cancellable;
	gint index;
	gint item_count;
};

struct _NoiseFileOperatorClass {
	GObjectClass parent_class;
};

typedef enum  {
	NOISE_FILE_OPERATOR_IMPORT_TYPE_SET,
	NOISE_FILE_OPERATOR_IMPORT_TYPE_RESCAN,
	NOISE_FILE_OPERATOR_IMPORT_TYPE_PLAYLIST,
	NOISE_FILE_OPERATOR_IMPORT_TYPE_IMPORT
} NoiseFileOperatorImportType;

struct _NoiseLyricFetcher {
	GObject parent_instance;
	NoiseLyricFetcherPrivate * priv;
};

struct _NoiseLyricFetcherClass {
	GObjectClass parent_class;
};

struct _NoiseMediaArtCache {
	GTypeInstance parent_instance;
	volatile int ref_count;
	NoiseMediaArtCachePrivate * priv;
};

struct _NoiseMediaArtCacheClass {
	GTypeClass parent_class;
	void (*finalize) (NoiseMediaArtCache *self);
	gchar* (*get_key) (NoiseMediaArtCache* self, gconstpointer object);
	GdkPixbuf* (*filter_func) (NoiseMediaArtCache* self, GdkPixbuf* pix);
	GdkPixbuf* (*get_image) (NoiseMediaArtCache* self, gconstpointer object);
	void (*get_original_image_async) (NoiseMediaArtCache* self, gconstpointer object, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GdkPixbuf* (*get_original_image_finish) (NoiseMediaArtCache* self, GAsyncResult* _res_);
};

struct _NoiseCoverartCache {
	NoiseMediaArtCache parent_instance;
	NoiseCoverartCachePrivate * priv;
};

struct _NoiseCoverartCacheClass {
	NoiseMediaArtCacheClass parent_class;
};

struct _GnomeMediaKeysIface {
	GTypeInterface parent_iface;
	void (*GrabMediaPlayerKeys) (GnomeMediaKeys* self, const gchar* application, guint32 time, GError** error);
	void (*ReleaseMediaPlayerKeys) (GnomeMediaKeys* self, const gchar* application, GError** error);
};

struct _NoiseMediaKeyListener {
	GObject parent_instance;
	NoiseMediaKeyListenerPrivate * priv;
};

struct _NoiseMediaKeyListenerClass {
	GObjectClass parent_class;
};

struct _NoiseLocalLibrary {
	NoiseLibrary parent_instance;
	NoiseLocalLibraryPrivate * priv;
	NoiseDataBaseUpdater* dbu;
	NoiseFileOperator* fo;
	NoiseGStreamerTagger* tagger;
	GeeTreeSet* _playlists;
	GeeTreeSet* _smart_playlists;
	GeeTreeSet* _medias;
	GeeTreeSet* _searched_medias;
	gint playlists_rowid;
	NoiseStaticPlaylist* p_music;
};

struct _NoiseLocalLibraryClass {
	NoiseLibraryClass parent_class;
};

struct _NoiseLocalMedia {
	NoiseMedia parent_instance;
	NoiseLocalMediaPrivate * priv;
	guint* _year;
	guint* _bitrate;
	guint* _samplerate;
	guint* _length;
	guint* _play_count;
	guint* _skip_count;
	guint* _date_added;
	guint* _last_played;
	guint* _last_modified;
};

struct _NoiseLocalMediaClass {
	NoiseMediaClass parent_class;
};

struct _NoiseWidgetsNavigationArrows {
	GtkBox parent_instance;
	NoiseWidgetsNavigationArrowsPrivate * priv;
};

struct _NoiseWidgetsNavigationArrowsClass {
	GtkBoxClass parent_class;
};

struct _NoiseTopDisplay {
	GtkStack parent_instance;
	NoiseTopDisplayPrivate * priv;
};

struct _NoiseTopDisplayClass {
	GtkStackClass parent_class;
	gboolean (*scale_button_press) (NoiseTopDisplay* self, GdkEventButton* event);
	gboolean (*scale_button_release) (NoiseTopDisplay* self, GdkEventButton* event);
	void (*value_changed) (NoiseTopDisplay* self);
	gboolean (*change_value) (NoiseTopDisplay* self, GtkScrollType scroll, gdouble val);
	void (*player_position_update) (NoiseTopDisplay* self, gint64 position);
};

struct _NoiseInfoPanel {
	GtkEventBox parent_instance;
	NoiseInfoPanelPrivate * priv;
};

struct _NoiseInfoPanelClass {
	GtkEventBoxClass parent_class;
};

struct _GraniteWidgetsEmbeddedAlert {
	GtkEventBox parent_instance;
	GraniteWidgetsEmbeddedAlertPrivate * priv;
};

struct _GraniteWidgetsEmbeddedAlertClass {
	GtkEventBoxClass parent_class;
};

struct _NoiseSimpleOptionChooser {
	GtkEventBox parent_instance;
	NoiseSimpleOptionChooserPrivate * priv;
	GeeLinkedList* items;
	GeeLinkedList* images;
};

struct _NoiseSimpleOptionChooserClass {
	GtkEventBoxClass parent_class;
};

struct _NoisePresetList {
	GtkComboBox parent_instance;
	NoisePresetListPrivate * priv;
	NoiseEqualizerPreset* last_selected_preset;
};

struct _NoisePresetListClass {
	GtkComboBoxClass parent_class;
	void (*listSelectionChange) (NoisePresetList* self);
};

struct _GraniteWidgetsExpanderRenderer {
	GtkCellRenderer parent_instance;
	GraniteWidgetsExpanderRendererPrivate * priv;
	gboolean expanded;
};

struct _GraniteWidgetsExpanderRendererClass {
	GtkCellRendererClass parent_class;
};

typedef enum  {
	GRANITE_WIDGETS_SIDE_BAR_COLUMN_COLUMN_OBJECT,
	GRANITE_WIDGETS_SIDE_BAR_COLUMN_COLUMN_WIDGET,
	GRANITE_WIDGETS_SIDE_BAR_COLUMN_COLUMN_VISIBLE,
	GRANITE_WIDGETS_SIDE_BAR_COLUMN_COLUMN_PIXBUF,
	GRANITE_WIDGETS_SIDE_BAR_COLUMN_COLUMN_TEXT,
	GRANITE_WIDGETS_SIDE_BAR_COLUMN_COLUMN_CLICKABLE
} GraniteWidgetsSideBarColumn;

struct _GraniteWidgetsSideBar {
	GtkTreeView parent_instance;
	GraniteWidgetsSideBarPrivate * priv;
	GtkTreeStore* tree;
	GtkTreeModelFilter* filter;
	gboolean autoExpanded;
};

struct _GraniteWidgetsSideBarClass {
	GtkTreeViewClass parent_class;
};

typedef enum  {
	NOISE_VIEW_WRAPPER_HINT_NONE,
	NOISE_VIEW_WRAPPER_HINT_MUSIC,
	NOISE_VIEW_WRAPPER_HINT_PLAYLIST,
	NOISE_VIEW_WRAPPER_HINT_READ_ONLY_PLAYLIST,
	NOISE_VIEW_WRAPPER_HINT_SMART_PLAYLIST,
	NOISE_VIEW_WRAPPER_HINT_CDROM,
	NOISE_VIEW_WRAPPER_HINT_DEVICE,
	NOISE_VIEW_WRAPPER_HINT_DEVICE_AUDIO,
	NOISE_VIEW_WRAPPER_HINT_DEVICE_PODCAST,
	NOISE_VIEW_WRAPPER_HINT_DEVICE_AUDIOBOOK,
	NOISE_VIEW_WRAPPER_HINT_NETWORK_DEVICE,
	NOISE_VIEW_WRAPPER_HINT_ALBUM_LIST
} NoiseViewWrapperHint;

struct _NoiseSourceListItem {
	GraniteWidgetsSourceListItem parent_instance;
	NoiseSourceListItemPrivate * priv;
	NoiseViewWrapperHint hint;
};

struct _NoiseSourceListItemClass {
	GraniteWidgetsSourceListItemClass parent_class;
};

struct _NoiseSourceListExpandableItem {
	GraniteWidgetsSourceListExpandableItem parent_instance;
	NoiseSourceListExpandableItemPrivate * priv;
	NoiseViewWrapperHint hint;
};

struct _NoiseSourceListExpandableItemClass {
	GraniteWidgetsSourceListExpandableItemClass parent_class;
};

struct _NoisePlayListCategory {
	GraniteWidgetsSourceListExpandableItem parent_instance;
	NoisePlayListCategoryPrivate * priv;
};

struct _NoisePlayListCategoryClass {
	GraniteWidgetsSourceListExpandableItemClass parent_class;
};

struct _NoiseSourceListRoot {
	GraniteWidgetsSourceListExpandableItem parent_instance;
	NoiseSourceListRootPrivate * priv;
};

struct _NoiseSourceListRootClass {
	GraniteWidgetsSourceListExpandableItemClass parent_class;
};

struct _NoiseSourceListView {
	GraniteWidgetsSourceList parent_instance;
	NoiseSourceListViewPrivate * priv;
};

struct _NoiseSourceListViewClass {
	GraniteWidgetsSourceListClass parent_class;
};

struct _NoiseWidgetsStatusBar {
	GtkActionBar parent_instance;
	NoiseWidgetsStatusBarPrivate * priv;
};

struct _NoiseWidgetsStatusBarClass {
	GtkActionBarClass parent_class;
};

struct _GraniteWidgetsRating {
	GtkEventBox parent_instance;
	GraniteWidgetsRatingPrivate * priv;
};

struct _GraniteWidgetsRatingClass {
	GtkEventBoxClass parent_class;
};

struct _GraniteWidgetsRatingRenderer {
	GObject parent_instance;
	GraniteWidgetsRatingRendererPrivate * priv;
};

struct _GraniteWidgetsRatingRendererClass {
	GObjectClass parent_class;
	void (*render) (GraniteWidgetsRatingRenderer* self);
};

struct _GraniteWidgetsRatingMenuItem {
	GtkMenuItem parent_instance;
	GraniteWidgetsRatingMenuItemPrivate * priv;
};

struct _GraniteWidgetsRatingMenuItemClass {
	GtkMenuItemClass parent_class;
};

struct _GraniteWidgetsCellRendererRating {
	GtkCellRendererPixbuf parent_instance;
	GraniteWidgetsCellRendererRatingPrivate * priv;
};

struct _GraniteWidgetsCellRendererRatingClass {
	GtkCellRendererPixbufClass parent_class;
};

struct _SpaceWidget {
	GtkScrolledWindow parent_instance;
	SpaceWidgetPrivate * priv;
};

struct _SpaceWidgetClass {
	GtkScrolledWindowClass parent_class;
};

typedef enum  {
	SPACE_WIDGET_ITEM_COLOR_BLUE,
	SPACE_WIDGET_ITEM_COLOR_ORANGE,
	SPACE_WIDGET_ITEM_COLOR_GREEN,
	SPACE_WIDGET_ITEM_COLOR_RED,
	SPACE_WIDGET_ITEM_COLOR_PURPLE,
	SPACE_WIDGET_ITEM_COLOR_GREY
} SpaceWidgetItemColor;

struct _NoiseWidgetsViewSelector {
	GtkToolItem parent_instance;
	NoiseWidgetsViewSelectorPrivate * priv;
};

struct _NoiseWidgetsViewSelectorClass {
	GtkToolItemClass parent_class;
};

typedef enum  {
	NOISE_WIDGETS_VIEW_SELECTOR_MODE_GRID = 0,
	NOISE_WIDGETS_VIEW_SELECTOR_MODE_LIST = 1,
	NOISE_WIDGETS_VIEW_SELECTOR_MODE_COLUMN = 2
} NoiseWidgetsViewSelectorMode;

struct _NoiseEqualizerPopover {
	GtkPopover parent_instance;
	NoiseEqualizerPopoverPrivate * priv;
};

struct _NoiseEqualizerPopoverClass {
	GtkPopoverClass parent_class;
};

struct _NoiseWidgetsTileView {
	GtkIconView parent_instance;
	NoiseWidgetsTileViewPrivate * priv;
};

struct _NoiseWidgetsTileViewClass {
	GtkIconViewClass parent_class;
};

struct _NoiseFastGrid {
	NoiseWidgetsTileView parent_instance;
	NoiseFastGridPrivate * priv;
	gboolean research_needed;
};

struct _NoiseFastGridClass {
	NoiseWidgetsTileViewClass parent_class;
};

typedef enum  {
	NOISE_FAST_GRID_COLUMN_PIXBUF,
	NOISE_FAST_GRID_COLUMN_TITLE,
	NOISE_FAST_GRID_COLUMN_SUBTITLE,
	NOISE_FAST_GRID_COLUMN_TOOLTIP,
	NOISE_FAST_GRID_COLUMN_N_COLUMNS
} NoiseFastGridColumn;

typedef void (*NoiseFastGridViewSearchFunc) (const gchar* search, GeeHashMap* table, GeeHashMap* showing, void* user_data);
typedef GValue* (*NoiseFastGridModelValueReturnFunc) (gint row, gint column, GObject* o, void* user_data);
typedef gint (*NoiseFastGridSortCompareFunc) (GObject* a, GObject* b, void* user_data);
struct _NoiseFastGridModel {
	GObject parent_instance;
	NoiseFastGridModelPrivate * priv;
};

struct _NoiseFastGridModelClass {
	GObjectClass parent_class;
};

struct _NoiseFastView {
	GtkTreeView parent_instance;
	NoiseFastViewPrivate * priv;
	GeeHashMap* table;
	GeeHashMap* showing;
	gint sort_column_id;
	GtkSortType sort_direction;
	gboolean research_needed;
};

struct _NoiseFastViewClass {
	GtkTreeViewClass parent_class;
};

typedef GValue* (*NoiseFastModelValueReturnFunc) (gint row, gint column, GObject* o, void* user_data);
typedef void (*NoiseFastViewViewSearchFunc) (const gchar* search, GeeHashMap* table, GeeHashMap* showing, void* user_data);
typedef gint (*NoiseFastViewSortCompareFunc) (gint sort_column_id, GtkSortType sort_direction, NoiseMedia* a, NoiseMedia* b, gint index_a, gint index_b, void* user_data);
struct _NoiseFastModel {
	GObject parent_instance;
	NoiseFastModelPrivate * priv;
};

struct _NoiseFastModelClass {
	GObjectClass parent_class;
};

struct _NoiseDataBaseManager {
	GObject parent_instance;
	NoiseDataBaseManagerPrivate * priv;
	SQLHeavyDatabase* database;
};

struct _NoiseDataBaseManagerClass {
	GObjectClass parent_class;
};

struct _NoiseDataBaseUpdater {
	GObject parent_instance;
	NoiseDataBaseUpdaterPrivate * priv;
};

struct _NoiseDataBaseUpdaterClass {
	GObjectClass parent_class;
};

struct _NoiseGStreamerTagger {
	GObject parent_instance;
	NoiseGStreamerTaggerPrivate * priv;
};

struct _NoiseGStreamerTaggerClass {
	GObjectClass parent_class;
};

struct _NoiseStreamer {
	GObject parent_instance;
	NoiseStreamerPrivate * priv;
	GstElement* cdda;
	gboolean set_resume_pos;
};

struct _NoiseStreamerClass {
	GObjectClass parent_class;
};

struct _NoiseCoverImport {
	GObject parent_instance;
	NoiseCoverImportPrivate * priv;
};

struct _NoiseCoverImportClass {
	GObjectClass parent_class;
};

struct _NoiseViewContainer {
	GtkStack parent_instance;
	NoiseViewContainerPrivate * priv;
};

struct _NoiseViewContainerClass {
	GtkStackClass parent_class;
};

struct _NoiseViewWrapper {
	GtkGrid parent_instance;
	NoiseViewWrapperPrivate * priv;
};

struct _NoiseViewWrapperClass {
	GtkGridClass parent_class;
	gboolean (*check_have_media) (NoiseViewWrapper* self);
	void (*select_proper_content_view) (NoiseViewWrapper* self);
	void (*set_no_media_alert) (NoiseViewWrapper* self);
};

typedef enum  {
	NOISE_VIEW_WRAPPER_VIEW_TYPE_GRID = 0,
	NOISE_VIEW_WRAPPER_VIEW_TYPE_LIST = 1,
	NOISE_VIEW_WRAPPER_VIEW_TYPE_ALERT = 2,
	NOISE_VIEW_WRAPPER_VIEW_TYPE_WELCOME = 3,
	NOISE_VIEW_WRAPPER_VIEW_TYPE_NONE = 4
} NoiseViewWrapperViewType;

struct _NoiseMusicViewWrapper {
	NoiseViewWrapper parent_instance;
	NoiseMusicViewWrapperPrivate * priv;
};

struct _NoiseMusicViewWrapperClass {
	NoiseViewWrapperClass parent_class;
};

struct _NoiseDeviceViewWrapper {
	NoiseViewWrapper parent_instance;
	NoiseDeviceViewWrapperPrivate * priv;
};

struct _NoiseDeviceViewWrapperClass {
	NoiseViewWrapperClass parent_class;
	void (*set_device) (NoiseDeviceViewWrapper* self, NoiseDevice* device);
};

struct _NoisePlaylistViewWrapper {
	NoiseViewWrapper parent_instance;
	NoisePlaylistViewWrapperPrivate * priv;
	NoiseTreeViewSetup* tvs;
};

struct _NoisePlaylistViewWrapperClass {
	NoiseViewWrapperClass parent_class;
};

struct _NoiseReadOnlyPlaylistViewWrapper {
	NoiseViewWrapper parent_instance;
	NoiseReadOnlyPlaylistViewWrapperPrivate * priv;
	NoiseTreeViewSetup* tvs;
	gboolean is_queue;
};

struct _NoiseReadOnlyPlaylistViewWrapperClass {
	NoiseViewWrapperClass parent_class;
};

struct _NoiseDeviceView {
	GtkGrid parent_instance;
	NoiseDeviceViewPrivate * priv;
	NoiseDevice* d;
};

struct _NoiseDeviceViewClass {
	GtkGridClass parent_class;
};

struct _NoiseDeviceSummaryWidget {
	GtkEventBox parent_instance;
	NoiseDeviceSummaryWidgetPrivate * priv;
};

struct _NoiseDeviceSummaryWidgetClass {
	GtkEventBoxClass parent_class;
};

struct _NoiseContentViewIface {
	GTypeInterface parent_iface;
	NoiseViewWrapperHint (*get_hint) (NoiseContentView* self);
	GeeCollection* (*get_media) (NoiseContentView* self);
	GeeCollection* (*get_visible_media) (NoiseContentView* self);
	gchar* (*get_statusbar_text) (NoiseContentView* self);
	void (*refilter) (NoiseContentView* self, const gchar* search);
	void (*set_media) (NoiseContentView* self, GeeCollection* new_media);
	void (*add_media) (NoiseContentView* self, GeeCollection* to_add);
	void (*remove_media) (NoiseContentView* self, GeeCollection* to_remove);
	void (*update_media) (NoiseContentView* self, GeeCollection* to_update);
};

struct _NoiseViewTextOverlay {
	GtkOverlay parent_instance;
	NoiseViewTextOverlayPrivate * priv;
};

struct _NoiseViewTextOverlayClass {
	GtkOverlayClass parent_class;
};

struct _NoiseGridLayout {
	NoiseViewTextOverlay parent_instance;
	NoiseGridLayoutPrivate * priv;
};

struct _NoiseGridLayoutClass {
	NoiseViewTextOverlayClass parent_class;
	void (*item_activated) (NoiseGridLayout* self, GObject* object);
	GValue* (*val_func) (NoiseGridLayout* self, gint row, gint column, GObject* o);
	gint (*compare_func) (NoiseGridLayout* self, GObject* a, GObject* b);
	void (*search_func) (NoiseGridLayout* self, const gchar* search, GeeHashMap* table, GeeHashMap* showing);
	GeeCollection* (*get_selected_media) (NoiseGridLayout* self, GObject* obj);
	GdkPixbuf* (*get_pixbuf) (NoiseGridLayout* self, GObject* o);
};

struct _NoiseGridView {
	NoiseGridLayout parent_instance;
	NoiseGridViewPrivate * priv;
};

struct _NoiseGridViewClass {
	NoiseGridLayoutClass parent_class;
};

struct _NoisePopupListView {
	GtkDialog parent_instance;
	NoisePopupListViewPrivate * priv;
};

struct _NoisePopupListViewClass {
	GtkDialogClass parent_class;
};

struct _NoiseListView {
	GtkBox parent_instance;
	NoiseListViewPrivate * priv;
};

struct _NoiseListViewClass {
	GtkBoxClass parent_class;
};

struct _NoiseBrowserColumnModel {
	GObject parent_instance;
	NoiseBrowserColumnModelPrivate * priv;
};

struct _NoiseBrowserColumnModelClass {
	GObjectClass parent_class;
};

typedef enum  {
	NOISE_BROWSER_COLUMN_CATEGORY_RATING,
	NOISE_BROWSER_COLUMN_CATEGORY_GROUPING,
	NOISE_BROWSER_COLUMN_CATEGORY_YEAR,
	NOISE_BROWSER_COLUMN_CATEGORY_GENRE,
	NOISE_BROWSER_COLUMN_CATEGORY_COMPOSER,
	NOISE_BROWSER_COLUMN_CATEGORY_ARTIST,
	NOISE_BROWSER_COLUMN_CATEGORY_ALBUM,
	NOISE_BROWSER_COLUMN_CATEGORY_N_CATEGORIES
} NoiseBrowserColumnCategory;

struct _NoiseBrowserColumn {
	GtkGrid parent_instance;
	NoiseBrowserColumnPrivate * priv;
};

struct _NoiseBrowserColumnClass {
	GtkGridClass parent_class;
};

struct _NoiseColumnBrowser {
	GtkGrid parent_instance;
	NoiseColumnBrowserPrivate * priv;
};

struct _NoiseColumnBrowserClass {
	GtkGridClass parent_class;
};

typedef enum  {
	NOISE_COLUMN_BROWSER_POSITION_AUTOMATIC,
	NOISE_COLUMN_BROWSER_POSITION_LEFT,
	NOISE_COLUMN_BROWSER_POSITION_TOP
} NoiseColumnBrowserPosition;

struct _NoiseMusicColumnBrowser {
	NoiseColumnBrowser parent_instance;
	NoiseMusicColumnBrowserPrivate * priv;
};

struct _NoiseMusicColumnBrowserClass {
	NoiseColumnBrowserClass parent_class;
};

typedef enum  {
	NOISE_LIST_COLUMN_ICON = 0,
	NOISE_LIST_COLUMN_NUMBER,
	NOISE_LIST_COLUMN_TRACK,
	NOISE_LIST_COLUMN_TITLE,
	NOISE_LIST_COLUMN_LENGTH,
	NOISE_LIST_COLUMN_ARTIST,
	NOISE_LIST_COLUMN_ALBUM,
	NOISE_LIST_COLUMN_ALBUM_ARTIST,
	NOISE_LIST_COLUMN_COMPOSER,
	NOISE_LIST_COLUMN_GENRE,
	NOISE_LIST_COLUMN_YEAR,
	NOISE_LIST_COLUMN_GROUPING,
	NOISE_LIST_COLUMN_BITRATE,
	NOISE_LIST_COLUMN_RATING,
	NOISE_LIST_COLUMN_PLAY_COUNT,
	NOISE_LIST_COLUMN_SKIP_COUNT,
	NOISE_LIST_COLUMN_DATE_ADDED,
	NOISE_LIST_COLUMN_LAST_PLAYED,
	NOISE_LIST_COLUMN_BPM,
	NOISE_LIST_COLUMN_FILE_LOCATION,
	NOISE_LIST_COLUMN_FILE_SIZE,
	NOISE_LIST_COLUMN_N_COLUMNS
} NoiseListColumn;

struct _NoiseTreeViewSetup {
	GObject parent_instance;
	NoiseTreeViewSetupPrivate * priv;
};

struct _NoiseTreeViewSetupClass {
	GObjectClass parent_class;
};

struct _NoiseCellDataFunctionHelper {
	GTypeInstance parent_instance;
	volatile int ref_count;
	NoiseCellDataFunctionHelperPrivate * priv;
};

struct _NoiseCellDataFunctionHelperClass {
	GTypeClass parent_class;
	void (*finalize) (NoiseCellDataFunctionHelper *self);
};

struct _NoiseGenericList {
	NoiseFastView parent_instance;
	NoiseGenericListPrivate * priv;
	GtkMenu* column_chooser_menu;
	NoiseViewWrapper* parent_wrapper;
	NoiseTreeViewSetup* tvs;
	gint relative_id;
	gboolean is_current_list;
	gboolean dragging;
	NoiseCellDataFunctionHelper* cell_data_helper;
};

struct _NoiseGenericListClass {
	NoiseFastViewClass parent_class;
	void (*mediaRemoveClicked) (NoiseGenericList* self);
	void (*update_sensitivities) (NoiseGenericList* self);
	void (*updateTreeViewSetup) (NoiseGenericList* self);
	void (*add_column) (NoiseGenericList* self, GtkTreeViewColumn* column, NoiseListColumn type);
};

struct _NoiseContractMenuItem {
	GtkMenuItem parent_instance;
	NoiseContractMenuItemPrivate * priv;
};

struct _NoiseContractMenuItemClass {
	GtkMenuItemClass parent_class;
};

struct _NoiseMusicListView {
	NoiseGenericList parent_instance;
	NoiseMusicListViewPrivate * priv;
};

struct _NoiseMusicListViewClass {
	NoiseGenericListClass parent_class;
	void (*mediaEditorSaved) (NoiseMusicListView* self, GeeCollection* medias);
	void (*mediaMenuQueueClicked) (NoiseMusicListView* self);
	void (*mediaMenuNewPlaylistClicked) (NoiseMusicListView* self);
	void (*onDragDataGet) (NoiseMusicListView* self, GdkDragContext* context, GtkSelectionData* selection_data, guint info, guint time_);
};

struct _NoiseSmartPlaylistEditor {
	GtkDialog parent_instance;
	NoiseSmartPlaylistEditorPrivate * priv;
};

struct _NoiseSmartPlaylistEditorClass {
	GtkDialogClass parent_class;
	void (*add_button_click) (NoiseSmartPlaylistEditor* self);
	void (*close_click) (NoiseSmartPlaylistEditor* self);
	void (*save_click) (NoiseSmartPlaylistEditor* self);
};

struct _NoiseSmartPlaylistEditorQuery {
	GObject parent_instance;
	NoiseSmartPlaylistEditorQueryPrivate * priv;
	GtkGrid* grid;
};

struct _NoiseSmartPlaylistEditorQueryClass {
	GObjectClass parent_class;
	void (*field_changed) (NoiseSmartPlaylistEditorQuery* self, gboolean from_user);
	void (*remove_clicked) (NoiseSmartPlaylistEditorQuery* self);
};

struct _NoisePreferencesWindow {
	GtkDialog parent_instance;
	NoisePreferencesWindowPrivate * priv;
	GtkFileChooserButton* library_filechooser;
};

struct _NoisePreferencesWindowClass {
	GtkDialogClass parent_class;
};

struct _NoiseInstallGstreamerPluginsDialog {
	GtkDialog parent_instance;
	NoiseInstallGstreamerPluginsDialogPrivate * priv;
};

struct _NoiseInstallGstreamerPluginsDialogClass {
	GtkDialogClass parent_class;
};

struct _NoiseMediaEditor {
	GtkDialog parent_instance;
	NoiseMediaEditorPrivate * priv;
};

struct _NoiseMediaEditorClass {
	GtkDialogClass parent_class;
	void (*saveClicked) (NoiseMediaEditor* self);
};

struct _NoiseFieldEditor {
	GtkBox parent_instance;
	NoiseFieldEditorPrivate * priv;
};

struct _NoiseFieldEditorClass {
	GtkBoxClass parent_class;
	void (*entryChanged) (NoiseFieldEditor* self);
	void (*textViewChanged) (NoiseFieldEditor* self);
	void (*spinButtonChanged) (NoiseFieldEditor* self);
	void (*ratingChanged) (NoiseFieldEditor* self, gint new_rating);
	void (*resetClicked) (NoiseFieldEditor* self);
};

struct _NoiseStatsDisplay {
	GtkBox parent_instance;
	NoiseStatsDisplayPrivate * priv;
	gint plays;
	gint skips;
	gint last_played;
};

struct _NoiseStatsDisplayClass {
	GtkBoxClass parent_class;
	void (*resetClicked) (NoiseStatsDisplay* self);
};

struct _NoiseFileNotFoundDialog {
	GtkDialog parent_instance;
	NoiseFileNotFoundDialogPrivate * priv;
};

struct _NoiseFileNotFoundDialogClass {
	GtkDialogClass parent_class;
};

struct _NoiseRemoveFilesDialog {
	GtkDialog parent_instance;
	NoiseRemoveFilesDialogPrivate * priv;
};

struct _NoiseRemoveFilesDialogClass {
	GtkDialogClass parent_class;
};

struct _NoiseNotImportedWindow {
	GtkDialog parent_instance;
	NoiseNotImportedWindowPrivate * priv;
};

struct _NoiseNotImportedWindowClass {
	GtkDialogClass parent_class;
	void (*moveToTrashClick) (NoiseNotImportedWindow* self);
	void (*ignoreClick) (NoiseNotImportedWindow* self);
};

struct _NoiseSetMusicFolderConfirmation {
	GtkDialog parent_instance;
	NoiseSetMusicFolderConfirmationPrivate * priv;
};

struct _NoiseSetMusicFolderConfirmationClass {
	GtkDialogClass parent_class;
};

struct _NoiseTransferFromDeviceDialog {
	GtkWindow parent_instance;
	NoiseTransferFromDeviceDialogPrivate * priv;
};

struct _NoiseTransferFromDeviceDialogClass {
	GtkWindowClass parent_class;
	void (*transferAllToggled) (NoiseTransferFromDeviceDialog* self);
	void (*transferClick) (NoiseTransferFromDeviceDialog* self);
	void (*cancelClick) (NoiseTransferFromDeviceDialog* self);
};

struct _NoiseSyncWarningDialog {
	GtkWindow parent_instance;
	NoiseSyncWarningDialogPrivate * priv;
};

struct _NoiseSyncWarningDialogClass {
	GtkWindowClass parent_class;
};


GType noise_app_get_type (void) G_GNUC_CONST;
#define NOISE_APP_PROGRAM_NAME "Noise"
#define NOISE_APP_COMMENT "Listen to music"
#define NOISE_APP_GENERIC "Music Player"
#define NOISE_APP_KEYWORDS "Noise;Audio;Player;MP3;iPod;Play;Playlist;Media;CD;Phone;Songs;"
#define NOISE_APP_ABOUT_NOISE "About Noise"
#define NOISE_APP_ABOUT_MUSIC "About Music"
gchar* noise_app_get_id (NoiseApp* self);
gchar* noise_app_get_name (NoiseApp* self);
gchar* noise_app_get_desktop_file_name (NoiseApp* self);
NoiseApp* noise_app_new (void);
NoiseApp* noise_app_construct (GType object_type);
GType noise_playback_manager_get_type (void) G_GNUC_CONST;
NoisePlaybackManager* noise_app_get_player (void);
GType noise_library_window_get_type (void) G_GNUC_CONST;
NoiseLibraryWindow* noise_app_get_main_window (void);
GType noise_info_panel_get_type (void) G_GNUC_CONST;
NoiseLibraryWindow* noise_library_window_new (void);
NoiseLibraryWindow* noise_library_window_construct (GType object_type);
void noise_library_window_connect_to_sourcelist_signals (NoiseLibraryWindow* self);
void noise_library_window_build_ui (NoiseLibraryWindow* self);
void noise_library_window_show_notification (NoiseLibraryWindow* self, const gchar* primary_text, const gchar* secondary_text, GdkPixbuf* pixbuf, gint urgency);
void noise_library_window_show_notification_from_media_async (NoiseLibraryWindow* self, NoiseMedia* media, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_library_window_show_notification_from_media_finish (NoiseLibraryWindow* self, GAsyncResult* _res_);
GType noise_view_wrapper_get_type (void) G_GNUC_CONST;
void noise_library_window_set_active_view (NoiseLibraryWindow* self, NoiseViewWrapper* view);
void noise_library_window_remove_view_and_update (NoiseLibraryWindow* self, gint index);
GType noise_source_list_entry_get_type (void) G_GNUC_CONST;
void noise_library_window_update_badge_on_playlist_update (NoiseLibraryWindow* self, NoisePlaylist* p, NoiseSourceListEntry* entry);
void noise_library_window_create_new_playlist (NoiseLibraryWindow* self, NoiseLibrary* library);
GType noise_tree_view_setup_get_type (void) G_GNUC_CONST;
NoiseTreeViewSetup* noise_library_window_get_treeviewsetup_from_playlist (NoiseLibraryWindow* self, NoisePlaylist* p);
void noise_library_window_show_playlist_view (NoiseLibraryWindow* self, NoisePlaylist* p);
void noise_library_window_show_smart_playlist_dialog (NoiseLibraryWindow* self, NoiseSmartPlaylist* smartplaylist);
void noise_library_window_media_played (NoiseLibraryWindow* self, NoiseMedia* m);
void noise_library_window_playback_stopped (NoiseLibraryWindow* self, gint was_playing);
void noise_library_window_playback_started (NoiseLibraryWindow* self);
void noise_library_window_playback_paused (NoiseLibraryWindow* self);
void noise_library_window_play_media (NoiseLibraryWindow* self, gboolean inhibit_notifications);
void noise_library_window_play_next_media (NoiseLibraryWindow* self, gboolean inhibit_notifications);
void noise_library_window_play_previous_media (NoiseLibraryWindow* self, gboolean inhibit_notifications);
void noise_library_window_fileImportMusicClick (NoiseLibraryWindow* self);
void noise_library_window_editPreferencesClick (NoiseLibraryWindow* self);
void noise_library_window_setMusicFolder (NoiseLibraryWindow* self, const gchar* folder);
void noise_library_window_end_of_stream (NoiseLibraryWindow* self);
void noise_library_window_error_occured (NoiseLibraryWindow* self);
void noise_library_window_current_position_update (NoiseLibraryWindow* self, gint64 position);
void noise_library_window_media_not_found (NoiseLibraryWindow* self, gint id);
void noise_library_window_searchFieldActivate (NoiseLibraryWindow* self);
void noise_library_window_dragReceived (NoiseLibraryWindow* self, GdkDragContext* context, gint x, gint y, GtkSelectionData* data, guint info, guint timestamp);
void noise_library_window_doAlert (NoiseLibraryWindow* self, const gchar* title, const gchar* message);
gboolean noise_library_window_minimize_on_close (void);
GType noise_local_library_get_type (void) G_GNUC_CONST;
NoiseLocalLibrary* noise_library_window_get_library_manager (NoiseLibraryWindow* self);
gboolean noise_library_window_get_dragging_from_music (NoiseLibraryWindow* self);
void noise_library_window_set_dragging_from_music (NoiseLibraryWindow* self, gboolean value);
gboolean noise_library_window_get_initialization_finished (NoiseLibraryWindow* self);
gboolean noise_library_window_get_newly_created_playlist (NoiseLibraryWindow* self);
void noise_library_window_set_newly_created_playlist (NoiseLibraryWindow* self, gboolean value);
GtkPaned* noise_library_window_get_main_hpaned (NoiseLibraryWindow* self);
GType noise_source_list_view_get_type (void) G_GNUC_CONST;
NoiseSourceListView* noise_library_window_get_source_list_view (NoiseLibraryWindow* self);
GType noise_view_container_get_type (void) G_GNUC_CONST;
NoiseViewContainer* noise_library_window_get_view_container (NoiseLibraryWindow* self);
GType noise_top_display_get_type (void) G_GNUC_CONST;
NoiseTopDisplay* noise_library_window_get_topDisplay (NoiseLibraryWindow* self);
GType noise_widgets_view_selector_get_type (void) G_GNUC_CONST;
NoiseWidgetsViewSelector* noise_library_window_get_viewSelector (NoiseLibraryWindow* self);
GtkSearchEntry* noise_library_window_get_searchField (NoiseLibraryWindow* self);
GType noise_widgets_status_bar_get_type (void) G_GNUC_CONST;
NoiseWidgetsStatusBar* noise_library_window_get_statusbar (NoiseLibraryWindow* self);
GType noise_streamer_get_type (void) G_GNUC_CONST;
NoisePlaybackManager* noise_playback_manager_new (void);
NoisePlaybackManager* noise_playback_manager_construct (GType object_type);
void noise_playback_manager_queue_media (NoisePlaybackManager* self, GeeCollection* to_queue);
void noise_playback_manager_queue_media_by_id (NoisePlaybackManager* self, GeeCollection* ids);
void noise_playback_manager_unqueue_media (NoisePlaybackManager* self, GeeCollection* to_unqueue);
void noise_playback_manager_unqueue_media_by_id (NoisePlaybackManager* self, GeeCollection* ids);
NoiseMedia* noise_playback_manager_peek_queue (NoisePlaybackManager* self);
NoiseMedia* noise_playback_manager_poll_queue (NoisePlaybackManager* self);
void noise_playback_manager_reset_already_played (NoisePlaybackManager* self);
gboolean noise_playback_manager_playing_queued_song (NoisePlaybackManager* self);
gboolean noise_playback_manager_is_shuffled (NoisePlaybackManager* self);
NoiseMedia* noise_playback_manager_mediaFromCurrentIndex (NoisePlaybackManager* self, gint index_in_current);
GeeCollection* noise_playback_manager_get_current_media_list (NoisePlaybackManager* self);
void noise_playback_manager_clearCurrent (NoisePlaybackManager* self);
void noise_playback_manager_addToCurrent (NoisePlaybackManager* self, NoiseMedia* m);
void noise_playback_manager_set_repeat_mode (NoisePlaybackManager* self, NoiseSettingsRepeat mode);
void noise_playback_manager_set_shuffle_mode (NoisePlaybackManager* self, NoiseSettingsShuffle mode);
void noise_playback_manager_reshuffle (NoisePlaybackManager* self);
NoiseMedia* noise_playback_manager_getNext (NoisePlaybackManager* self, gboolean play);
NoiseMedia* noise_playback_manager_getPrevious (NoisePlaybackManager* self, gboolean play);
void noise_playback_manager_playMedia (NoisePlaybackManager* self, NoiseMedia* m, gboolean use_resume_pos);
void noise_playback_manager_change_gains_thread (NoisePlaybackManager* self);
void noise_playback_manager_stop_playback (NoisePlaybackManager* self);
void noise_playback_manager_start_playback (NoisePlaybackManager* self);
void noise_playback_manager_pause_playback (NoisePlaybackManager* self);
NoiseLibrary* noise_playback_manager_get_library (NoisePlaybackManager* self);
gboolean noise_playback_manager_get_playing (NoisePlaybackManager* self);
gdouble noise_playback_manager_get_volume (NoisePlaybackManager* self);
void noise_playback_manager_set_volume (NoisePlaybackManager* self, gdouble value);
NoiseMedia* noise_playback_manager_get_current_media (NoisePlaybackManager* self);
gint noise_playback_manager_get_current_index (NoisePlaybackManager* self);
void noise_playback_manager_set_current_index (NoisePlaybackManager* self, gint value);
GType noise_file_operator_get_type (void) G_GNUC_CONST;
GType noise_gstreamer_tagger_get_type (void) G_GNUC_CONST;
GType noise_file_operator_import_type_get_type (void) G_GNUC_CONST;
NoiseFileOperator* noise_file_operator_new (void);
NoiseFileOperator* noise_file_operator_construct (GType object_type);
gint noise_file_operator_list_recursive_directory (NoiseFileOperator* self, GFile* music_folder, GeeTreeSet** dirs);
void noise_file_operator_connect_to_manager (NoiseFileOperator* self);
void noise_file_operator_resetProgress (NoiseFileOperator* self, gint items);
void noise_file_operator_save_media (NoiseFileOperator* self, GeeCollection* to_save, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_file_operator_save_media_finish (NoiseFileOperator* self, GAsyncResult* _res_);
gboolean noise_file_operator_update_file_hierarchy (NoiseFileOperator* self, NoiseMedia* s, gboolean delete_old, gboolean emit_update);
void noise_file_operator_remove_media (NoiseFileOperator* self, GeeCollection* toRemove);
gchar* noise_file_operator_get_extension (NoiseFileOperator* self, const gchar* name);
void noise_file_operator_import_files (NoiseFileOperator* self, GeeCollection* files, NoiseFileOperatorImportType type);
void noise_file_operator_copy_imports_async (NoiseFileOperator* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_file_operator_copy_imports_finish (NoiseFileOperator* self, GAsyncResult* _res_);
GType noise_lyric_fetcher_get_type (void) G_GNUC_CONST;
void noise_lyric_fetcher_fetch_lyrics_async (NoiseLyricFetcher* self, NoiseMedia* m, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* noise_lyric_fetcher_fetch_lyrics_finish (NoiseLyricFetcher* self, GAsyncResult* _res_);
NoiseLyricFetcher* noise_lyric_fetcher_new (void);
NoiseLyricFetcher* noise_lyric_fetcher_construct (GType object_type);
gpointer noise_media_art_cache_ref (gpointer instance);
void noise_media_art_cache_unref (gpointer instance);
GParamSpec* noise_param_spec_media_art_cache (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void noise_value_set_media_art_cache (GValue* value, gpointer v_object);
void noise_value_take_media_art_cache (GValue* value, gpointer v_object);
gpointer noise_value_get_media_art_cache (const GValue* value);
GType noise_media_art_cache_get_type (void) G_GNUC_CONST;
NoiseMediaArtCache* noise_media_art_cache_construct (GType object_type, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* folder_name);
gchar* noise_media_art_cache_get_key (NoiseMediaArtCache* self, gconstpointer object);
GdkPixbuf* noise_media_art_cache_filter_func (NoiseMediaArtCache* self, GdkPixbuf* pix);
gboolean noise_media_art_cache_has_image (NoiseMediaArtCache* self, gconstpointer object);
GFile* noise_media_art_cache_get_cached_image_file (NoiseMediaArtCache* self, gconstpointer object);
void noise_media_art_cache_cache_image_async (NoiseMediaArtCache* self, gconstpointer object, GdkPixbuf* image, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_media_art_cache_cache_image_finish (NoiseMediaArtCache* self, GAsyncResult* _res_);
void noise_media_art_cache_cache_image_from_file_async (NoiseMediaArtCache* self, gconstpointer object, GFile* image_file, GCancellable* c, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_media_art_cache_cache_image_from_file_finish (NoiseMediaArtCache* self, GAsyncResult* _res_);
GdkPixbuf* noise_media_art_cache_decache_image (NoiseMediaArtCache* self, gconstpointer object);
GdkPixbuf* noise_media_art_cache_get_image (NoiseMediaArtCache* self, gconstpointer object);
GdkPixbuf* noise_media_art_cache_get_image_from_key (NoiseMediaArtCache* self, const gchar* key) G_GNUC_DEPRECATED;
void noise_media_art_cache_get_image_async (NoiseMediaArtCache* self, gconstpointer object, gboolean lookup_file, GAsyncReadyCallback _callback_, gpointer _user_data_);
GdkPixbuf* noise_media_art_cache_get_image_finish (NoiseMediaArtCache* self, GAsyncResult* _res_);
void noise_media_art_cache_get_original_image_async (NoiseMediaArtCache* self, gconstpointer object, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
GdkPixbuf* noise_media_art_cache_get_original_image_finish (NoiseMediaArtCache* self, GAsyncResult* _res_);
void noise_media_art_cache_queue_notify (NoiseMediaArtCache* self);
GType noise_coverart_cache_get_type (void) G_GNUC_CONST;
NoiseCoverartCache* noise_coverart_cache_new (void);
NoiseCoverartCache* noise_coverart_cache_construct (GType object_type);
GdkPixbuf* noise_coverart_cache_get_album_cover (NoiseCoverartCache* self, NoiseAlbum* album) G_GNUC_DEPRECATED;
GdkPixbuf* noise_coverart_cache_get_cover (NoiseCoverartCache* self, NoiseMedia* m);
GdkPixbuf* noise_coverart_cache_get_original_cover (NoiseCoverartCache* self, NoiseMedia* m);
void noise_coverart_cache_fetch_all_cover_art_async (NoiseCoverartCache* self, GeeCollection* media, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_coverart_cache_fetch_all_cover_art_finish (NoiseCoverartCache* self, GAsyncResult* _res_);
void noise_coverart_cache_load_for_media_async (NoiseCoverartCache* self, GeeCollection* media, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_coverart_cache_load_for_media_finish (NoiseCoverartCache* self, GAsyncResult* _res_);
void noise_coverart_cache_fetch_folder_images_async (NoiseCoverartCache* self, GeeCollection* media, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_coverart_cache_fetch_folder_images_finish (NoiseCoverartCache* self, GAsyncResult* _res_);
NoiseCoverartCache* noise_coverart_cache_get_instance (void);
GType gnome_media_keys_proxy_get_type (void) G_GNUC_CONST;
guint gnome_media_keys_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType gnome_media_keys_get_type (void) G_GNUC_CONST;
void gnome_media_keys_GrabMediaPlayerKeys (GnomeMediaKeys* self, const gchar* application, guint32 time, GError** error);
void gnome_media_keys_ReleaseMediaPlayerKeys (GnomeMediaKeys* self, const gchar* application, GError** error);
GType noise_media_key_listener_get_type (void) G_GNUC_CONST;
void noise_media_key_listener_init (NoiseMediaKeyListener* self);
void noise_media_key_listener_releaseMediaKeys (NoiseMediaKeyListener* self);
NoiseMediaKeyListener* noise_media_key_listener_new (void);
NoiseMediaKeyListener* noise_media_key_listener_construct (GType object_type);
NoiseMediaKeyListener* noise_media_key_listener_get_instance (void);
GType noise_data_base_updater_get_type (void) G_GNUC_CONST;
NoiseLocalLibrary* noise_local_library_new (void);
NoiseLocalLibrary* noise_local_library_construct (GType object_type);
gboolean noise_local_library_doProgressNotificationWithTimeout (NoiseLocalLibrary* self);
void noise_local_library_remove_all_static_playlists (NoiseLocalLibrary* self);
void noise_local_library_set_music_folder (NoiseLocalLibrary* self, const gchar* folder, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_local_library_set_music_folder_finish (NoiseLocalLibrary* self, GAsyncResult* _res_);
void noise_local_library_add_folder_to_library (NoiseLocalLibrary* self, GeeCollection* folders);
void noise_local_library_rescan_music_folder (NoiseLocalLibrary* self);
void noise_local_library_play_files (NoiseLocalLibrary* self, GFile** files, int files_length1);
void noise_local_library_playlist_updated (NoiseLocalLibrary* self, NoiseStaticPlaylist* p, const gchar* old_name);
void noise_local_library_save_smart_playlists (NoiseLocalLibrary* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_local_library_save_smart_playlists_finish (NoiseLocalLibrary* self, GAsyncResult* _res_);
void noise_local_library_smart_playlist_updated (NoiseLocalLibrary* self, NoiseSmartPlaylist* p, const gchar* old_name);
void noise_local_library_clear_medias (NoiseLocalLibrary* self);
GeeTreeSet* noise_local_library_answer_to_device_sync (NoiseLocalLibrary* self, NoiseDevice* device);
NoiseLibraryWindow* noise_local_library_get_lw (NoiseLocalLibrary* self);
gboolean noise_local_library_get_main_directory_set (NoiseLocalLibrary* self);
GType noise_local_media_get_type (void) G_GNUC_CONST;
NoiseLocalMedia* noise_local_media_new (gint rowid);
NoiseLocalMedia* noise_local_media_construct (GType object_type, gint rowid);
GType noise_widgets_navigation_arrows_get_type (void) G_GNUC_CONST;
NoiseWidgetsNavigationArrows* noise_widgets_navigation_arrows_new (void);
NoiseWidgetsNavigationArrows* noise_widgets_navigation_arrows_construct (GType object_type);
gboolean noise_widgets_navigation_arrows_get_can_go_back (NoiseWidgetsNavigationArrows* self);
void noise_widgets_navigation_arrows_set_can_go_back (NoiseWidgetsNavigationArrows* self, gboolean value);
gboolean noise_widgets_navigation_arrows_get_can_go_next (NoiseWidgetsNavigationArrows* self);
void noise_widgets_navigation_arrows_set_can_go_next (NoiseWidgetsNavigationArrows* self, gboolean value);
NoiseTopDisplay* noise_top_display_new (void);
NoiseTopDisplay* noise_top_display_construct (GType object_type);
GType noise_fast_view_get_type (void) G_GNUC_CONST;
GType noise_generic_list_get_type (void) G_GNUC_CONST;
GType noise_music_list_view_get_type (void) G_GNUC_CONST;
void noise_top_display_set_list_view (NoiseTopDisplay* self, NoiseMusicListView* list_view);
void noise_top_display_set_progress_value (NoiseTopDisplay* self, gdouble progress);
void noise_top_display_set_max_time (NoiseTopDisplay* self, gdouble max);
void noise_top_display_set_current_time (NoiseTopDisplay* self, gdouble val);
gdouble noise_top_display_get_scale_value (NoiseTopDisplay* self);
gboolean noise_top_display_scale_button_press (NoiseTopDisplay* self, GdkEventButton* event);
gboolean noise_top_display_scale_button_release (NoiseTopDisplay* self, GdkEventButton* event);
gdouble noise_top_display_get_current_time (NoiseTopDisplay* self);
void noise_top_display_value_changed (NoiseTopDisplay* self);
gboolean noise_top_display_change_value (NoiseTopDisplay* self, GtkScrollType scroll, gdouble val);
void noise_top_display_player_position_update (NoiseTopDisplay* self, gint64 position);
void noise_top_display_set_media (NoiseTopDisplay* self, NoiseMedia* current_media);
NoiseInfoPanel* noise_info_panel_new (void);
NoiseInfoPanel* noise_info_panel_construct (GType object_type);
gint noise_info_panel_add_view (NoiseInfoPanel* self, GtkWidget* view);
NoiseMedia* noise_info_panel_get_current_media (NoiseInfoPanel* self);
gboolean noise_info_panel_get_can_show_up (NoiseInfoPanel* self);
GType granite_widgets_embedded_alert_get_type (void) G_GNUC_CONST;
GraniteWidgetsEmbeddedAlert* granite_widgets_embedded_alert_new (void);
GraniteWidgetsEmbeddedAlert* granite_widgets_embedded_alert_construct (GType object_type);
void granite_widgets_embedded_alert_set_alert (GraniteWidgetsEmbeddedAlert* self, const gchar* primary_text, const gchar* secondary_text, GtkAction** actions, int actions_length1, gboolean show_icon, GtkMessageType type);
gboolean granite_widgets_embedded_alert_get_show_icon (GraniteWidgetsEmbeddedAlert* self);
void granite_widgets_embedded_alert_set_show_icon (GraniteWidgetsEmbeddedAlert* self, gboolean value);
gboolean granite_widgets_embedded_alert_get_working (GraniteWidgetsEmbeddedAlert* self);
void granite_widgets_embedded_alert_set_working (GraniteWidgetsEmbeddedAlert* self, gboolean value);
const gchar* granite_widgets_embedded_alert_get_primary_text (GraniteWidgetsEmbeddedAlert* self);
void granite_widgets_embedded_alert_set_primary_text (GraniteWidgetsEmbeddedAlert* self, const gchar* value);
const gchar* granite_widgets_embedded_alert_get_secondary_text (GraniteWidgetsEmbeddedAlert* self);
void granite_widgets_embedded_alert_set_secondary_text (GraniteWidgetsEmbeddedAlert* self, const gchar* value);
GtkMessageType granite_widgets_embedded_alert_get_message_type (GraniteWidgetsEmbeddedAlert* self);
void granite_widgets_embedded_alert_set_message_type (GraniteWidgetsEmbeddedAlert* self, GtkMessageType value);
GtkAction** granite_widgets_embedded_alert_get_actions (GraniteWidgetsEmbeddedAlert* self, int* result_length1);
void granite_widgets_embedded_alert_set_actions (GraniteWidgetsEmbeddedAlert* self, GtkAction** value, int value_length1);
gboolean granite_widgets_embedded_alert_get_buttons_visible (GraniteWidgetsEmbeddedAlert* self);
void granite_widgets_embedded_alert_set_buttons_visible (GraniteWidgetsEmbeddedAlert* self, gboolean value);
GType noise_simple_option_chooser_get_type (void) G_GNUC_CONST;
NoiseSimpleOptionChooser* noise_simple_option_chooser_new (gboolean menu_only_mode);
NoiseSimpleOptionChooser* noise_simple_option_chooser_construct (GType object_type, gboolean menu_only_mode);
void noise_simple_option_chooser_setOption (NoiseSimpleOptionChooser* self, gint index, gboolean notify);
gint noise_simple_option_chooser_appendItem (NoiseSimpleOptionChooser* self, const gchar* text, GtkImage* image, const gchar* tooltip);
gint noise_simple_option_chooser_get_current_option (NoiseSimpleOptionChooser* self);
GType noise_preset_list_get_type (void) G_GNUC_CONST;
NoisePresetList* noise_preset_list_new (void);
NoisePresetList* noise_preset_list_construct (GType object_type);
void noise_preset_list_buildUI (NoisePresetList* self);
void noise_preset_list_addAutomaticMode (NoisePresetList* self);
void noise_preset_list_addSeparator (NoisePresetList* self);
void noise_preset_list_addPreset (NoisePresetList* self, NoiseEqualizerPreset* ep);
void noise_preset_list_removeCurrentPreset (NoisePresetList* self);
void noise_preset_list_listSelectionChange (NoisePresetList* self);
void noise_preset_list_selectAutomaticPreset (NoisePresetList* self);
void noise_preset_list_selectPreset (NoisePresetList* self, const gchar* preset_name);
NoiseEqualizerPreset* noise_preset_list_getSelectedPreset (NoisePresetList* self);
GeeCollection* noise_preset_list_getPresets (NoisePresetList* self);
gboolean noise_preset_list_get_automatic_chosen (NoisePresetList* self);
GType granite_widgets_expander_renderer_get_type (void) G_GNUC_CONST;
extern gint granite_widgets_expander_renderer_EXPANDER_SIZE;
GraniteWidgetsExpanderRenderer* granite_widgets_expander_renderer_new (void);
GraniteWidgetsExpanderRenderer* granite_widgets_expander_renderer_construct (GType object_type);
GType granite_widgets_side_bar_column_get_type (void) G_GNUC_CONST;
GType granite_widgets_side_bar_get_type (void) G_GNUC_CONST;
GraniteWidgetsSideBar* granite_widgets_side_bar_new (void);
GraniteWidgetsSideBar* granite_widgets_side_bar_construct (GType object_type);
void granite_widgets_side_bar_spacerDataFunc (GraniteWidgetsSideBar* self, GtkCellLayout* layout, GtkCellRenderer* renderer, GtkTreeModel* model, GtkTreeIter* iter);
void granite_widgets_side_bar_secondarySpacerDataFunc (GraniteWidgetsSideBar* self, GtkCellLayout* layout, GtkCellRenderer* renderer, GtkTreeModel* model, GtkTreeIter* iter);
void granite_widgets_side_bar_pixCellDataFunc (GraniteWidgetsSideBar* self, GtkCellLayout* layout, GtkCellRenderer* renderer, GtkTreeModel* model, GtkTreeIter* iter);
void granite_widgets_side_bar_textCellDataFunc (GraniteWidgetsSideBar* self, GtkCellLayout* layout, GtkCellRenderer* renderer, GtkTreeModel* model, GtkTreeIter* iter);
void granite_widgets_side_bar_clickableCellDataFunc (GraniteWidgetsSideBar* self, GtkCellLayout* layout, GtkCellRenderer* renderer, GtkTreeModel* model, GtkTreeIter* iter);
void granite_widgets_side_bar_expanderCellDataFunc (GraniteWidgetsSideBar* self, GtkCellLayout* layout, GtkCellRenderer* renderer, GtkTreeModel* model, GtkTreeIter* iter);
void granite_widgets_side_bar_addItem (GraniteWidgetsSideBar* self, GtkTreeIter* parent, GObject* o, GtkWidget* w, GdkPixbuf* pixbuf, const gchar* text, GdkPixbuf* clickable, GtkTreeIter* result);
gboolean granite_widgets_side_bar_removeItem (GraniteWidgetsSideBar* self, GtkTreeIter* iter);
void granite_widgets_side_bar_setVisibility (GraniteWidgetsSideBar* self, GtkTreeIter* it, gboolean val);
void granite_widgets_side_bar_setName (GraniteWidgetsSideBar* self, GtkTreeIter* it, const gchar* name);
gboolean granite_widgets_side_bar_setNameFromObject (GraniteWidgetsSideBar* self, GtkTreeIter* parent, GObject* o, const gchar* name);
GtkTreeIter* granite_widgets_side_bar_getSelectedIter (GraniteWidgetsSideBar* self);
void granite_widgets_side_bar_setSelectedIter (GraniteWidgetsSideBar* self, GtkTreeIter* iter);
gboolean granite_widgets_side_bar_expandItem (GraniteWidgetsSideBar* self, GtkTreeIter* iter, gboolean expanded);
gboolean granite_widgets_side_bar_item_expanded (GraniteWidgetsSideBar* self, GtkTreeIter* iter);
GObject* granite_widgets_side_bar_getObject (GraniteWidgetsSideBar* self, GtkTreeIter* iter);
GtkWidget* granite_widgets_side_bar_getWidget (GraniteWidgetsSideBar* self, GtkTreeIter* iter);
GtkWidget* granite_widgets_side_bar_getSelectedWidget (GraniteWidgetsSideBar* self);
GObject* granite_widgets_side_bar_getSelectedObject (GraniteWidgetsSideBar* self);
void granite_widgets_side_bar_selectionChange (GraniteWidgetsSideBar* self);
GtkTreeIter* granite_widgets_side_bar_convertToFilter (GraniteWidgetsSideBar* self, GtkTreeIter* child);
GtkTreeIter* granite_widgets_side_bar_convertToChild (GraniteWidgetsSideBar* self, GtkTreeIter* filt);
GType noise_source_list_item_get_type (void) G_GNUC_CONST;
GType noise_view_wrapper_hint_get_type (void) G_GNUC_CONST;
NoiseSourceListItem* noise_source_list_item_new (gint page_number, const gchar* name, NoiseViewWrapperHint hint, GIcon* icon, GIcon* activatable_icon);
NoiseSourceListItem* noise_source_list_item_construct (GType object_type, gint page_number, const gchar* name, NoiseViewWrapperHint hint, GIcon* icon, GIcon* activatable_icon);
gint noise_source_list_item_get_page_number (NoiseSourceListItem* self);
void noise_source_list_item_set_page_number (NoiseSourceListItem* self, gint value);
GType noise_source_list_expandable_item_get_type (void) G_GNUC_CONST;
NoiseSourceListExpandableItem* noise_source_list_expandable_item_new (gint page_number, const gchar* name, NoiseViewWrapperHint hint, GIcon* icon, GIcon* activatable_icon, GObject* give_more_information);
NoiseSourceListExpandableItem* noise_source_list_expandable_item_construct (GType object_type, gint page_number, const gchar* name, NoiseViewWrapperHint hint, GIcon* icon, GIcon* activatable_icon, GObject* give_more_information);
gint noise_source_list_expandable_item_get_page_number (NoiseSourceListExpandableItem* self);
void noise_source_list_expandable_item_set_page_number (NoiseSourceListExpandableItem* self, gint value);
GType noise_play_list_category_get_type (void) G_GNUC_CONST;
NoisePlayListCategory* noise_play_list_category_new (const gchar* name);
NoisePlayListCategory* noise_play_list_category_construct (GType object_type, const gchar* name);
GType noise_source_list_root_get_type (void) G_GNUC_CONST;
NoiseSourceListRoot* noise_source_list_root_new (void);
NoiseSourceListRoot* noise_source_list_root_construct (GType object_type);
NoiseSourceListView* noise_source_list_view_new (void);
NoiseSourceListView* noise_source_list_view_construct (GType object_type);
void noise_source_list_view_change_playlist_category_visibility (NoiseSourceListView* self, gboolean visible);
NoiseSourceListEntry* noise_source_list_view_add_item (NoiseSourceListView* self, gint page_number, const gchar* name, NoiseViewWrapperHint hint, GIcon* icon, GIcon* activatable_icon, NoiseSourceListExpandableItem* into_expandable, GObject* give_more_information);
void noise_source_list_view_remove_playlist (NoiseSourceListView* self, gint page_number);
GeeCollection* noise_source_list_view_remove_device (NoiseSourceListView* self, gint page_number);
gint noise_source_list_view_get_device_from_item (NoiseSourceListView* self, NoiseSourceListExpandableItem* item);
void noise_source_list_view_enumerate_children_pages (NoiseSourceListView* self, NoiseSourceListExpandableItem* exp_item, GeeTreeSet** pages);
void noise_source_list_view_enumerate_children_items (NoiseSourceListView* self, NoiseSourceListExpandableItem* exp_item, GeeTreeSet** pages);
void noise_source_list_view_change_playlist_name (NoiseSourceListView* self, gint page_number, const gchar* new_name);
void noise_source_list_view_change_device_name (NoiseSourceListView* self, gint page_number, const gchar* new_name);
NoiseWidgetsStatusBar* noise_widgets_status_bar_new (NoiseLibraryWindow* lw);
NoiseWidgetsStatusBar* noise_widgets_status_bar_construct (GType object_type, NoiseLibraryWindow* lw);
void noise_widgets_status_bar_set_info (NoiseWidgetsStatusBar* self, const gchar* message);
void noise_widgets_status_bar_update_sensitivities (NoiseWidgetsStatusBar* self);
GtkWidget* noise_widgets_status_bar_get_playlist_item (NoiseWidgetsStatusBar* self);
GtkWidget* noise_widgets_status_bar_get_shuffle_item (NoiseWidgetsStatusBar* self);
GtkWidget* noise_widgets_status_bar_get_repeat_item (NoiseWidgetsStatusBar* self);
GtkWidget* noise_widgets_status_bar_get_equalizer_item (NoiseWidgetsStatusBar* self);
GtkWidget* noise_widgets_status_bar_get_info_panel_item (NoiseWidgetsStatusBar* self);
GType granite_widgets_rating_get_type (void) G_GNUC_CONST;
GraniteWidgetsRating* granite_widgets_rating_new (gboolean centered, GtkIconSize size, gboolean symbolic);
GraniteWidgetsRating* granite_widgets_rating_construct (GType object_type, gboolean centered, GtkIconSize size, gboolean symbolic);
gboolean granite_widgets_rating_get_symbolic (GraniteWidgetsRating* self);
void granite_widgets_rating_set_symbolic (GraniteWidgetsRating* self, gboolean value);
GtkIconSize granite_widgets_rating_get_icon_size (GraniteWidgetsRating* self);
void granite_widgets_rating_set_icon_size (GraniteWidgetsRating* self, GtkIconSize value);
gint granite_widgets_rating_get_n_stars (GraniteWidgetsRating* self);
void granite_widgets_rating_set_n_stars (GraniteWidgetsRating* self, gint value);
gint granite_widgets_rating_get_star_spacing (GraniteWidgetsRating* self);
void granite_widgets_rating_set_star_spacing (GraniteWidgetsRating* self, gint value);
gint granite_widgets_rating_get_rating (GraniteWidgetsRating* self);
void granite_widgets_rating_set_rating (GraniteWidgetsRating* self, gint value);
gdouble granite_widgets_rating_get_rating_offset (GraniteWidgetsRating* self);
void granite_widgets_rating_set_rating_offset (GraniteWidgetsRating* self, gdouble value);
gint granite_widgets_rating_get_item_width (GraniteWidgetsRating* self);
gboolean granite_widgets_rating_get_centered (GraniteWidgetsRating* self);
void granite_widgets_rating_set_centered (GraniteWidgetsRating* self, gboolean value);
GType granite_widgets_rating_renderer_get_type (void) G_GNUC_CONST;
GraniteWidgetsRatingRenderer* granite_widgets_rating_renderer_new (GtkIconSize icon_size, gboolean symbolic, GtkStyleContext* context);
GraniteWidgetsRatingRenderer* granite_widgets_rating_renderer_construct (GType object_type, GtkIconSize icon_size, gboolean symbolic, GtkStyleContext* context);
gint granite_widgets_rating_renderer_get_new_rating (GraniteWidgetsRatingRenderer* self, gdouble x);
gboolean granite_widgets_rating_renderer_get_delayed_render_mode (GraniteWidgetsRatingRenderer* self);
void granite_widgets_rating_renderer_set_delayed_render_mode (GraniteWidgetsRatingRenderer* self, gboolean value);
GdkPixbuf* granite_widgets_rating_renderer_get_canvas (GraniteWidgetsRatingRenderer* self);
guint granite_widgets_rating_renderer_get_rating (GraniteWidgetsRatingRenderer* self);
void granite_widgets_rating_renderer_set_rating (GraniteWidgetsRatingRenderer* self, guint value);
gint granite_widgets_rating_renderer_get_n_stars (GraniteWidgetsRatingRenderer* self);
void granite_widgets_rating_renderer_set_n_stars (GraniteWidgetsRatingRenderer* self, gint value);
gint granite_widgets_rating_renderer_get_star_spacing (GraniteWidgetsRatingRenderer* self);
void granite_widgets_rating_renderer_set_star_spacing (GraniteWidgetsRatingRenderer* self, gint value);
gint granite_widgets_rating_renderer_get_width (GraniteWidgetsRatingRenderer* self);
gint granite_widgets_rating_renderer_get_height (GraniteWidgetsRatingRenderer* self);
gint granite_widgets_rating_renderer_get_item_width (GraniteWidgetsRatingRenderer* self);
gint granite_widgets_rating_renderer_get_item_height (GraniteWidgetsRatingRenderer* self);
gdouble granite_widgets_rating_renderer_get_rating_offset (GraniteWidgetsRatingRenderer* self);
void granite_widgets_rating_renderer_set_rating_offset (GraniteWidgetsRatingRenderer* self, gdouble value);
gboolean granite_widgets_rating_renderer_get_symbolic (GraniteWidgetsRatingRenderer* self);
void granite_widgets_rating_renderer_set_symbolic (GraniteWidgetsRatingRenderer* self, gboolean value);
GtkIconSize granite_widgets_rating_renderer_get_icon_size (GraniteWidgetsRatingRenderer* self);
void granite_widgets_rating_renderer_set_icon_size (GraniteWidgetsRatingRenderer* self, GtkIconSize value);
GtkStyleContext* granite_widgets_rating_renderer_get_style_context (GraniteWidgetsRatingRenderer* self);
void granite_widgets_rating_renderer_set_style_context (GraniteWidgetsRatingRenderer* self, GtkStyleContext* value);
GType granite_widgets_rating_menu_item_get_type (void) G_GNUC_CONST;
GraniteWidgetsRatingMenuItem* granite_widgets_rating_menu_item_new (void);
GraniteWidgetsRatingMenuItem* granite_widgets_rating_menu_item_construct (GType object_type);
GraniteWidgetsRating* granite_widgets_rating_menu_item_get_rating (GraniteWidgetsRatingMenuItem* self);
gint granite_widgets_rating_menu_item_get_rating_value (GraniteWidgetsRatingMenuItem* self);
void granite_widgets_rating_menu_item_set_rating_value (GraniteWidgetsRatingMenuItem* self, gint value);
GType granite_widgets_cell_renderer_rating_get_type (void) G_GNUC_CONST;
GraniteWidgetsCellRendererRating* granite_widgets_cell_renderer_rating_new (GtkIconSize icon_size);
GraniteWidgetsCellRendererRating* granite_widgets_cell_renderer_rating_construct (GType object_type, GtkIconSize icon_size);
gint granite_widgets_cell_renderer_rating_get_star_spacing (GraniteWidgetsCellRendererRating* self);
void granite_widgets_cell_renderer_rating_set_star_spacing (GraniteWidgetsCellRendererRating* self, gint value);
guint granite_widgets_cell_renderer_rating_get_rating (GraniteWidgetsCellRendererRating* self);
void granite_widgets_cell_renderer_rating_set_rating (GraniteWidgetsCellRendererRating* self, guint value);
gint granite_widgets_cell_renderer_rating_get_n_stars (GraniteWidgetsCellRendererRating* self);
void granite_widgets_cell_renderer_rating_set_n_stars (GraniteWidgetsCellRendererRating* self, gint value);
GType space_widget_get_type (void) G_GNUC_CONST;
GType space_widget_item_color_get_type (void) G_GNUC_CONST;
extern GtkCssProvider* space_widget_style_provider;
SpaceWidget* space_widget_new (guint64 size);
SpaceWidget* space_widget_construct (GType object_type, guint64 size);
void space_widget_set_sync_button_sensitive (SpaceWidget* self, gboolean val);
void space_widget_set_size (SpaceWidget* self, guint64 size);
gint space_widget_add_item (SpaceWidget* self, const gchar* name, guint64 size, SpaceWidgetItemColor color);
void space_widget_update_item_size (SpaceWidget* self, gint index, guint64 size);
GType noise_widgets_view_selector_mode_get_type (void) G_GNUC_CONST;
NoiseWidgetsViewSelector* noise_widgets_view_selector_new (void);
NoiseWidgetsViewSelector* noise_widgets_view_selector_construct (GType object_type);
void noise_widgets_view_selector_set_sensitive (NoiseWidgetsViewSelector* self, gboolean sensitive);
gboolean noise_widgets_view_selector_get_sensitive (NoiseWidgetsViewSelector* self);
gboolean noise_widgets_view_selector_get_column_browser_toggle_active (NoiseWidgetsViewSelector* self);
void noise_widgets_view_selector_set_column_browser_toggle_active (NoiseWidgetsViewSelector* self, gboolean active);
gboolean noise_widgets_view_selector_get_column_browser_toggle_visible (NoiseWidgetsViewSelector* self);
void noise_widgets_view_selector_set_column_browser_toggle_visible (NoiseWidgetsViewSelector* self, gboolean val);
NoiseWidgetsViewSelectorMode noise_widgets_view_selector_get_selected (NoiseWidgetsViewSelector* self);
void noise_widgets_view_selector_set_selected (NoiseWidgetsViewSelector* self, NoiseWidgetsViewSelectorMode value);
GType noise_equalizer_popover_get_type (void) G_GNUC_CONST;
NoiseEqualizerPopover* noise_equalizer_popover_new (void);
NoiseEqualizerPopover* noise_equalizer_popover_construct (GType object_type);
gboolean noise_equalizer_popover_verify_preset_name (NoiseEqualizerPopover* self, const gchar* preset_name);
GType noise_widgets_tile_view_get_type (void) G_GNUC_CONST;
NoiseWidgetsTileView* noise_widgets_tile_view_new (void);
NoiseWidgetsTileView* noise_widgets_tile_view_construct (GType object_type);
void noise_widgets_tile_view_set_image_column (NoiseWidgetsTileView* self, gint value);
void noise_widgets_tile_view_set_title_column (NoiseWidgetsTileView* self, gint value);
void noise_widgets_tile_view_set_subtitle_column (NoiseWidgetsTileView* self, gint value);
GType noise_fast_grid_get_type (void) G_GNUC_CONST;
GType noise_fast_grid_column_get_type (void) G_GNUC_CONST;
NoiseFastGrid* noise_fast_grid_new (void);
NoiseFastGrid* noise_fast_grid_construct (GType object_type);
void noise_fast_grid_set_search_func (NoiseFastGrid* self, NoiseFastGridViewSearchFunc func, void* func_target);
GeeMap* noise_fast_grid_get_table (NoiseFastGrid* self);
GeeMap* noise_fast_grid_get_visible_table (NoiseFastGrid* self);
gint noise_fast_grid_get_index_from_iter (NoiseFastGrid* self, GtkTreeIter* iter);
GObject* noise_fast_grid_get_object_from_index (NoiseFastGrid* self, gint index);
void noise_fast_grid_set_value_func (NoiseFastGrid* self, NoiseFastGridModelValueReturnFunc func, void* func_target);
void noise_fast_grid_set_table (NoiseFastGrid* self, GeeHashMap* table, gboolean do_resort);
void noise_fast_grid_remove_objects (NoiseFastGrid* self, GeeCollection* objects);
void noise_fast_grid_add_objects (NoiseFastGrid* self, GeeCollection* objects);
void noise_fast_grid_do_search (NoiseFastGrid* self, const gchar* search);
void noise_fast_grid_redraw_row (NoiseFastGrid* self, gint row_index);
void noise_fast_grid_set_compare_func (NoiseFastGrid* self, NoiseFastGridSortCompareFunc func, void* func_target);
void noise_fast_grid_resort (NoiseFastGrid* self);
void noise_fast_grid_quicksort (NoiseFastGrid* self, gint start, gint end);
GType noise_fast_grid_model_get_type (void) G_GNUC_CONST;
NoiseFastGridModel* noise_fast_grid_model_new (void);
NoiseFastGridModel* noise_fast_grid_model_construct (GType object_type);
void noise_fast_grid_model_append (NoiseFastGridModel* self, GtkTreeIter* iter);
void noise_fast_grid_model_remove (NoiseFastGridModel* self, GtkTreeIter* iter);
void noise_fast_grid_model_set (NoiseFastGridModel* self, GtkTreeIter* iter, ...);
void noise_fast_grid_model_set_table (NoiseFastGridModel* self, GeeHashMap* table);
void noise_fast_grid_model_set_value_func (NoiseFastGridModel* self, NoiseFastGridModelValueReturnFunc func, void* func_target);
void noise_fast_grid_model_update_row (NoiseFastGridModel* self, gint index);
#define NOISE_FAST_VIEW_OPTIMAL_COLUMN (-2)
NoiseFastView* noise_fast_view_new (GeeCollection* types);
NoiseFastView* noise_fast_view_construct (GType object_type, GeeCollection* types);
GeeMap* noise_fast_view_get_table (NoiseFastView* self);
GeeMap* noise_fast_view_get_visible_table (NoiseFastView* self);
gint noise_fast_view_get_index_from_iter (GtkTreeIter* iter);
NoiseMedia* noise_fast_view_get_object_from_index (NoiseFastView* self, gint index);
void noise_fast_view_set_value_func (NoiseFastView* self, NoiseFastModelValueReturnFunc func, void* func_target);
void noise_fast_view_set_table (NoiseFastView* self, GeeHashMap* table, gboolean do_resort);
void noise_fast_view_set_search_func (NoiseFastView* self, NoiseFastViewViewSearchFunc func, void* func_target);
void noise_fast_view_do_search (NoiseFastView* self, const gchar* search);
void noise_fast_view_redraw_row (NoiseFastView* self, gint row_index);
void noise_fast_view_set_sort_column_id (NoiseFastView* self, gint sort_column_id, GtkSortType order);
void noise_fast_view_get_sort_column_id (NoiseFastView* self, gint* sort_column, GtkSortType* order);
void noise_fast_view_resort (NoiseFastView* self);
void noise_fast_view_set_compare_func (NoiseFastView* self, NoiseFastViewSortCompareFunc func, void* func_target);
void noise_fast_view_quicksort (NoiseFastView* self, gint start, gint end);
GType noise_fast_model_get_type (void) G_GNUC_CONST;
NoiseFastModel* noise_fast_model_new (GeeCollection* column_types);
NoiseFastModel* noise_fast_model_construct (GType object_type, GeeCollection* column_types);
GObject* noise_fast_model_get_object (NoiseFastModel* self, GtkTreeIter* iter);
void noise_fast_model_append (NoiseFastModel* self, GtkTreeIter* iter);
void noise_fast_model_remove (NoiseFastModel* self, GtkTreeIter* iter);
void noise_fast_model_set (NoiseFastModel* self, GtkTreeIter* iter, ...);
void noise_fast_model_set_table (NoiseFastModel* self, GeeHashMap* table);
void noise_fast_model_set_value_func (NoiseFastModel* self, NoiseFastModelValueReturnFunc func, void* func_target);
void noise_fast_model_update_row (NoiseFastModel* self, gint index);
GType noise_data_base_manager_get_type (void) G_GNUC_CONST;
NoiseDataBaseManager* noise_data_base_manager_get_default (void);
void noise_data_base_manager_resetProgress (NoiseDataBaseManager* self, gint items);
GeeTreeSet* noise_data_base_manager_load_media (NoiseDataBaseManager* self);
void noise_data_base_manager_clear_media (NoiseDataBaseManager* self);
GeeTreeSet* noise_data_base_manager_add_media (NoiseDataBaseManager* self, GeeCollection* media);
void noise_data_base_manager_remove_media (NoiseDataBaseManager* self, GeeCollection* media);
GeeHashMap* noise_data_base_manager_load_columns_state (NoiseDataBaseManager* self);
void noise_data_base_manager_save_columns_state (NoiseDataBaseManager* self, GeeCollection* playlists, GeeCollection* smart_playlists);
void noise_data_base_manager_add_columns_state (NoiseDataBaseManager* self, NoiseStaticPlaylist* p, NoiseSmartPlaylist* sp);
void noise_data_base_manager_remove_columns_state (NoiseDataBaseManager* self, NoiseStaticPlaylist* p, NoiseSmartPlaylist* sp);
void noise_data_base_manager_add_default_columns (NoiseDataBaseManager* self);
GeeArrayList* noise_data_base_manager_load_playlists (NoiseDataBaseManager* self);
void noise_data_base_manager_save_playlists (NoiseDataBaseManager* self, GeeCollection* playlists);
void noise_data_base_manager_save_playlist (NoiseDataBaseManager* self, NoiseStaticPlaylist* p, const gchar* old_name);
void noise_data_base_manager_add_playlist (NoiseDataBaseManager* self, NoiseStaticPlaylist* p);
void noise_data_base_manager_remove_playlist (NoiseDataBaseManager* self, NoiseStaticPlaylist* p);
GeeLinkedList* noise_data_base_manager_queries_from_string (const gchar* q);
gchar* noise_data_base_manager_queries_to_string (GeeCollection* queries);
void noise_data_base_manager_add_default_smart_playlists (NoiseDataBaseManager* self);
GeeArrayList* noise_data_base_manager_load_smart_playlists (NoiseDataBaseManager* self);
void noise_data_base_manager_save_smart_playlists (NoiseDataBaseManager* self, GeeCollection* smarts);
void noise_data_base_manager_save_smart_playlist (NoiseDataBaseManager* self, NoiseSmartPlaylist* p, const gchar* old_name);
void noise_data_base_manager_remove_smart_playlist (NoiseDataBaseManager* self, NoiseSmartPlaylist* p);
GeeCollection* noise_data_base_manager_load_devices (NoiseDataBaseManager* self);
void noise_data_base_manager_save_devices (NoiseDataBaseManager* self, GeeCollection* devices);
void noise_data_base_manager_save_device (NoiseDataBaseManager* self, NoiseDevicePreferences* dp);
void noise_data_base_manager_remove_device (NoiseDataBaseManager* self, NoiseDevicePreferences* device);
NoiseDataBaseUpdater* noise_data_base_updater_new (void);
NoiseDataBaseUpdater* noise_data_base_updater_construct (GType object_type);
void noise_data_base_updater_removeItem (NoiseDataBaseUpdater* self, GObject* item, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_data_base_updater_removeItem_finish (NoiseDataBaseUpdater* self, GAsyncResult* _res_);
void noise_data_base_updater_save_device (NoiseDataBaseUpdater* self, NoiseDevicePreferences* device);
void noise_data_base_updater_save_playlist (NoiseDataBaseUpdater* self, NoiseStaticPlaylist* p, const gchar* old_name);
void noise_data_base_updater_save_smart_playlist (NoiseDataBaseUpdater* self, NoiseSmartPlaylist* p, const gchar* old_name);
#define NOISE_DATABASE_TABLES_PLAYLISTS "\n" \
"CREATE TABLE IF NOT EXISTS playlists (`name` TEXT, `media` TEXT,\n" \
"`sort_column_id` INT, `sort_direction` TEXT, `columns` TEXT)\n"
#define NOISE_DATABASE_TABLES_SMART_PLAYLISTS "\n" \
"CREATE TABLE IF NOT EXISTS smart_playlists (`name` TEXT, `and_or` INT," \
" `queries` TEXT,\n" \
"`limit` INT, `limit_amount` INT)\n"
#define NOISE_DATABASE_TABLES_COLUMNS "\n" \
"CREATE TABLE IF NOT EXISTS columns (`is_smart` INT, `name` TEXT, `sort" \
"_column_id` INT, `sort_direction` TEXT,\n" \
"`columns` TEXT)\n"
#define NOISE_DATABASE_TABLES_MEDIA "\n" \
"CREATE TABLE IF NOT EXISTS media (`uri` TEXT, `file_size` INT, `title`" \
" TEXT,\n" \
"`artist` TEXT, `composer` TEXT, `album_artist` TEXT, `album` TEXT,\n" \
"`grouping` TEXT, `genre` TEXT,`comment` TEXT, `lyrics` TEXT, `has_embe" \
"dded` INT,\n" \
"`year` INT, `track` INT, `track_count` INT, `album_number` INT,\n" \
"`album_count` INT, `bitrate` INT, `length` INT, `samplerate` INT, `rat" \
"ing` INT,\n" \
"`playcount` INT, `skipcount` INT, `dateadded` INT, `lastplayed` INT,\n" \
"`lastmodified` INT, `rowid` INTEGER PRIMARY KEY AUTOINCREMENT)\n"
#define NOISE_DATABASE_TABLES_DEVICES "\n" \
"CREATE TABLE IF NOT EXISTS devices (`unique_id` TEXT, `sync_when_mount" \
"ed` INT,\n" \
"`sync_music` INT, `sync_podcasts` INT, `sync_audiobooks` INT, `sync_al" \
"l_music` INT,\n" \
"`sync_all_podcasts` INT, `sync_all_audiobooks` INT, `music_playlist` S" \
"TRING,\n" \
"`podcast_playlist` STRING, `audiobook_playlist` STRING, `last_sync_tim" \
"e` INT)\n"
NoiseGStreamerTagger* noise_gstreamer_tagger_new (GCancellable* cancellable);
NoiseGStreamerTagger* noise_gstreamer_tagger_construct (GType object_type, GCancellable* cancellable);
void noise_gstreamer_tagger_discoverer_import_media (NoiseGStreamerTagger* self, GeeCollection* uris);
NoiseStreamer* noise_streamer_new (void);
NoiseStreamer* noise_streamer_construct (GType object_type);
GType noise_cover_import_get_type (void) G_GNUC_CONST;
NoiseCoverImport* noise_cover_import_new (GCancellable* cancellable);
NoiseCoverImport* noise_cover_import_construct (GType object_type, GCancellable* cancellable);
void noise_cover_import_discoverer_import_media (NoiseCoverImport* self, GeeCollection* medias);
NoiseViewContainer* noise_view_container_new (void);
NoiseViewContainer* noise_view_container_construct (GType object_type);
gint noise_view_container_add_view (NoiseViewContainer* self, GtkWidget* view);
void noise_view_container_remove_view (NoiseViewContainer* self, GtkWidget* view);
GtkWidget* noise_view_container_get_view (NoiseViewContainer* self, gint index);
GtkWidget* noise_view_container_get_nth_page (NoiseViewContainer* self, gint index);
gint noise_view_container_get_view_index (NoiseViewContainer* self, GtkWidget* view);
gboolean noise_view_container_has_view (NoiseViewContainer* self, GtkWidget* view);
gboolean noise_view_container_has_view_index (NoiseViewContainer* self, gint index);
gint noise_view_container_get_current_index (NoiseViewContainer* self);
GtkWidget* noise_view_container_get_current_view (NoiseViewContainer* self);
gint noise_view_container_get_n_pages (NoiseViewContainer* self);
gboolean noise_view_container_set_current_view (NoiseViewContainer* self, GtkWidget* view);
gboolean noise_view_container_set_current_view_from_index (NoiseViewContainer* self, gint index);
GType noise_view_wrapper_view_type_get_type (void) G_GNUC_CONST;
#define NOISE_VIEW_WRAPPER_VIEW_CONSTRUCT_PRIORITY (G_PRIORITY_DEFAULT_IDLE - 10)
NoiseViewWrapper* noise_view_wrapper_construct (GType object_type, NoiseViewWrapperHint hint, NoiseLibrary* library);
void noise_view_wrapper_pack_views (NoiseViewWrapper* self);
void noise_view_wrapper_set_active_view (NoiseViewWrapper* self, NoiseViewWrapperViewType type, gboolean* successful);
void noise_view_wrapper_update_library_window_widgets (NoiseViewWrapper* self);
void noise_view_wrapper_view_selector_changed (NoiseViewWrapper* self);
void noise_view_wrapper_play_first_media (NoiseViewWrapper* self, gboolean* force);
void noise_view_wrapper_set_as_current_view (NoiseViewWrapper* self);
gchar* noise_view_wrapper_get_statusbar_text (NoiseViewWrapper* self);
void noise_view_wrapper_update_statusbar_info (NoiseViewWrapper* self);
gboolean noise_view_wrapper_check_have_media (NoiseViewWrapper* self);
void noise_view_wrapper_select_proper_content_view (NoiseViewWrapper* self);
GeeCollection* noise_view_wrapper_get_media_list (NoiseViewWrapper* self);
void noise_view_wrapper_clear_filters (NoiseViewWrapper* self);
void noise_view_wrapper_update_visible_media (NoiseViewWrapper* self);
void noise_view_wrapper_set_no_media_alert (NoiseViewWrapper* self);
void noise_view_wrapper_set_media_async (NoiseViewWrapper* self, GeeCollection* new_media, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_view_wrapper_set_media_finish (NoiseViewWrapper* self, GAsyncResult* _res_);
void noise_view_wrapper_add_media_async (NoiseViewWrapper* self, GeeCollection* to_add, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_view_wrapper_add_media_finish (NoiseViewWrapper* self, GAsyncResult* _res_);
void noise_view_wrapper_remove_media_async (NoiseViewWrapper* self, GeeCollection* to_remove, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_view_wrapper_remove_media_finish (NoiseViewWrapper* self, GAsyncResult* _res_);
void noise_view_wrapper_update_media_async (NoiseViewWrapper* self, GeeCollection* to_update, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_view_wrapper_update_media_finish (NoiseViewWrapper* self, GAsyncResult* _res_);
GType noise_list_view_get_type (void) G_GNUC_CONST;
NoiseListView* noise_view_wrapper_get_list_view (NoiseViewWrapper* self);
void noise_view_wrapper_set_list_view (NoiseViewWrapper* self, NoiseListView* value);
GType noise_view_text_overlay_get_type (void) G_GNUC_CONST;
GType noise_grid_layout_get_type (void) G_GNUC_CONST;
GType noise_grid_view_get_type (void) G_GNUC_CONST;
NoiseGridView* noise_view_wrapper_get_grid_view (NoiseViewWrapper* self);
void noise_view_wrapper_set_grid_view (NoiseViewWrapper* self, NoiseGridView* value);
GraniteWidgetsEmbeddedAlert* noise_view_wrapper_get_embedded_alert (NoiseViewWrapper* self);
void noise_view_wrapper_set_embedded_alert (NoiseViewWrapper* self, GraniteWidgetsEmbeddedAlert* value);
GraniteWidgetsWelcome* noise_view_wrapper_get_welcome_screen (NoiseViewWrapper* self);
void noise_view_wrapper_set_welcome_screen (NoiseViewWrapper* self, GraniteWidgetsWelcome* value);
gboolean noise_view_wrapper_get_has_grid_view (NoiseViewWrapper* self);
gboolean noise_view_wrapper_get_has_list_view (NoiseViewWrapper* self);
gboolean noise_view_wrapper_get_has_embedded_alert (NoiseViewWrapper* self);
gboolean noise_view_wrapper_get_has_welcome_screen (NoiseViewWrapper* self);
NoiseViewWrapperViewType noise_view_wrapper_get_current_view (NoiseViewWrapper* self);
NoiseViewWrapperHint noise_view_wrapper_get_hint (NoiseViewWrapper* self);
void noise_view_wrapper_set_hint (NoiseViewWrapper* self, NoiseViewWrapperHint value);
NoiseLibrary* noise_view_wrapper_get_library (NoiseViewWrapper* self);
void noise_view_wrapper_set_library (NoiseViewWrapper* self, NoiseLibrary* value);
gboolean noise_view_wrapper_get_is_current_wrapper (NoiseViewWrapper* self);
gint noise_view_wrapper_get_index (NoiseViewWrapper* self);
gint noise_view_wrapper_get_relative_id (NoiseViewWrapper* self);
void noise_view_wrapper_set_relative_id (NoiseViewWrapper* self, gint value);
gint noise_view_wrapper_get_media_count (NoiseViewWrapper* self);
GType noise_music_view_wrapper_get_type (void) G_GNUC_CONST;
NoiseMusicViewWrapper* noise_music_view_wrapper_new (NoiseTreeViewSetup* tvs, NoiseLibrary* library, NoiseTopDisplay* topDisplay);
NoiseMusicViewWrapper* noise_music_view_wrapper_construct (GType object_type, NoiseTreeViewSetup* tvs, NoiseLibrary* library, NoiseTopDisplay* topDisplay);
GType noise_device_view_wrapper_get_type (void) G_GNUC_CONST;
NoiseDeviceViewWrapper* noise_device_view_wrapper_new (NoiseTreeViewSetup* tvs, NoiseDevice* d, NoiseLibrary* library);
NoiseDeviceViewWrapper* noise_device_view_wrapper_construct (GType object_type, NoiseTreeViewSetup* tvs, NoiseDevice* d, NoiseLibrary* library);
void noise_device_view_wrapper_set_device (NoiseDeviceViewWrapper* self, NoiseDevice* device);
NoiseDevice* noise_device_view_wrapper_get_d (NoiseDeviceViewWrapper* self);
GType noise_playlist_view_wrapper_get_type (void) G_GNUC_CONST;
NoisePlaylistViewWrapper* noise_playlist_view_wrapper_new (gint playlist_id, NoiseViewWrapperHint hint, NoiseTreeViewSetup* tvs, NoiseLibrary* library);
NoisePlaylistViewWrapper* noise_playlist_view_wrapper_construct (GType object_type, gint playlist_id, NoiseViewWrapperHint hint, NoiseTreeViewSetup* tvs, NoiseLibrary* library);
gint noise_playlist_view_wrapper_get_playlist_id (NoisePlaylistViewWrapper* self);
void noise_playlist_view_wrapper_set_playlist_id (NoisePlaylistViewWrapper* self, gint value);
GType noise_read_only_playlist_view_wrapper_get_type (void) G_GNUC_CONST;
NoiseReadOnlyPlaylistViewWrapper* noise_read_only_playlist_view_wrapper_new (gint playlist_id, NoiseTreeViewSetup* tvs, gboolean* is_queue, NoiseLibrary* library);
NoiseReadOnlyPlaylistViewWrapper* noise_read_only_playlist_view_wrapper_construct (GType object_type, gint playlist_id, NoiseTreeViewSetup* tvs, gboolean* is_queue, NoiseLibrary* library);
void noise_read_only_playlist_view_wrapper_set_no_media_alert_message (NoiseReadOnlyPlaylistViewWrapper* self, const gchar* head, const gchar* body, GtkMessageType* type);
gint noise_read_only_playlist_view_wrapper_get_playlist_id (NoiseReadOnlyPlaylistViewWrapper* self);
void noise_read_only_playlist_view_wrapper_set_playlist_id (NoiseReadOnlyPlaylistViewWrapper* self, gint value);
GType noise_device_view_get_type (void) G_GNUC_CONST;
NoiseDeviceView* noise_device_view_new (NoiseDevice* d);
NoiseDeviceView* noise_device_view_construct (GType object_type, NoiseDevice* d);
void noise_device_view_set_as_current_view (NoiseDeviceView* self);
void noise_device_view_showImportDialog (NoiseDeviceView* self);
void noise_device_view_syncClicked (NoiseDeviceView* self);
GType noise_device_summary_widget_get_type (void) G_GNUC_CONST;
NoiseDeviceSummaryWidget* noise_device_summary_widget_new (NoiseDevice* d);
NoiseDeviceSummaryWidget* noise_device_summary_widget_construct (GType object_type, NoiseDevice* d);
void noise_device_summary_widget_build_ui (NoiseDeviceSummaryWidget* self);
gboolean noise_device_summary_widget_all_medias_selected (NoiseDeviceSummaryWidget* self);
void noise_device_summary_widget_refresh_lists (NoiseDeviceSummaryWidget* self);
void noise_device_summary_widget_sync_clicked (NoiseDeviceSummaryWidget* self);
GType noise_content_view_get_type (void) G_GNUC_CONST;
NoiseViewWrapperHint noise_content_view_get_hint (NoiseContentView* self);
GeeCollection* noise_content_view_get_media (NoiseContentView* self);
GeeCollection* noise_content_view_get_visible_media (NoiseContentView* self);
gchar* noise_content_view_get_statusbar_text (NoiseContentView* self);
void noise_content_view_refilter (NoiseContentView* self, const gchar* search);
void noise_content_view_set_media (NoiseContentView* self, GeeCollection* new_media);
void noise_content_view_add_media (NoiseContentView* self, GeeCollection* to_add);
void noise_content_view_remove_media (NoiseContentView* self, GeeCollection* to_remove);
void noise_content_view_update_media (NoiseContentView* self, GeeCollection* to_update);
#define NOISE_CONTENT_VIEW_FULL_STATUSBAR_FORMAT "%s, %s, %s"
NoiseViewTextOverlay* noise_view_text_overlay_new (void);
NoiseViewTextOverlay* noise_view_text_overlay_construct (GType object_type);
const gchar* noise_view_text_overlay_get_message (NoiseViewTextOverlay* self);
void noise_view_text_overlay_set_message (NoiseViewTextOverlay* self, const gchar* value);
gboolean noise_view_text_overlay_get_message_visible (NoiseViewTextOverlay* self);
void noise_view_text_overlay_set_message_visible (NoiseViewTextOverlay* self, gboolean value);
NoiseGridLayout* noise_grid_layout_construct (GType object_type, NoiseViewWrapper* view_wrapper);
void noise_grid_layout_item_activated (NoiseGridLayout* self, GObject* object);
GValue* noise_grid_layout_val_func (NoiseGridLayout* self, gint row, gint column, GObject* o);
gint noise_grid_layout_compare_func (NoiseGridLayout* self, GObject* a, GObject* b);
void noise_grid_layout_search_func (NoiseGridLayout* self, const gchar* search, GeeHashMap* table, GeeHashMap* showing);
GeeCollection* noise_grid_layout_get_selected_media (NoiseGridLayout* self, GObject* obj);
GdkPixbuf* noise_grid_layout_get_pixbuf (NoiseGridLayout* self, GObject* o);
void noise_grid_layout_set_research_needed (NoiseGridLayout* self, gboolean value);
void noise_grid_layout_add_objects (NoiseGridLayout* self, GeeCollection* objects);
void noise_grid_layout_do_search (NoiseGridLayout* self, const gchar* search);
void noise_grid_layout_remove_objects (NoiseGridLayout* self, GeeCollection* objects);
void noise_grid_layout_clear_objects (NoiseGridLayout* self);
GeeCollection* noise_grid_layout_get_objects (NoiseGridLayout* self);
GeeCollection* noise_grid_layout_get_visible_objects (NoiseGridLayout* self);
NoiseViewWrapper* noise_grid_layout_get_parent_view_wrapper (NoiseGridLayout* self);
void noise_grid_layout_set_parent_view_wrapper (NoiseGridLayout* self, NoiseViewWrapper* value);
NoiseGridView* noise_grid_view_new (NoiseViewWrapper* view_wrapper);
NoiseGridView* noise_grid_view_construct (GType object_type, NoiseViewWrapper* view_wrapper);
void noise_grid_view_setup_focus (NoiseGridView* self);
GeeCollection* noise_grid_view_get_visible_albums (NoiseGridView* self);
GeeCollection* noise_grid_view_get_albums (NoiseGridView* self);
gint noise_grid_view_get_relative_id (NoiseGridView* self);
GType noise_popup_list_view_get_type (void) G_GNUC_CONST;
NoisePopupListView* noise_grid_view_get_popup_list_view (NoiseGridView* self);
#define NOISE_POPUP_LIST_VIEW_MIN_SIZE 500
NoisePopupListView* noise_popup_list_view_new (NoiseGridView* grid_view);
NoisePopupListView* noise_popup_list_view_construct (GType object_type, NoiseGridView* grid_view);
void noise_popup_list_view_reset (NoisePopupListView* self);
gboolean noise_popup_list_view_show_cover_context_menu (NoisePopupListView* self, GtkWidget* sender, GdkEventButton* evt);
void noise_popup_list_view_set_parent_wrapper (NoisePopupListView* self, NoiseViewWrapper* parent_wrapper);
void noise_popup_list_view_set_album (NoisePopupListView* self, NoiseAlbum* album);
void noise_popup_list_view_set_size (NoisePopupListView* self, gint size);
NoiseListView* noise_list_view_new (NoiseViewWrapper* view_wrapper, NoiseTreeViewSetup* tvs, gboolean add_browser, gboolean* is_queue, gboolean* read_only);
NoiseListView* noise_list_view_construct (GType object_type, NoiseViewWrapper* view_wrapper, NoiseTreeViewSetup* tvs, gboolean add_browser, gboolean* is_queue, gboolean* read_only);
gint noise_list_view_get_relative_id (NoiseListView* self);
void noise_list_view_set_as_current_list (NoiseListView* self, gint media_id, gboolean is_initial);
gboolean noise_list_view_get_is_current_list (NoiseListView* self);
GType noise_column_browser_get_type (void) G_GNUC_CONST;
NoiseColumnBrowser* noise_list_view_get_column_browser (NoiseListView* self);
NoiseMusicListView* noise_list_view_get_list_view (NoiseListView* self);
guint noise_list_view_get_n_media (NoiseListView* self);
gboolean noise_list_view_get_has_column_browser (NoiseListView* self);
gboolean noise_list_view_get_column_browser_enabled (NoiseListView* self);
GType noise_browser_column_model_get_type (void) G_GNUC_CONST;
GType noise_browser_column_category_get_type (void) G_GNUC_CONST;
NoiseBrowserColumnModel* noise_browser_column_model_new (NoiseBrowserColumnCategory category);
NoiseBrowserColumnModel* noise_browser_column_model_construct (GType object_type, NoiseBrowserColumnCategory category);
void noise_browser_column_model_append (NoiseBrowserColumnModel* self, GtkTreeIter* iter);
void noise_browser_column_model_append_items (NoiseBrowserColumnModel* self, GeeCollection* strings, gboolean emit);
void noise_browser_column_model_set (NoiseBrowserColumnModel* self, GtkTreeIter* iter, ...);
void noise_browser_column_model_remove (NoiseBrowserColumnModel* self, GtkTreeIter* iter);
gint noise_browser_column_model_sequenceIterCompareFunc (NoiseBrowserColumnModel* self, GSequenceIter* a, GSequenceIter* b);
gint noise_browser_column_model_get_n_items (NoiseBrowserColumnModel* self);
GType noise_browser_column_get_type (void) G_GNUC_CONST;
NoiseBrowserColumnCategory noise_browser_column_category_first (void);
NoiseBrowserColumnCategory noise_browser_column_category_last (void);
gchar* noise_browser_column_category_to_string (NoiseBrowserColumnCategory self);
NoiseBrowserColumn* noise_browser_column_new (NoiseColumnBrowser* miller_parent, NoiseBrowserColumnCategory category);
NoiseBrowserColumn* noise_browser_column_construct (GType object_type, NoiseColumnBrowser* miller_parent, NoiseBrowserColumnCategory category);
void noise_browser_column_add_item (NoiseBrowserColumn* self, const gchar* text);
void noise_browser_column_select_first_item (NoiseBrowserColumn* self);
gchar* noise_browser_column_get_selected (NoiseBrowserColumn* self);
void noise_browser_column_populate (NoiseBrowserColumn* self, GeeHashSet* items);
void noise_browser_column_set_selected (NoiseBrowserColumn* self, const gchar* val, gboolean notify);
gboolean noise_browser_column_get_visible (NoiseBrowserColumn* self);
void noise_browser_column_set_visible (NoiseBrowserColumn* self, gboolean value);
void noise_browser_column_set_show_separator (NoiseBrowserColumn* self, gboolean value);
gboolean noise_browser_column_get_first_item_selected (NoiseBrowserColumn* self);
NoiseBrowserColumnCategory noise_browser_column_get_category (NoiseBrowserColumn* self);
void noise_browser_column_set_category (NoiseBrowserColumn* self, NoiseBrowserColumnCategory value);
GtkCheckMenuItem* noise_browser_column_get_menu_item (NoiseBrowserColumn* self);
void noise_browser_column_set_menu_item (NoiseBrowserColumn* self, GtkCheckMenuItem* value);
GType noise_column_browser_position_get_type (void) G_GNUC_CONST;
NoiseColumnBrowser* noise_column_browser_construct (GType object_type, NoiseViewWrapper* view_wrapper, NoiseBrowserColumnCategory* categories, int categories_length1);
void noise_column_browser_reset_filters (NoiseColumnBrowser* self);
NoiseBrowserColumn* noise_column_browser_add_column (NoiseColumnBrowser* self, NoiseBrowserColumnCategory type);
void noise_column_browser_set_media (NoiseColumnBrowser* self, GeeCollection* media);
void noise_column_browser_fill_column (NoiseColumnBrowser* self, NoiseBrowserColumn* column);
gboolean noise_column_browser_match_media (NoiseColumnBrowser* self, NoiseMedia* m);
NoiseColumnBrowserPosition noise_column_browser_get_position (NoiseColumnBrowser* self);
void noise_column_browser_set_position (NoiseColumnBrowser* self, NoiseColumnBrowserPosition value);
NoiseColumnBrowserPosition noise_column_browser_get_actual_position (NoiseColumnBrowser* self);
void noise_column_browser_set_actual_position (NoiseColumnBrowser* self, NoiseColumnBrowserPosition value);
NoiseViewWrapper* noise_column_browser_get_view_wrapper (NoiseColumnBrowser* self);
gboolean noise_column_browser_get_filtered (NoiseColumnBrowser* self);
GeeTreeSet* noise_column_browser_get_visible_columns (NoiseColumnBrowser* self);
void noise_column_browser_set_visible_columns (NoiseColumnBrowser* self, GeeTreeSet* value);
gboolean noise_column_browser_get_initialized (NoiseColumnBrowser* self);
GeeTreeSet* noise_column_browser_get_columns (NoiseColumnBrowser* self);
GType noise_music_column_browser_get_type (void) G_GNUC_CONST;
NoiseMusicColumnBrowser* noise_music_column_browser_new (NoiseViewWrapper* view_wrapper);
NoiseMusicColumnBrowser* noise_music_column_browser_construct (GType object_type, NoiseViewWrapper* view_wrapper);
GType noise_list_column_get_type (void) G_GNUC_CONST;
gchar* noise_list_column_to_string (NoiseListColumn self);
GType noise_list_column_get_data_type (NoiseListColumn self);
GValue* noise_list_column_get_value_for_media (NoiseListColumn self, NoiseMedia* m, gint media_row_index);
GeeCollection* noise_list_column_get_all (void);
NoiseTreeViewSetup* noise_tree_view_setup_new (gint sort_col, GtkSortType sort_dir, NoiseViewWrapperHint hint);
NoiseTreeViewSetup* noise_tree_view_setup_construct (GType object_type, gint sort_col, GtkSortType sort_dir, NoiseViewWrapperHint hint);
NoiseViewWrapperHint noise_tree_view_setup_get_hint (NoiseTreeViewSetup* self);
void noise_tree_view_setup_set_hint (NoiseTreeViewSetup* self, NoiseViewWrapperHint hint);
gchar* noise_tree_view_setup_sort_direction_to_string (NoiseTreeViewSetup* self);
void noise_tree_view_setup_set_sort_direction_from_string (NoiseTreeViewSetup* self, const gchar* dir);
GeeCollection* noise_tree_view_setup_get_columns (NoiseTreeViewSetup* self);
void noise_tree_view_setup_set_columns (NoiseTreeViewSetup* self, GeeCollection* cols);
gboolean noise_tree_view_setup_import_columns (NoiseTreeViewSetup* self, const gchar* cols);
gchar* noise_tree_view_setup_columns_to_string (NoiseTreeViewSetup* self);
GtkTreeViewColumn* noise_tree_view_setup_create_column (NoiseTreeViewSetup* self, NoiseListColumn type, gboolean visible);
NoiseListColumn* noise_tree_view_setup_get_column_type (GtkTreeViewColumn* column);
gint noise_tree_view_setup_get_sort_column_id (NoiseTreeViewSetup* self);
void noise_tree_view_setup_set_sort_column_id (NoiseTreeViewSetup* self, gint value);
GtkSortType noise_tree_view_setup_get_sort_direction (NoiseTreeViewSetup* self);
void noise_tree_view_setup_set_sort_direction (NoiseTreeViewSetup* self, GtkSortType value);
gpointer noise_cell_data_function_helper_ref (gpointer instance);
void noise_cell_data_function_helper_unref (gpointer instance);
GParamSpec* noise_param_spec_cell_data_function_helper (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void noise_value_set_cell_data_function_helper (GValue* value, gpointer v_object);
void noise_value_take_cell_data_function_helper (GValue* value, gpointer v_object);
gpointer noise_value_get_cell_data_function_helper (const GValue* value);
GType noise_cell_data_function_helper_get_type (void) G_GNUC_CONST;
NoiseCellDataFunctionHelper* noise_cell_data_function_helper_new (NoiseGenericList* view);
NoiseCellDataFunctionHelper* noise_cell_data_function_helper_construct (GType object_type, NoiseGenericList* view);
void noise_cell_data_function_helper_icon_func (NoiseCellDataFunctionHelper* self, GtkCellLayout* layout, GtkCellRenderer* renderer, GtkTreeModel* model, GtkTreeIter* iter);
void noise_cell_data_function_helper_spinner_func (NoiseCellDataFunctionHelper* self, GtkCellLayout* layout, GtkCellRenderer* renderer, GtkTreeModel* model, GtkTreeIter* iter);
void noise_cell_data_function_helper_file_size_func (GtkCellLayout* layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
gchar* noise_cell_data_function_helper_get_file_size_sample (void);
void noise_cell_data_function_helper_number_func (GtkCellLayout* layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
void noise_cell_data_function_helper_intelligent_func (GtkCellLayout* layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
void noise_cell_data_function_helper_string_func (GtkCellLayout* layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
void noise_cell_data_function_helper_bitrate_func (GtkCellLayout* layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
void noise_cell_data_function_helper_length_func (GtkCellLayout* layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
gchar* noise_cell_data_function_helper_get_date_func_sample_string (void);
void noise_cell_data_function_helper_date_func (GtkCellLayout* layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
void noise_cell_data_function_helper_rating_func (GtkCellLayout* layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
NoiseGenericList* noise_generic_list_construct (GType object_type, NoiseViewWrapper* view_wrapper, NoiseTreeViewSetup* tvs);
void noise_generic_list_mediaRemoveClicked (NoiseGenericList* self);
void noise_generic_list_set_parent_wrapper (NoiseGenericList* self, NoiseViewWrapper* parent);
void noise_generic_list_add_column_chooser_menu_item (NoiseGenericList* self, GtkTreeViewColumn* tvc, NoiseListColumn type);
void noise_generic_list_set_media (NoiseGenericList* self, GeeCollection* to_add);
void noise_generic_list_remove_media (NoiseGenericList* self, GeeCollection* to_remove);
void noise_generic_list_add_media (NoiseGenericList* self, GeeCollection* to_add);
void noise_generic_list_update_sensitivities (NoiseGenericList* self);
void noise_generic_list_updateTreeViewSetup (NoiseGenericList* self);
void noise_generic_list_set_fixed_column_width (NoiseGenericList* self, GtkWidget* treeview, GtkTreeViewColumn* column, GtkCellRendererText* renderer, gchar** strings, int strings_length1, gint padding);
void noise_generic_list_columns_autosize (NoiseGenericList* self);
void noise_generic_list_add_column (NoiseGenericList* self, GtkTreeViewColumn* column, NoiseListColumn type);
void noise_generic_list_add_columns (NoiseGenericList* self);
NoiseMedia* noise_generic_list_get_media_from_index (NoiseGenericList* self, gint index);
void noise_generic_list_on_rating_cell_changed (NoiseGenericList* self, gint new_rating, GtkWidget* widget, const gchar* path);
gboolean noise_generic_list_view_header_click (NoiseGenericList* self, GdkEventButton* e, gboolean is_selector_col);
void noise_generic_list_on_rows_reordered (NoiseGenericList* self);
void noise_generic_list_media_updated (NoiseGenericList* self, GeeCollection* ids);
void noise_generic_list_set_as_current_list (NoiseGenericList* self, NoiseMedia* m);
GeeCollection* noise_generic_list_get_selected_medias (NoiseGenericList* self);
void noise_generic_list_mediaScrollToCurrentRequested (NoiseGenericList* self);
void noise_generic_list_scroll_to_current_media (NoiseGenericList* self, gboolean unfilter_if_not_found);
void noise_generic_list_set_hint (NoiseGenericList* self, NoiseViewWrapperHint hint);
NoiseViewWrapperHint noise_generic_list_get_hint (NoiseGenericList* self);
void noise_generic_list_set_relative_id (NoiseGenericList* self, gint id);
gint noise_generic_list_get_relative_id (NoiseGenericList* self);
gboolean noise_generic_list_get_is_current_list (NoiseGenericList* self);
GType noise_contract_menu_item_get_type (void) G_GNUC_CONST;
NoiseContractMenuItem* noise_contract_menu_item_new (GraniteServicesContract* contract, GeeCollection* medias);
NoiseContractMenuItem* noise_contract_menu_item_construct (GType object_type, GraniteServicesContract* contract, GeeCollection* medias);
NoiseMusicListView* noise_music_list_view_new (NoiseViewWrapper* view_wrapper, NoiseTreeViewSetup* tvs, gboolean* is_queue, gboolean* read_only);
NoiseMusicListView* noise_music_list_view_construct (GType object_type, NoiseViewWrapper* view_wrapper, NoiseTreeViewSetup* tvs, gboolean* is_queue, gboolean* read_only);
void noise_music_list_view_build_ui (NoiseMusicListView* self);
void noise_music_list_view_popup_media_menu (NoiseMusicListView* self, GeeCollection* selection);
void noise_music_list_view_mediaEditorSaved (NoiseMusicListView* self, GeeCollection* medias);
void noise_music_list_view_mediaFileBrowseClicked (NoiseMusicListView* self);
void noise_music_list_view_mediaMenuQueueClicked (NoiseMusicListView* self);
void noise_music_list_view_mediaMenuNewPlaylistClicked (NoiseMusicListView* self);
void noise_music_list_view_mediaRateMediaClicked (NoiseMusicListView* self);
void noise_music_list_view_onDragDataGet (NoiseMusicListView* self, GdkDragContext* context, GtkSelectionData* selection_data, guint info, guint time_);
gint noise_music_list_view_view_compare_func (NoiseMusicListView* self, gint column, GtkSortType dir, NoiseMedia* media_a, NoiseMedia* media_b, gint a_pos, gint b_pos);
GValue* noise_music_list_view_view_value_func (NoiseMusicListView* self, gint row, gint column, GObject* o);
GType noise_smart_playlist_editor_get_type (void) G_GNUC_CONST;
NoiseSmartPlaylistEditor* noise_smart_playlist_editor_new (NoiseSmartPlaylist* sp, NoiseLibrary* library);
NoiseSmartPlaylistEditor* noise_smart_playlist_editor_construct (GType object_type, NoiseSmartPlaylist* sp, NoiseLibrary* library);
void noise_smart_playlist_editor_load_smart_playlist (NoiseSmartPlaylistEditor* self);
void noise_smart_playlist_editor_add_row (NoiseSmartPlaylistEditor* self);
void noise_smart_playlist_editor_add_button_click (NoiseSmartPlaylistEditor* self);
void noise_smart_playlist_editor_close_click (NoiseSmartPlaylistEditor* self);
void noise_smart_playlist_editor_save_click (NoiseSmartPlaylistEditor* self);
GType noise_smart_playlist_editor_query_get_type (void) G_GNUC_CONST;
NoiseSmartPlaylistEditorQuery* noise_smart_playlist_editor_query_new (NoiseSmartQuery* q);
NoiseSmartPlaylistEditorQuery* noise_smart_playlist_editor_query_construct (GType object_type, NoiseSmartQuery* q);
NoiseSmartQuery* noise_smart_playlist_editor_query_get_query (NoiseSmartPlaylistEditorQuery* self);
void noise_smart_playlist_editor_query_field_changed (NoiseSmartPlaylistEditorQuery* self, gboolean from_user);
void noise_smart_playlist_editor_query_remove_clicked (NoiseSmartPlaylistEditorQuery* self);
gboolean noise_smart_playlist_editor_query_needs_value (NoiseSmartPlaylistEditorQuery* self, NoiseSmartQueryFieldType compared);
gboolean noise_smart_playlist_editor_query_needs_value_2 (NoiseSmartPlaylistEditorQuery* self, NoiseSmartQueryFieldType compared);
gboolean noise_smart_playlist_editor_query_is_rating (NoiseSmartPlaylistEditorQuery* self, NoiseSmartQueryFieldType compared);
gboolean noise_smart_playlist_editor_query_is_date (NoiseSmartPlaylistEditorQuery* self, NoiseSmartQueryFieldType compared);
GType noise_preferences_window_get_type (void) G_GNUC_CONST;
#define NOISE_PREFERENCES_WINDOW_MIN_WIDTH 420
#define NOISE_PREFERENCES_WINDOW_MIN_HEIGHT 300
NoisePreferencesWindow* noise_preferences_window_new (void);
NoisePreferencesWindow* noise_preferences_window_construct (GType object_type);
gint noise_preferences_window_add_page (NoisePreferencesWindow* self, NoiseSettingsWindowNoteBook_Page* section);
void noise_preferences_window_remove_section (NoisePreferencesWindow* self, gint index);
GType noise_install_gstreamer_plugins_dialog_get_type (void) G_GNUC_CONST;
NoiseInstallGstreamerPluginsDialog* noise_install_gstreamer_plugins_dialog_new (GstMessage* message);
NoiseInstallGstreamerPluginsDialog* noise_install_gstreamer_plugins_dialog_construct (GType object_type, GstMessage* message);
void noise_install_gstreamer_plugins_dialog_install_plugin_clicked (NoiseInstallGstreamerPluginsDialog* self);
void noise_install_gstreamer_plugins_dialog_install_plugins_finished (NoiseInstallGstreamerPluginsDialog* self, GstInstallPluginsReturn _result_);
GType noise_media_editor_get_type (void) G_GNUC_CONST;
NoiseMediaEditor* noise_media_editor_new (GeeCollection* allMedias, GeeCollection* medias, NoiseLibrary* library);
NoiseMediaEditor* noise_media_editor_construct (GType object_type, GeeCollection* allMedias, GeeCollection* medias, NoiseLibrary* library);
GtkBox* noise_media_editor_createBasicContent (NoiseMediaEditor* self);
GtkBox* noise_media_editor_createLyricsContent (NoiseMediaEditor* self);
void noise_media_editor_fetchLyricsClicked (NoiseMediaEditor* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void noise_media_editor_fetchLyricsClicked_finish (NoiseMediaEditor* self, GAsyncResult* _res_);
void noise_media_editor_lyricsFetched (NoiseMediaEditor* self, NoiseMedia* m);
void noise_media_editor_previousClicked (NoiseMediaEditor* self);
void noise_media_editor_nextClicked (NoiseMediaEditor* self);
void noise_media_editor_change_media (NoiseMediaEditor* self, GeeLinkedList* newMedias);
void noise_media_editor_save_medias (NoiseMediaEditor* self);
void noise_media_editor_saveClicked (NoiseMediaEditor* self);
GType noise_field_editor_get_type (void) G_GNUC_CONST;
NoiseFieldEditor* noise_field_editor_new (const gchar* name, const gchar* original, GtkWidget* w);
NoiseFieldEditor* noise_field_editor_construct (GType object_type, const gchar* name, const gchar* original, GtkWidget* w);
void noise_field_editor_set_check_visible (NoiseFieldEditor* self, gboolean val);
void noise_field_editor_entryChanged (NoiseFieldEditor* self);
void noise_field_editor_textViewChanged (NoiseFieldEditor* self);
void noise_field_editor_spinButtonChanged (NoiseFieldEditor* self);
void noise_field_editor_ratingChanged (NoiseFieldEditor* self, gint new_rating);
gboolean noise_field_editor_checked (NoiseFieldEditor* self);
void noise_field_editor_resetClicked (NoiseFieldEditor* self);
gchar* noise_field_editor_get_value (NoiseFieldEditor* self);
void noise_field_editor_set_value (NoiseFieldEditor* self, const gchar* val);
GType noise_stats_display_get_type (void) G_GNUC_CONST;
NoiseStatsDisplay* noise_stats_display_new (gint plays, gint skips, gint last_played);
NoiseStatsDisplay* noise_stats_display_construct (GType object_type, gint plays, gint skips, gint last_played);
void noise_stats_display_resetClicked (NoiseStatsDisplay* self);
GType noise_file_not_found_dialog_get_type (void) G_GNUC_CONST;
NoiseFileNotFoundDialog* noise_file_not_found_dialog_new (GeeCollection* _media_list);
NoiseFileNotFoundDialog* noise_file_not_found_dialog_construct (GType object_type, GeeCollection* _media_list);
GType noise_remove_files_dialog_get_type (void) G_GNUC_CONST;
NoiseRemoveFilesDialog* noise_remove_files_dialog_new (GeeCollection* to_remove, NoiseViewWrapperHint media_type);
NoiseRemoveFilesDialog* noise_remove_files_dialog_construct (GType object_type, GeeCollection* to_remove, NoiseViewWrapperHint media_type);
GType noise_not_imported_window_get_type (void) G_GNUC_CONST;
NoiseNotImportedWindow* noise_not_imported_window_new (GeeCollection* files, const gchar* music);
NoiseNotImportedWindow* noise_not_imported_window_construct (GType object_type, GeeCollection* files, const gchar* music);
gboolean noise_not_imported_window_updateMoveToTrashSensetivity (NoiseNotImportedWindow* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
gboolean noise_not_imported_window_selectAll (NoiseNotImportedWindow* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
gboolean noise_not_imported_window_unselectAll (NoiseNotImportedWindow* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
gboolean noise_not_imported_window_deleteSelectedItems (NoiseNotImportedWindow* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
void noise_not_imported_window_moveToTrashClick (NoiseNotImportedWindow* self);
void noise_not_imported_window_ignoreClick (NoiseNotImportedWindow* self);
GType noise_set_music_folder_confirmation_get_type (void) G_GNUC_CONST;
NoiseSetMusicFolderConfirmation* noise_set_music_folder_confirmation_new (const gchar* path);
NoiseSetMusicFolderConfirmation* noise_set_music_folder_confirmation_construct (GType object_type, const gchar* path);
void noise_set_music_folder_confirmation_savePlaylistsClicked (NoiseSetMusicFolderConfirmation* self);
void noise_set_music_folder_confirmation_cancel_clicked (NoiseSetMusicFolderConfirmation* self);
void noise_set_music_folder_confirmation_ok_clicked (NoiseSetMusicFolderConfirmation* self);
GType noise_transfer_from_device_dialog_get_type (void) G_GNUC_CONST;
NoiseTransferFromDeviceDialog* noise_transfer_from_device_dialog_new (NoiseDevice* d, GeeCollection* _medias);
NoiseTransferFromDeviceDialog* noise_transfer_from_device_dialog_construct (GType object_type, NoiseDevice* d, GeeCollection* _medias);
gint noise_transfer_from_device_dialog_mediaCompareFunc (NoiseMedia* a, NoiseMedia* b);
GtkAlignment* noise_transfer_from_device_dialog_wrap_alignment (GtkWidget* widget, gint top, gint right, gint bottom, gint left);
gboolean noise_transfer_from_device_dialog_updateTransferSensetivity (NoiseTransferFromDeviceDialog* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
gboolean noise_transfer_from_device_dialog_selectAll (NoiseTransferFromDeviceDialog* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
gboolean noise_transfer_from_device_dialog_unselectAll (NoiseTransferFromDeviceDialog* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
void noise_transfer_from_device_dialog_transferAllToggled (NoiseTransferFromDeviceDialog* self);
gboolean noise_transfer_from_device_dialog_createTransferList (NoiseTransferFromDeviceDialog* self, GtkTreeModel* model, GtkTreePath* path, GtkTreeIter* iter);
void noise_transfer_from_device_dialog_transferClick (NoiseTransferFromDeviceDialog* self);
void noise_transfer_from_device_dialog_cancelClick (NoiseTransferFromDeviceDialog* self);
GType noise_sync_warning_dialog_get_type (void) G_GNUC_CONST;
NoiseSyncWarningDialog* noise_sync_warning_dialog_new (NoiseDevice* d, GeeCollection* to_sync, GeeCollection* removed);
NoiseSyncWarningDialog* noise_sync_warning_dialog_construct (GType object_type, NoiseDevice* d, GeeCollection* to_sync, GeeCollection* removed);
void noise_sync_warning_dialog_importMediasClicked (NoiseSyncWarningDialog* self);
void noise_sync_warning_dialog_syncClicked (NoiseSyncWarningDialog* self);
void noise_sync_warning_dialog_file_operations_done (NoiseSyncWarningDialog* self);
void noise_sync_warning_dialog_file_operations_started (NoiseSyncWarningDialog* self);


G_END_DECLS

#endif
